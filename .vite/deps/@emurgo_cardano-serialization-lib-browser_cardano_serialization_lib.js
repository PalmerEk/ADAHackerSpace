import {
  __require
} from "./chunk-TFWDKVI3.js";

// node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.js
var heap = new Array(32).fill(void 0);
heap.push(void 0, null, true, false);
function getObject(idx) {
  return heap[idx];
}
var heap_next = heap.length;
function dropObject(idx) {
  if (idx < 36)
    return;
  heap[idx] = heap_next;
  heap_next = idx;
}
function takeObject(idx) {
  const ret = getObject(idx);
  dropObject(idx);
  return ret;
}
var lTextDecoder = typeof TextDecoder === "undefined" ? (0, module.require)("util").TextDecoder : TextDecoder;
var cachedTextDecoder = new lTextDecoder("utf-8", { ignoreBOM: true, fatal: true });
cachedTextDecoder.decode();
var cachedUint8Memory0 = new Uint8Array();
function getUint8Memory0() {
  if (cachedUint8Memory0.byteLength === 0) {
    cachedUint8Memory0 = new Uint8Array(memory.buffer);
  }
  return cachedUint8Memory0;
}
function getStringFromWasm0(ptr, len) {
  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}
function addHeapObject(obj) {
  if (heap_next === heap.length)
    heap.push(heap.length + 1);
  const idx = heap_next;
  heap_next = heap[idx];
  heap[idx] = obj;
  return idx;
}
var WASM_VECTOR_LEN = 0;
var lTextEncoder = typeof TextEncoder === "undefined" ? (0, module.require)("util").TextEncoder : TextEncoder;
var cachedTextEncoder = new lTextEncoder("utf-8");
var encodeString = typeof cachedTextEncoder.encodeInto === "function" ? function(arg, view) {
  return cachedTextEncoder.encodeInto(arg, view);
} : function(arg, view) {
  const buf = cachedTextEncoder.encode(arg);
  view.set(buf);
  return {
    read: arg.length,
    written: buf.length
  };
};
function passStringToWasm0(arg, malloc, realloc) {
  if (realloc === void 0) {
    const buf = cachedTextEncoder.encode(arg);
    const ptr2 = malloc(buf.length);
    getUint8Memory0().subarray(ptr2, ptr2 + buf.length).set(buf);
    WASM_VECTOR_LEN = buf.length;
    return ptr2;
  }
  let len = arg.length;
  let ptr = malloc(len);
  const mem = getUint8Memory0();
  let offset = 0;
  for (; offset < len; offset++) {
    const code = arg.charCodeAt(offset);
    if (code > 127)
      break;
    mem[ptr + offset] = code;
  }
  if (offset !== len) {
    if (offset !== 0) {
      arg = arg.slice(offset);
    }
    ptr = realloc(ptr, len, len = offset + arg.length * 3);
    const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
    const ret = encodeString(arg, view);
    offset += ret.written;
  }
  WASM_VECTOR_LEN = offset;
  return ptr;
}
function isLikeNone(x) {
  return x === void 0 || x === null;
}
var cachedInt32Memory0 = new Int32Array();
function getInt32Memory0() {
  if (cachedInt32Memory0.byteLength === 0) {
    cachedInt32Memory0 = new Int32Array(memory.buffer);
  }
  return cachedInt32Memory0;
}
function debugString(val) {
  const type = typeof val;
  if (type == "number" || type == "boolean" || val == null) {
    return `${val}`;
  }
  if (type == "string") {
    return `"${val}"`;
  }
  if (type == "symbol") {
    const description = val.description;
    if (description == null) {
      return "Symbol";
    } else {
      return `Symbol(${description})`;
    }
  }
  if (type == "function") {
    const name = val.name;
    if (typeof name == "string" && name.length > 0) {
      return `Function(${name})`;
    } else {
      return "Function";
    }
  }
  if (Array.isArray(val)) {
    const length = val.length;
    let debug = "[";
    if (length > 0) {
      debug += debugString(val[0]);
    }
    for (let i = 1; i < length; i++) {
      debug += ", " + debugString(val[i]);
    }
    debug += "]";
    return debug;
  }
  const builtInMatches = /\[object ([^\]]+)\]/.exec(toString.call(val));
  let className;
  if (builtInMatches.length > 1) {
    className = builtInMatches[1];
  } else {
    return toString.call(val);
  }
  if (className == "Object") {
    try {
      return "Object(" + JSON.stringify(val) + ")";
    } catch (_) {
      return "Object";
    }
  }
  if (val instanceof Error) {
    return `${val.name}: ${val.message}
${val.stack}`;
  }
  return className;
}
function getArrayU8FromWasm0(ptr, len) {
  return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);
}
function passArray8ToWasm0(arg, malloc) {
  const ptr = malloc(arg.length * 1);
  getUint8Memory0().set(arg, ptr / 1);
  WASM_VECTOR_LEN = arg.length;
  return ptr;
}
function _assertClass(instance, klass) {
  if (!(instance instanceof klass)) {
    throw new Error(`expected instance of ${klass.name}`);
  }
  return instance.ptr;
}
var cachedUint32Memory0 = new Uint32Array();
function getUint32Memory0() {
  if (cachedUint32Memory0.byteLength === 0) {
    cachedUint32Memory0 = new Uint32Array(memory.buffer);
  }
  return cachedUint32Memory0;
}
function getArrayU32FromWasm0(ptr, len) {
  return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);
}
function passArray32ToWasm0(arg, malloc) {
  const ptr = malloc(arg.length * 4);
  getUint32Memory0().set(arg, ptr / 4);
  WASM_VECTOR_LEN = arg.length;
  return ptr;
}
function encode_arbitrary_bytes_as_metadatum2(bytes) {
  const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
  const len0 = WASM_VECTOR_LEN;
  const ret = encode_arbitrary_bytes_as_metadatum(ptr0, len0);
  return TransactionMetadatum.__wrap(ret);
}
function decode_arbitrary_bytes_from_metadatum2(metadata) {
  try {
    const retptr = __wbindgen_add_to_stack_pointer(-16);
    _assertClass(metadata, TransactionMetadatum);
    decode_arbitrary_bytes_from_metadatum(retptr, metadata.ptr);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var r2 = getInt32Memory0()[retptr / 4 + 2];
    var r3 = getInt32Memory0()[retptr / 4 + 3];
    if (r3) {
      throw takeObject(r2);
    }
    var v0 = getArrayU8FromWasm0(r0, r1).slice();
    __wbindgen_free(r0, r1 * 1);
    return v0;
  } finally {
    __wbindgen_add_to_stack_pointer(16);
  }
}
function encode_json_str_to_metadatum2(json, schema) {
  try {
    const retptr = __wbindgen_add_to_stack_pointer(-16);
    const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
    const len0 = WASM_VECTOR_LEN;
    encode_json_str_to_metadatum(retptr, ptr0, len0, schema);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var r2 = getInt32Memory0()[retptr / 4 + 2];
    if (r2) {
      throw takeObject(r1);
    }
    return TransactionMetadatum.__wrap(r0);
  } finally {
    __wbindgen_add_to_stack_pointer(16);
  }
}
function decode_metadatum_to_json_str2(metadatum, schema) {
  try {
    const retptr = __wbindgen_add_to_stack_pointer(-16);
    _assertClass(metadatum, TransactionMetadatum);
    decode_metadatum_to_json_str(retptr, metadatum.ptr, schema);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var r2 = getInt32Memory0()[retptr / 4 + 2];
    var r3 = getInt32Memory0()[retptr / 4 + 3];
    var ptr0 = r0;
    var len0 = r1;
    if (r3) {
      ptr0 = 0;
      len0 = 0;
      throw takeObject(r2);
    }
    return getStringFromWasm0(ptr0, len0);
  } finally {
    __wbindgen_add_to_stack_pointer(16);
    __wbindgen_free(ptr0, len0);
  }
}
function encode_json_str_to_plutus_datum2(json, schema) {
  try {
    const retptr = __wbindgen_add_to_stack_pointer(-16);
    const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
    const len0 = WASM_VECTOR_LEN;
    encode_json_str_to_plutus_datum(retptr, ptr0, len0, schema);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var r2 = getInt32Memory0()[retptr / 4 + 2];
    if (r2) {
      throw takeObject(r1);
    }
    return PlutusData.__wrap(r0);
  } finally {
    __wbindgen_add_to_stack_pointer(16);
  }
}
function decode_plutus_datum_to_json_str2(datum, schema) {
  try {
    const retptr = __wbindgen_add_to_stack_pointer(-16);
    _assertClass(datum, PlutusData);
    decode_plutus_datum_to_json_str(retptr, datum.ptr, schema);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var r2 = getInt32Memory0()[retptr / 4 + 2];
    var r3 = getInt32Memory0()[retptr / 4 + 3];
    var ptr0 = r0;
    var len0 = r1;
    if (r3) {
      ptr0 = 0;
      len0 = 0;
      throw takeObject(r2);
    }
    return getStringFromWasm0(ptr0, len0);
  } finally {
    __wbindgen_add_to_stack_pointer(16);
    __wbindgen_free(ptr0, len0);
  }
}
function min_fee2(tx, linear_fee) {
  try {
    const retptr = __wbindgen_add_to_stack_pointer(-16);
    _assertClass(tx, Transaction);
    _assertClass(linear_fee, LinearFee);
    min_fee(retptr, tx.ptr, linear_fee.ptr);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var r2 = getInt32Memory0()[retptr / 4 + 2];
    if (r2) {
      throw takeObject(r1);
    }
    return BigNum.__wrap(r0);
  } finally {
    __wbindgen_add_to_stack_pointer(16);
  }
}
function calculate_ex_units_ceil_cost2(ex_units, ex_unit_prices) {
  try {
    const retptr = __wbindgen_add_to_stack_pointer(-16);
    _assertClass(ex_units, ExUnits);
    _assertClass(ex_unit_prices, ExUnitPrices);
    calculate_ex_units_ceil_cost(retptr, ex_units.ptr, ex_unit_prices.ptr);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var r2 = getInt32Memory0()[retptr / 4 + 2];
    if (r2) {
      throw takeObject(r1);
    }
    return BigNum.__wrap(r0);
  } finally {
    __wbindgen_add_to_stack_pointer(16);
  }
}
function min_script_fee2(tx, ex_unit_prices) {
  try {
    const retptr = __wbindgen_add_to_stack_pointer(-16);
    _assertClass(tx, Transaction);
    _assertClass(ex_unit_prices, ExUnitPrices);
    min_script_fee(retptr, tx.ptr, ex_unit_prices.ptr);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var r2 = getInt32Memory0()[retptr / 4 + 2];
    if (r2) {
      throw takeObject(r1);
    }
    return BigNum.__wrap(r0);
  } finally {
    __wbindgen_add_to_stack_pointer(16);
  }
}
function encrypt_with_password2(password, salt, nonce, data) {
  try {
    const retptr = __wbindgen_add_to_stack_pointer(-16);
    const ptr0 = passStringToWasm0(password, __wbindgen_malloc, __wbindgen_realloc);
    const len0 = WASM_VECTOR_LEN;
    const ptr1 = passStringToWasm0(salt, __wbindgen_malloc, __wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    const ptr2 = passStringToWasm0(nonce, __wbindgen_malloc, __wbindgen_realloc);
    const len2 = WASM_VECTOR_LEN;
    const ptr3 = passStringToWasm0(data, __wbindgen_malloc, __wbindgen_realloc);
    const len3 = WASM_VECTOR_LEN;
    encrypt_with_password(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var r2 = getInt32Memory0()[retptr / 4 + 2];
    var r3 = getInt32Memory0()[retptr / 4 + 3];
    var ptr4 = r0;
    var len4 = r1;
    if (r3) {
      ptr4 = 0;
      len4 = 0;
      throw takeObject(r2);
    }
    return getStringFromWasm0(ptr4, len4);
  } finally {
    __wbindgen_add_to_stack_pointer(16);
    __wbindgen_free(ptr4, len4);
  }
}
function decrypt_with_password2(password, data) {
  try {
    const retptr = __wbindgen_add_to_stack_pointer(-16);
    const ptr0 = passStringToWasm0(password, __wbindgen_malloc, __wbindgen_realloc);
    const len0 = WASM_VECTOR_LEN;
    const ptr1 = passStringToWasm0(data, __wbindgen_malloc, __wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    decrypt_with_password(retptr, ptr0, len0, ptr1, len1);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var r2 = getInt32Memory0()[retptr / 4 + 2];
    var r3 = getInt32Memory0()[retptr / 4 + 3];
    var ptr2 = r0;
    var len2 = r1;
    if (r3) {
      ptr2 = 0;
      len2 = 0;
      throw takeObject(r2);
    }
    return getStringFromWasm0(ptr2, len2);
  } finally {
    __wbindgen_add_to_stack_pointer(16);
    __wbindgen_free(ptr2, len2);
  }
}
function create_send_all2(address, utxos, config) {
  try {
    const retptr = __wbindgen_add_to_stack_pointer(-16);
    _assertClass(address, Address);
    _assertClass(utxos, TransactionUnspentOutputs);
    _assertClass(config, TransactionBuilderConfig);
    create_send_all(retptr, address.ptr, utxos.ptr, config.ptr);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var r2 = getInt32Memory0()[retptr / 4 + 2];
    if (r2) {
      throw takeObject(r1);
    }
    return TransactionBatchList.__wrap(r0);
  } finally {
    __wbindgen_add_to_stack_pointer(16);
  }
}
function make_daedalus_bootstrap_witness2(tx_body_hash, addr, key) {
  _assertClass(tx_body_hash, TransactionHash);
  _assertClass(addr, ByronAddress);
  _assertClass(key, LegacyDaedalusPrivateKey);
  const ret = make_daedalus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);
  return BootstrapWitness.__wrap(ret);
}
function make_icarus_bootstrap_witness2(tx_body_hash, addr, key) {
  _assertClass(tx_body_hash, TransactionHash);
  _assertClass(addr, ByronAddress);
  _assertClass(key, Bip32PrivateKey);
  const ret = make_icarus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);
  return BootstrapWitness.__wrap(ret);
}
function make_vkey_witness2(tx_body_hash, sk) {
  _assertClass(tx_body_hash, TransactionHash);
  _assertClass(sk, PrivateKey);
  const ret = make_vkey_witness(tx_body_hash.ptr, sk.ptr);
  return Vkeywitness.__wrap(ret);
}
function hash_auxiliary_data2(auxiliary_data) {
  _assertClass(auxiliary_data, AuxiliaryData);
  const ret = hash_auxiliary_data(auxiliary_data.ptr);
  return AuxiliaryDataHash.__wrap(ret);
}
function hash_transaction2(tx_body) {
  _assertClass(tx_body, TransactionBody);
  const ret = hash_transaction(tx_body.ptr);
  return TransactionHash.__wrap(ret);
}
function hash_plutus_data2(plutus_data) {
  _assertClass(plutus_data, PlutusData);
  const ret = hash_plutus_data(plutus_data.ptr);
  return DataHash.__wrap(ret);
}
function hash_script_data2(redeemers, cost_models, datums) {
  _assertClass(redeemers, Redeemers);
  _assertClass(cost_models, Costmdls);
  let ptr0 = 0;
  if (!isLikeNone(datums)) {
    _assertClass(datums, PlutusList);
    ptr0 = datums.ptr;
    datums.ptr = 0;
  }
  const ret = hash_script_data(redeemers.ptr, cost_models.ptr, ptr0);
  return ScriptDataHash.__wrap(ret);
}
function get_implicit_input2(txbody, pool_deposit, key_deposit) {
  try {
    const retptr = __wbindgen_add_to_stack_pointer(-16);
    _assertClass(txbody, TransactionBody);
    _assertClass(pool_deposit, BigNum);
    _assertClass(key_deposit, BigNum);
    get_implicit_input(retptr, txbody.ptr, pool_deposit.ptr, key_deposit.ptr);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var r2 = getInt32Memory0()[retptr / 4 + 2];
    if (r2) {
      throw takeObject(r1);
    }
    return Value.__wrap(r0);
  } finally {
    __wbindgen_add_to_stack_pointer(16);
  }
}
function get_deposit2(txbody, pool_deposit, key_deposit) {
  try {
    const retptr = __wbindgen_add_to_stack_pointer(-16);
    _assertClass(txbody, TransactionBody);
    _assertClass(pool_deposit, BigNum);
    _assertClass(key_deposit, BigNum);
    get_deposit(retptr, txbody.ptr, pool_deposit.ptr, key_deposit.ptr);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var r2 = getInt32Memory0()[retptr / 4 + 2];
    if (r2) {
      throw takeObject(r1);
    }
    return BigNum.__wrap(r0);
  } finally {
    __wbindgen_add_to_stack_pointer(16);
  }
}
function min_ada_for_output2(output, data_cost) {
  try {
    const retptr = __wbindgen_add_to_stack_pointer(-16);
    _assertClass(output, TransactionOutput);
    _assertClass(data_cost, DataCost);
    min_ada_for_output(retptr, output.ptr, data_cost.ptr);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var r2 = getInt32Memory0()[retptr / 4 + 2];
    if (r2) {
      throw takeObject(r1);
    }
    return BigNum.__wrap(r0);
  } finally {
    __wbindgen_add_to_stack_pointer(16);
  }
}
function min_ada_required2(assets, has_data_hash, coins_per_utxo_word) {
  try {
    const retptr = __wbindgen_add_to_stack_pointer(-16);
    _assertClass(assets, Value);
    _assertClass(coins_per_utxo_word, BigNum);
    min_ada_required(retptr, assets.ptr, has_data_hash, coins_per_utxo_word.ptr);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var r2 = getInt32Memory0()[retptr / 4 + 2];
    if (r2) {
      throw takeObject(r1);
    }
    return BigNum.__wrap(r0);
  } finally {
    __wbindgen_add_to_stack_pointer(16);
  }
}
function encode_json_str_to_native_script2(json, self_xpub, schema) {
  try {
    const retptr = __wbindgen_add_to_stack_pointer(-16);
    const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
    const len0 = WASM_VECTOR_LEN;
    const ptr1 = passStringToWasm0(self_xpub, __wbindgen_malloc, __wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    encode_json_str_to_native_script(retptr, ptr0, len0, ptr1, len1, schema);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var r2 = getInt32Memory0()[retptr / 4 + 2];
    if (r2) {
      throw takeObject(r1);
    }
    return NativeScript.__wrap(r0);
  } finally {
    __wbindgen_add_to_stack_pointer(16);
  }
}
function handleError(f, args) {
  try {
    return f.apply(this, args);
  } catch (e) {
    __wbindgen_exn_store(addHeapObject(e));
  }
}
var CertificateKind = Object.freeze({ StakeRegistration: 0, "0": "StakeRegistration", StakeDeregistration: 1, "1": "StakeDeregistration", StakeDelegation: 2, "2": "StakeDelegation", PoolRegistration: 3, "3": "PoolRegistration", PoolRetirement: 4, "4": "PoolRetirement", GenesisKeyDelegation: 5, "5": "GenesisKeyDelegation", MoveInstantaneousRewardsCert: 6, "6": "MoveInstantaneousRewardsCert" });
var MIRPot = Object.freeze({ Reserves: 0, "0": "Reserves", Treasury: 1, "1": "Treasury" });
var MIRKind = Object.freeze({ ToOtherPot: 0, "0": "ToOtherPot", ToStakeCredentials: 1, "1": "ToStakeCredentials" });
var RelayKind = Object.freeze({ SingleHostAddr: 0, "0": "SingleHostAddr", SingleHostName: 1, "1": "SingleHostName", MultiHostName: 2, "2": "MultiHostName" });
var NativeScriptKind = Object.freeze({ ScriptPubkey: 0, "0": "ScriptPubkey", ScriptAll: 1, "1": "ScriptAll", ScriptAny: 2, "2": "ScriptAny", ScriptNOfK: 3, "3": "ScriptNOfK", TimelockStart: 4, "4": "TimelockStart", TimelockExpiry: 5, "5": "TimelockExpiry" });
var ScriptHashNamespace = Object.freeze({ NativeScript: 0, "0": "NativeScript", PlutusScript: 1, "1": "PlutusScript", PlutusScriptV2: 2, "2": "PlutusScriptV2" });
var NetworkIdKind = Object.freeze({ Testnet: 0, "0": "Testnet", Mainnet: 1, "1": "Mainnet" });
var TransactionMetadatumKind = Object.freeze({ MetadataMap: 0, "0": "MetadataMap", MetadataList: 1, "1": "MetadataList", Int: 2, "2": "Int", Bytes: 3, "3": "Bytes", Text: 4, "4": "Text" });
var MetadataJsonSchema = Object.freeze({ NoConversions: 0, "0": "NoConversions", BasicConversions: 1, "1": "BasicConversions", DetailedSchema: 2, "2": "DetailedSchema" });
var LanguageKind = Object.freeze({ PlutusV1: 0, "0": "PlutusV1", PlutusV2: 1, "1": "PlutusV2" });
var PlutusDataKind = Object.freeze({ ConstrPlutusData: 0, "0": "ConstrPlutusData", Map: 1, "1": "Map", List: 2, "2": "List", Integer: 3, "3": "Integer", Bytes: 4, "4": "Bytes" });
var RedeemerTagKind = Object.freeze({ Spend: 0, "0": "Spend", Mint: 1, "1": "Mint", Cert: 2, "2": "Cert", Reward: 3, "3": "Reward" });
var PlutusDatumSchema = Object.freeze({
  /**
  * ScriptDataJsonNoSchema in cardano-node.
  *
  * This is the format used by --script-data-value in cardano-cli
  * This tries to accept most JSON but does not support the full spectrum of Plutus datums.
  * From JSON:
  * * null/true/false/floats NOT supported
  * * strings starting with 0x are treated as hex bytes. All other strings are encoded as their utf8 bytes.
  * To JSON:
  * * ConstrPlutusData not supported in ANY FORM (neither keys nor values)
  * * Lists not supported in keys
  * * Maps not supported in keys
  */
  BasicConversions: 0,
  "0": "BasicConversions",
  /**
  * ScriptDataJsonDetailedSchema in cardano-node.
  *
  * This is the format used by --script-data-file in cardano-cli
  * This covers almost all (only minor exceptions) Plutus datums, but the JSON must conform to a strict schema.
  * The schema specifies that ALL keys and ALL values must be contained in a JSON map with 2 cases:
  * 1. For ConstrPlutusData there must be two fields "constructor" contianing a number and "fields" containing its fields
  *    e.g. { "constructor": 2, "fields": [{"int": 2}, {"list": [{"bytes": "CAFEF00D"}]}]}
  * 2. For all other cases there must be only one field named "int", "bytes", "list" or "map"
  *    Integer's value is a JSON number e.g. {"int": 100}
  *    Bytes' value is a hex string representing the bytes WITHOUT any prefix e.g. {"bytes": "CAFEF00D"}
  *    Lists' value is a JSON list of its elements encoded via the same schema e.g. {"list": [{"bytes": "CAFEF00D"}]}
  *    Maps' value is a JSON list of objects, one for each key-value pair in the map, with keys "k" and "v"
  *          respectively with their values being the plutus datum encoded via this same schema
  *          e.g. {"map": [
  *              {"k": {"int": 2}, "v": {"int": 5}},
  *              {"k": {"map": [{"k": {"list": [{"int": 1}]}, "v": {"bytes": "FF03"}}]}, "v": {"list": []}}
  *          ]}
  * From JSON:
  * * null/true/false/floats NOT supported
  * * the JSON must conform to a very specific schema
  * To JSON:
  * * all Plutus datums should be fully supported outside of the integer range limitations outlined above.
  */
  DetailedSchema: 1,
  "1": "DetailedSchema"
});
var CoinSelectionStrategyCIP2 = Object.freeze({
  /**
  * Performs CIP2's Largest First ada-only selection. Will error if outputs contain non-ADA assets.
  */
  LargestFirst: 0,
  "0": "LargestFirst",
  /**
  * Performs CIP2's Random Improve ada-only selection. Will error if outputs contain non-ADA assets.
  */
  RandomImprove: 1,
  "1": "RandomImprove",
  /**
  * Same as LargestFirst, but before adding ADA, will insert by largest-first for each asset type.
  */
  LargestFirstMultiAsset: 2,
  "2": "LargestFirstMultiAsset",
  /**
  * Same as RandomImprove, but before adding ADA, will insert by random-improve for each asset type.
  */
  RandomImproveMultiAsset: 3,
  "3": "RandomImproveMultiAsset"
});
var StakeCredKind = Object.freeze({ Key: 0, "0": "Key", Script: 1, "1": "Script" });
var ScriptSchema = Object.freeze({ Wallet: 0, "0": "Wallet", Node: 1, "1": "Node" });
var Address = class {
  static __wrap(ptr) {
    const obj = Object.create(Address.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_address_free(ptr);
  }
  /**
  * @param {Uint8Array} data
  * @returns {Address}
  */
  static from_bytes(data) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(data, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      address_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Address.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      address_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      address_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Address}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      address_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Address.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      address_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Address}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      address_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Address.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      address_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string | undefined} prefix
  * @returns {string}
  */
  to_bech32(prefix) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      var ptr0 = isLikeNone(prefix) ? 0 : passStringToWasm0(prefix, __wbindgen_malloc, __wbindgen_realloc);
      var len0 = WASM_VECTOR_LEN;
      address_to_bech32(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr1 = r0;
      var len1 = r1;
      if (r3) {
        ptr1 = 0;
        len1 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr1, len1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr1, len1);
    }
  }
  /**
  * @param {string} bech_str
  * @returns {Address}
  */
  static from_bech32(bech_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      address_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Address.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {number}
  */
  network_id() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      address_network_id(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return r0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var AssetName = class {
  static __wrap(ptr) {
    const obj = Object.create(AssetName.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_assetname_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      assetname_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {AssetName}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      assetname_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return AssetName.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      assetname_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {AssetName}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      assetname_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return AssetName.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      assetname_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      assetname_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {AssetName}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      assetname_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return AssetName.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} name
  * @returns {AssetName}
  */
  static new(name) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(name, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      assetname_new(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return AssetName.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  name() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      assetname_name(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var AssetNames = class {
  static __wrap(ptr) {
    const obj = Object.create(AssetNames.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_assetnames_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      assetnames_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {AssetNames}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      assetnames_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return AssetNames.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      assetnames_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {AssetNames}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      assetnames_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return AssetNames.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      assetnames_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      assetnames_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {AssetNames}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      assetnames_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return AssetNames.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {AssetNames}
  */
  static new() {
    const ret = assetnames_new();
    return AssetNames.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = assetnames_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {AssetName}
  */
  get(index) {
    const ret = assetnames_get(this.ptr, index);
    return AssetName.__wrap(ret);
  }
  /**
  * @param {AssetName} elem
  */
  add(elem) {
    _assertClass(elem, AssetName);
    assetnames_add(this.ptr, elem.ptr);
  }
};
var Assets = class {
  static __wrap(ptr) {
    const obj = Object.create(Assets.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_assets_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      assets_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Assets}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      assets_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Assets.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      assets_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Assets}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      assets_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Assets.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      assets_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      assets_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Assets}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      assets_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Assets.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Assets}
  */
  static new() {
    const ret = assets_new();
    return Assets.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = assets_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {AssetName} key
  * @param {BigNum} value
  * @returns {BigNum | undefined}
  */
  insert(key, value) {
    _assertClass(key, AssetName);
    _assertClass(value, BigNum);
    const ret = assets_insert(this.ptr, key.ptr, value.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * @param {AssetName} key
  * @returns {BigNum | undefined}
  */
  get(key) {
    _assertClass(key, AssetName);
    const ret = assets_get(this.ptr, key.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * @returns {AssetNames}
  */
  keys() {
    const ret = assets_keys(this.ptr);
    return AssetNames.__wrap(ret);
  }
};
var AuxiliaryData = class {
  static __wrap(ptr) {
    const obj = Object.create(AuxiliaryData.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_auxiliarydata_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      auxiliarydata_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {AuxiliaryData}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      auxiliarydata_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return AuxiliaryData.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      auxiliarydata_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {AuxiliaryData}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      auxiliarydata_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return AuxiliaryData.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      auxiliarydata_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      auxiliarydata_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {AuxiliaryData}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      auxiliarydata_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return AuxiliaryData.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {AuxiliaryData}
  */
  static new() {
    const ret = auxiliarydata_new();
    return AuxiliaryData.__wrap(ret);
  }
  /**
  * @returns {GeneralTransactionMetadata | undefined}
  */
  metadata() {
    const ret = auxiliarydata_metadata(this.ptr);
    return ret === 0 ? void 0 : GeneralTransactionMetadata.__wrap(ret);
  }
  /**
  * @param {GeneralTransactionMetadata} metadata
  */
  set_metadata(metadata) {
    _assertClass(metadata, GeneralTransactionMetadata);
    auxiliarydata_set_metadata(this.ptr, metadata.ptr);
  }
  /**
  * @returns {NativeScripts | undefined}
  */
  native_scripts() {
    const ret = auxiliarydata_native_scripts(this.ptr);
    return ret === 0 ? void 0 : NativeScripts.__wrap(ret);
  }
  /**
  * @param {NativeScripts} native_scripts
  */
  set_native_scripts(native_scripts) {
    _assertClass(native_scripts, NativeScripts);
    auxiliarydata_set_native_scripts(this.ptr, native_scripts.ptr);
  }
  /**
  * @returns {PlutusScripts | undefined}
  */
  plutus_scripts() {
    const ret = auxiliarydata_plutus_scripts(this.ptr);
    return ret === 0 ? void 0 : PlutusScripts.__wrap(ret);
  }
  /**
  * @param {PlutusScripts} plutus_scripts
  */
  set_plutus_scripts(plutus_scripts) {
    _assertClass(plutus_scripts, PlutusScripts);
    auxiliarydata_set_plutus_scripts(this.ptr, plutus_scripts.ptr);
  }
  /**
  * @returns {boolean}
  */
  prefer_alonzo_format() {
    const ret = auxiliarydata_prefer_alonzo_format(this.ptr);
    return ret !== 0;
  }
  /**
  * @param {boolean} prefer
  */
  set_prefer_alonzo_format(prefer) {
    auxiliarydata_set_prefer_alonzo_format(this.ptr, prefer);
  }
};
var AuxiliaryDataHash = class {
  static __wrap(ptr) {
    const obj = Object.create(AuxiliaryDataHash.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_auxiliarydatahash_free(ptr);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {AuxiliaryDataHash}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      auxiliarydatahash_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return AuxiliaryDataHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      auxiliarydatahash_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} prefix
  * @returns {string}
  */
  to_bech32(prefix) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(prefix, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr1 = r0;
      var len1 = r1;
      if (r3) {
        ptr1 = 0;
        len1 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr1, len1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr1, len1);
    }
  }
  /**
  * @param {string} bech_str
  * @returns {AuxiliaryDataHash}
  */
  static from_bech32(bech_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      auxiliarydatahash_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return AuxiliaryDataHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      auxiliarydatahash_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex
  * @returns {AuxiliaryDataHash}
  */
  static from_hex(hex) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      auxiliarydatahash_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return AuxiliaryDataHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var AuxiliaryDataSet = class {
  static __wrap(ptr) {
    const obj = Object.create(AuxiliaryDataSet.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_auxiliarydataset_free(ptr);
  }
  /**
  * @returns {AuxiliaryDataSet}
  */
  static new() {
    const ret = auxiliarydataset_new();
    return AuxiliaryDataSet.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = auxiliarydataset_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} tx_index
  * @param {AuxiliaryData} data
  * @returns {AuxiliaryData | undefined}
  */
  insert(tx_index, data) {
    _assertClass(data, AuxiliaryData);
    const ret = auxiliarydataset_insert(this.ptr, tx_index, data.ptr);
    return ret === 0 ? void 0 : AuxiliaryData.__wrap(ret);
  }
  /**
  * @param {number} tx_index
  * @returns {AuxiliaryData | undefined}
  */
  get(tx_index) {
    const ret = auxiliarydataset_get(this.ptr, tx_index);
    return ret === 0 ? void 0 : AuxiliaryData.__wrap(ret);
  }
  /**
  * @returns {Uint32Array}
  */
  indices() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      auxiliarydataset_indices(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU32FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 4);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var BaseAddress = class {
  static __wrap(ptr) {
    const obj = Object.create(BaseAddress.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_baseaddress_free(ptr);
  }
  /**
  * @param {number} network
  * @param {StakeCredential} payment
  * @param {StakeCredential} stake
  * @returns {BaseAddress}
  */
  static new(network, payment, stake) {
    _assertClass(payment, StakeCredential);
    _assertClass(stake, StakeCredential);
    const ret = baseaddress_new(network, payment.ptr, stake.ptr);
    return BaseAddress.__wrap(ret);
  }
  /**
  * @returns {StakeCredential}
  */
  payment_cred() {
    const ret = baseaddress_payment_cred(this.ptr);
    return StakeCredential.__wrap(ret);
  }
  /**
  * @returns {StakeCredential}
  */
  stake_cred() {
    const ret = baseaddress_stake_cred(this.ptr);
    return StakeCredential.__wrap(ret);
  }
  /**
  * @returns {Address}
  */
  to_address() {
    const ret = baseaddress_to_address(this.ptr);
    return Address.__wrap(ret);
  }
  /**
  * @param {Address} addr
  * @returns {BaseAddress | undefined}
  */
  static from_address(addr) {
    _assertClass(addr, Address);
    const ret = baseaddress_from_address(addr.ptr);
    return ret === 0 ? void 0 : BaseAddress.__wrap(ret);
  }
};
var BigInt = class {
  static __wrap(ptr) {
    const obj = Object.create(BigInt.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_bigint_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bigint_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {BigInt}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      bigint_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BigInt.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bigint_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {BigInt}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      bigint_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BigInt.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bigint_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bigint_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {BigInt}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      bigint_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BigInt.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {boolean}
  */
  is_zero() {
    const ret = bigint_is_zero(this.ptr);
    return ret !== 0;
  }
  /**
  * @returns {BigNum | undefined}
  */
  as_u64() {
    const ret = bigint_as_u64(this.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * @returns {Int | undefined}
  */
  as_int() {
    const ret = bigint_as_int(this.ptr);
    return ret === 0 ? void 0 : Int.__wrap(ret);
  }
  /**
  * @param {string} text
  * @returns {BigInt}
  */
  static from_str(text) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(text, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      bigint_from_str(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BigInt.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_str() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bigint_to_str(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {BigInt} other
  * @returns {BigInt}
  */
  add(other) {
    _assertClass(other, BigInt);
    const ret = bigint_add(this.ptr, other.ptr);
    return BigInt.__wrap(ret);
  }
  /**
  * @param {BigInt} other
  * @returns {BigInt}
  */
  mul(other) {
    _assertClass(other, BigInt);
    const ret = bigint_mul(this.ptr, other.ptr);
    return BigInt.__wrap(ret);
  }
  /**
  * @returns {BigInt}
  */
  static one() {
    const ret = bigint_one();
    return BigInt.__wrap(ret);
  }
  /**
  * @returns {BigInt}
  */
  increment() {
    const ret = bigint_increment(this.ptr);
    return BigInt.__wrap(ret);
  }
  /**
  * @param {BigInt} other
  * @returns {BigInt}
  */
  div_ceil(other) {
    _assertClass(other, BigInt);
    const ret = bigint_div_ceil(this.ptr, other.ptr);
    return BigInt.__wrap(ret);
  }
};
var BigNum = class {
  static __wrap(ptr) {
    const obj = Object.create(BigNum.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_bignum_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bignum_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {BigNum}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      bignum_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BigNum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bignum_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {BigNum}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      bignum_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BigNum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bignum_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bignum_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {BigNum}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      bignum_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BigNum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} string
  * @returns {BigNum}
  */
  static from_str(string) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(string, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      bignum_from_str(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BigNum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_str() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bignum_to_str(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @returns {BigNum}
  */
  static zero() {
    const ret = bignum_zero();
    return BigNum.__wrap(ret);
  }
  /**
  * @returns {BigNum}
  */
  static one() {
    const ret = bignum_one();
    return BigNum.__wrap(ret);
  }
  /**
  * @returns {boolean}
  */
  is_zero() {
    const ret = bignum_is_zero(this.ptr);
    return ret !== 0;
  }
  /**
  * @param {BigNum} other
  * @returns {BigNum}
  */
  div_floor(other) {
    _assertClass(other, BigNum);
    const ret = bignum_div_floor(this.ptr, other.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * @param {BigNum} other
  * @returns {BigNum}
  */
  checked_mul(other) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(other, BigNum);
      bignum_checked_mul(retptr, this.ptr, other.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BigNum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {BigNum} other
  * @returns {BigNum}
  */
  checked_add(other) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(other, BigNum);
      bignum_checked_add(retptr, this.ptr, other.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BigNum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {BigNum} other
  * @returns {BigNum}
  */
  checked_sub(other) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(other, BigNum);
      bignum_checked_sub(retptr, this.ptr, other.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BigNum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * returns 0 if it would otherwise underflow
  * @param {BigNum} other
  * @returns {BigNum}
  */
  clamped_sub(other) {
    _assertClass(other, BigNum);
    const ret = bignum_clamped_sub(this.ptr, other.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * @param {BigNum} rhs_value
  * @returns {number}
  */
  compare(rhs_value) {
    _assertClass(rhs_value, BigNum);
    const ret = bignum_compare(this.ptr, rhs_value.ptr);
    return ret;
  }
  /**
  * @param {BigNum} rhs_value
  * @returns {boolean}
  */
  less_than(rhs_value) {
    _assertClass(rhs_value, BigNum);
    const ret = bignum_less_than(this.ptr, rhs_value.ptr);
    return ret !== 0;
  }
  /**
  * @returns {BigNum}
  */
  static max_value() {
    const ret = bignum_max_value();
    return BigNum.__wrap(ret);
  }
  /**
  * @param {BigNum} a
  * @param {BigNum} b
  * @returns {BigNum}
  */
  static max(a, b) {
    _assertClass(a, BigNum);
    _assertClass(b, BigNum);
    const ret = bignum_max(a.ptr, b.ptr);
    return BigNum.__wrap(ret);
  }
};
var Bip32PrivateKey = class {
  static __wrap(ptr) {
    const obj = Object.create(Bip32PrivateKey.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_bip32privatekey_free(ptr);
  }
  /**
  * derive this private key with the given index.
  *
  * # Security considerations
  *
  * * hard derivation index cannot be soft derived with the public key
  *
  * # Hard derivation vs Soft derivation
  *
  * If you pass an index below 0x80000000 then it is a soft derivation.
  * The advantage of soft derivation is that it is possible to derive the
  * public key too. I.e. derivation the private key with a soft derivation
  * index and then retrieving the associated public key is equivalent to
  * deriving the public key associated to the parent private key.
  *
  * Hard derivation index does not allow public key derivation.
  *
  * This is why deriving the private key should not fail while deriving
  * the public key may fail (if the derivation index is invalid).
  * @param {number} index
  * @returns {Bip32PrivateKey}
  */
  derive(index) {
    const ret = bip32privatekey_derive(this.ptr, index);
    return Bip32PrivateKey.__wrap(ret);
  }
  /**
  * 128-byte xprv a key format in Cardano that some software still uses or requires
  * the traditional 96-byte xprv is simply encoded as
  * prv | chaincode
  * however, because some software may not know how to compute a public key from a private key,
  * the 128-byte inlines the public key in the following format
  * prv | pub | chaincode
  * so be careful if you see the term "xprv" as it could refer to either one
  * our library does not require the pub (instead we compute the pub key when needed)
  * @param {Uint8Array} bytes
  * @returns {Bip32PrivateKey}
  */
  static from_128_xprv(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      bip32privatekey_from_128_xprv(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Bip32PrivateKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * see from_128_xprv
  * @returns {Uint8Array}
  */
  to_128_xprv() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bip32privatekey_to_128_xprv(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Bip32PrivateKey}
  */
  static generate_ed25519_bip32() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bip32privatekey_generate_ed25519_bip32(retptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Bip32PrivateKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {PrivateKey}
  */
  to_raw_key() {
    const ret = bip32privatekey_to_raw_key(this.ptr);
    return PrivateKey.__wrap(ret);
  }
  /**
  * @returns {Bip32PublicKey}
  */
  to_public() {
    const ret = bip32privatekey_to_public(this.ptr);
    return Bip32PublicKey.__wrap(ret);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Bip32PrivateKey}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      bip32privatekey_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Bip32PrivateKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  as_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bip32privatekey_as_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} bech32_str
  * @returns {Bip32PrivateKey}
  */
  static from_bech32(bech32_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech32_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      bip32privatekey_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Bip32PrivateKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_bech32() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bip32privatekey_to_bech32(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {Uint8Array} entropy
  * @param {Uint8Array} password
  * @returns {Bip32PrivateKey}
  */
  static from_bip39_entropy(entropy, password) {
    const ptr0 = passArray8ToWasm0(entropy, __wbindgen_malloc);
    const len0 = WASM_VECTOR_LEN;
    const ptr1 = passArray8ToWasm0(password, __wbindgen_malloc);
    const len1 = WASM_VECTOR_LEN;
    const ret = bip32privatekey_from_bip39_entropy(ptr0, len0, ptr1, len1);
    return Bip32PrivateKey.__wrap(ret);
  }
  /**
  * @returns {Uint8Array}
  */
  chaincode() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bip32privatekey_chaincode(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bip32privatekey_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Bip32PrivateKey}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      bip32privatekey_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Bip32PrivateKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var Bip32PublicKey = class {
  static __wrap(ptr) {
    const obj = Object.create(Bip32PublicKey.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_bip32publickey_free(ptr);
  }
  /**
  * derive this public key with the given index.
  *
  * # Errors
  *
  * If the index is not a soft derivation index (< 0x80000000) then
  * calling this method will fail.
  *
  * # Security considerations
  *
  * * hard derivation index cannot be soft derived with the public key
  *
  * # Hard derivation vs Soft derivation
  *
  * If you pass an index below 0x80000000 then it is a soft derivation.
  * The advantage of soft derivation is that it is possible to derive the
  * public key too. I.e. derivation the private key with a soft derivation
  * index and then retrieving the associated public key is equivalent to
  * deriving the public key associated to the parent private key.
  *
  * Hard derivation index does not allow public key derivation.
  *
  * This is why deriving the private key should not fail while deriving
  * the public key may fail (if the derivation index is invalid).
  * @param {number} index
  * @returns {Bip32PublicKey}
  */
  derive(index) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bip32publickey_derive(retptr, this.ptr, index);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Bip32PublicKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {PublicKey}
  */
  to_raw_key() {
    const ret = bip32publickey_to_raw_key(this.ptr);
    return PublicKey.__wrap(ret);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Bip32PublicKey}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      bip32publickey_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Bip32PublicKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  as_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bip32publickey_as_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} bech32_str
  * @returns {Bip32PublicKey}
  */
  static from_bech32(bech32_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech32_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      bip32publickey_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Bip32PublicKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_bech32() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bip32publickey_to_bech32(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  chaincode() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bip32publickey_chaincode(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bip32publickey_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Bip32PublicKey}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      bip32publickey_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Bip32PublicKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var Block = class {
  static __wrap(ptr) {
    const obj = Object.create(Block.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_block_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      block_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Block}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      block_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Block.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      block_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Block}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      block_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Block.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      block_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      block_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Block}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      block_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Block.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Header}
  */
  header() {
    const ret = block_header(this.ptr);
    return Header.__wrap(ret);
  }
  /**
  * @returns {TransactionBodies}
  */
  transaction_bodies() {
    const ret = block_transaction_bodies(this.ptr);
    return TransactionBodies.__wrap(ret);
  }
  /**
  * @returns {TransactionWitnessSets}
  */
  transaction_witness_sets() {
    const ret = block_transaction_witness_sets(this.ptr);
    return TransactionWitnessSets.__wrap(ret);
  }
  /**
  * @returns {AuxiliaryDataSet}
  */
  auxiliary_data_set() {
    const ret = block_auxiliary_data_set(this.ptr);
    return AuxiliaryDataSet.__wrap(ret);
  }
  /**
  * @returns {Uint32Array}
  */
  invalid_transactions() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      block_invalid_transactions(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU32FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 4);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Header} header
  * @param {TransactionBodies} transaction_bodies
  * @param {TransactionWitnessSets} transaction_witness_sets
  * @param {AuxiliaryDataSet} auxiliary_data_set
  * @param {Uint32Array} invalid_transactions
  * @returns {Block}
  */
  static new(header, transaction_bodies, transaction_witness_sets, auxiliary_data_set, invalid_transactions) {
    _assertClass(header, Header);
    _assertClass(transaction_bodies, TransactionBodies);
    _assertClass(transaction_witness_sets, TransactionWitnessSets);
    _assertClass(auxiliary_data_set, AuxiliaryDataSet);
    const ptr0 = passArray32ToWasm0(invalid_transactions, __wbindgen_malloc);
    const len0 = WASM_VECTOR_LEN;
    const ret = block_new(header.ptr, transaction_bodies.ptr, transaction_witness_sets.ptr, auxiliary_data_set.ptr, ptr0, len0);
    return Block.__wrap(ret);
  }
};
var BlockHash = class {
  static __wrap(ptr) {
    const obj = Object.create(BlockHash.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_blockhash_free(ptr);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {BlockHash}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      blockhash_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BlockHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      blockhash_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} prefix
  * @returns {string}
  */
  to_bech32(prefix) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(prefix, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      blockhash_to_bech32(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr1 = r0;
      var len1 = r1;
      if (r3) {
        ptr1 = 0;
        len1 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr1, len1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr1, len1);
    }
  }
  /**
  * @param {string} bech_str
  * @returns {BlockHash}
  */
  static from_bech32(bech_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      blockhash_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BlockHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      blockhash_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex
  * @returns {BlockHash}
  */
  static from_hex(hex) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      blockhash_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BlockHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var BootstrapWitness = class {
  static __wrap(ptr) {
    const obj = Object.create(BootstrapWitness.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_bootstrapwitness_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bootstrapwitness_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {BootstrapWitness}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      bootstrapwitness_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BootstrapWitness.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bootstrapwitness_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {BootstrapWitness}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      bootstrapwitness_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BootstrapWitness.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bootstrapwitness_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bootstrapwitness_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {BootstrapWitness}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      bootstrapwitness_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BootstrapWitness.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Vkey}
  */
  vkey() {
    const ret = bootstrapwitness_vkey(this.ptr);
    return Vkey.__wrap(ret);
  }
  /**
  * @returns {Ed25519Signature}
  */
  signature() {
    const ret = bootstrapwitness_signature(this.ptr);
    return Ed25519Signature.__wrap(ret);
  }
  /**
  * @returns {Uint8Array}
  */
  chain_code() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bootstrapwitness_chain_code(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  attributes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      bootstrapwitness_attributes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Vkey} vkey
  * @param {Ed25519Signature} signature
  * @param {Uint8Array} chain_code
  * @param {Uint8Array} attributes
  * @returns {BootstrapWitness}
  */
  static new(vkey, signature, chain_code, attributes) {
    _assertClass(vkey, Vkey);
    _assertClass(signature, Ed25519Signature);
    const ptr0 = passArray8ToWasm0(chain_code, __wbindgen_malloc);
    const len0 = WASM_VECTOR_LEN;
    const ptr1 = passArray8ToWasm0(attributes, __wbindgen_malloc);
    const len1 = WASM_VECTOR_LEN;
    const ret = bootstrapwitness_new(vkey.ptr, signature.ptr, ptr0, len0, ptr1, len1);
    return BootstrapWitness.__wrap(ret);
  }
};
var BootstrapWitnesses = class {
  static __wrap(ptr) {
    const obj = Object.create(BootstrapWitnesses.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_bootstrapwitnesses_free(ptr);
  }
  /**
  * @returns {BootstrapWitnesses}
  */
  static new() {
    const ret = bootstrapwitnesses_new();
    return BootstrapWitnesses.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = bootstrapwitnesses_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {BootstrapWitness}
  */
  get(index) {
    const ret = bootstrapwitnesses_get(this.ptr, index);
    return BootstrapWitness.__wrap(ret);
  }
  /**
  * @param {BootstrapWitness} elem
  */
  add(elem) {
    _assertClass(elem, BootstrapWitness);
    bootstrapwitnesses_add(this.ptr, elem.ptr);
  }
};
var ByronAddress = class {
  static __wrap(ptr) {
    const obj = Object.create(ByronAddress.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_byronaddress_free(ptr);
  }
  /**
  * @returns {string}
  */
  to_base58() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      byronaddress_to_base58(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      byronaddress_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {ByronAddress}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      byronaddress_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ByronAddress.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * returns the byron protocol magic embedded in the address, or mainnet id if none is present
  * note: for bech32 addresses, you need to use network_id instead
  * @returns {number}
  */
  byron_protocol_magic() {
    const ret = byronaddress_byron_protocol_magic(this.ptr);
    return ret >>> 0;
  }
  /**
  * @returns {Uint8Array}
  */
  attributes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      byronaddress_attributes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {number}
  */
  network_id() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      byronaddress_network_id(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return r0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} s
  * @returns {ByronAddress}
  */
  static from_base58(s) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(s, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      byronaddress_from_base58(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ByronAddress.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Bip32PublicKey} key
  * @param {number} protocol_magic
  * @returns {ByronAddress}
  */
  static icarus_from_key(key, protocol_magic) {
    _assertClass(key, Bip32PublicKey);
    const ret = byronaddress_icarus_from_key(key.ptr, protocol_magic);
    return ByronAddress.__wrap(ret);
  }
  /**
  * @param {string} s
  * @returns {boolean}
  */
  static is_valid(s) {
    const ptr0 = passStringToWasm0(s, __wbindgen_malloc, __wbindgen_realloc);
    const len0 = WASM_VECTOR_LEN;
    const ret = byronaddress_is_valid(ptr0, len0);
    return ret !== 0;
  }
  /**
  * @returns {Address}
  */
  to_address() {
    const ret = byronaddress_to_address(this.ptr);
    return Address.__wrap(ret);
  }
  /**
  * @param {Address} addr
  * @returns {ByronAddress | undefined}
  */
  static from_address(addr) {
    _assertClass(addr, Address);
    const ret = byronaddress_from_address(addr.ptr);
    return ret === 0 ? void 0 : ByronAddress.__wrap(ret);
  }
};
var Certificate = class {
  static __wrap(ptr) {
    const obj = Object.create(Certificate.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_certificate_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      certificate_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Certificate}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      certificate_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Certificate.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      certificate_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Certificate}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      certificate_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Certificate.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      certificate_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      certificate_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Certificate}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      certificate_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Certificate.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {StakeRegistration} stake_registration
  * @returns {Certificate}
  */
  static new_stake_registration(stake_registration) {
    _assertClass(stake_registration, StakeRegistration);
    const ret = certificate_new_stake_registration(stake_registration.ptr);
    return Certificate.__wrap(ret);
  }
  /**
  * @param {StakeDeregistration} stake_deregistration
  * @returns {Certificate}
  */
  static new_stake_deregistration(stake_deregistration) {
    _assertClass(stake_deregistration, StakeDeregistration);
    const ret = certificate_new_stake_deregistration(stake_deregistration.ptr);
    return Certificate.__wrap(ret);
  }
  /**
  * @param {StakeDelegation} stake_delegation
  * @returns {Certificate}
  */
  static new_stake_delegation(stake_delegation) {
    _assertClass(stake_delegation, StakeDelegation);
    const ret = certificate_new_stake_delegation(stake_delegation.ptr);
    return Certificate.__wrap(ret);
  }
  /**
  * @param {PoolRegistration} pool_registration
  * @returns {Certificate}
  */
  static new_pool_registration(pool_registration) {
    _assertClass(pool_registration, PoolRegistration);
    const ret = certificate_new_pool_registration(pool_registration.ptr);
    return Certificate.__wrap(ret);
  }
  /**
  * @param {PoolRetirement} pool_retirement
  * @returns {Certificate}
  */
  static new_pool_retirement(pool_retirement) {
    _assertClass(pool_retirement, PoolRetirement);
    const ret = certificate_new_pool_retirement(pool_retirement.ptr);
    return Certificate.__wrap(ret);
  }
  /**
  * @param {GenesisKeyDelegation} genesis_key_delegation
  * @returns {Certificate}
  */
  static new_genesis_key_delegation(genesis_key_delegation) {
    _assertClass(genesis_key_delegation, GenesisKeyDelegation);
    const ret = certificate_new_genesis_key_delegation(genesis_key_delegation.ptr);
    return Certificate.__wrap(ret);
  }
  /**
  * @param {MoveInstantaneousRewardsCert} move_instantaneous_rewards_cert
  * @returns {Certificate}
  */
  static new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert) {
    _assertClass(move_instantaneous_rewards_cert, MoveInstantaneousRewardsCert);
    const ret = certificate_new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert.ptr);
    return Certificate.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  kind() {
    const ret = certificate_kind(this.ptr);
    return ret >>> 0;
  }
  /**
  * @returns {StakeRegistration | undefined}
  */
  as_stake_registration() {
    const ret = certificate_as_stake_registration(this.ptr);
    return ret === 0 ? void 0 : StakeRegistration.__wrap(ret);
  }
  /**
  * @returns {StakeDeregistration | undefined}
  */
  as_stake_deregistration() {
    const ret = certificate_as_stake_deregistration(this.ptr);
    return ret === 0 ? void 0 : StakeDeregistration.__wrap(ret);
  }
  /**
  * @returns {StakeDelegation | undefined}
  */
  as_stake_delegation() {
    const ret = certificate_as_stake_delegation(this.ptr);
    return ret === 0 ? void 0 : StakeDelegation.__wrap(ret);
  }
  /**
  * @returns {PoolRegistration | undefined}
  */
  as_pool_registration() {
    const ret = certificate_as_pool_registration(this.ptr);
    return ret === 0 ? void 0 : PoolRegistration.__wrap(ret);
  }
  /**
  * @returns {PoolRetirement | undefined}
  */
  as_pool_retirement() {
    const ret = certificate_as_pool_retirement(this.ptr);
    return ret === 0 ? void 0 : PoolRetirement.__wrap(ret);
  }
  /**
  * @returns {GenesisKeyDelegation | undefined}
  */
  as_genesis_key_delegation() {
    const ret = certificate_as_genesis_key_delegation(this.ptr);
    return ret === 0 ? void 0 : GenesisKeyDelegation.__wrap(ret);
  }
  /**
  * @returns {MoveInstantaneousRewardsCert | undefined}
  */
  as_move_instantaneous_rewards_cert() {
    const ret = certificate_as_move_instantaneous_rewards_cert(this.ptr);
    return ret === 0 ? void 0 : MoveInstantaneousRewardsCert.__wrap(ret);
  }
};
var Certificates = class {
  static __wrap(ptr) {
    const obj = Object.create(Certificates.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_certificates_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      certificates_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Certificates}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      certificates_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Certificates.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      certificates_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Certificates}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      certificates_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Certificates.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      certificates_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      certificates_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Certificates}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      certificates_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Certificates.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Certificates}
  */
  static new() {
    const ret = certificates_new();
    return Certificates.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = certificates_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {Certificate}
  */
  get(index) {
    const ret = certificates_get(this.ptr, index);
    return Certificate.__wrap(ret);
  }
  /**
  * @param {Certificate} elem
  */
  add(elem) {
    _assertClass(elem, Certificate);
    certificates_add(this.ptr, elem.ptr);
  }
};
var ConstrPlutusData = class {
  static __wrap(ptr) {
    const obj = Object.create(ConstrPlutusData.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_constrplutusdata_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      constrplutusdata_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {ConstrPlutusData}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      constrplutusdata_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ConstrPlutusData.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      constrplutusdata_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {ConstrPlutusData}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      constrplutusdata_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ConstrPlutusData.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {BigNum}
  */
  alternative() {
    const ret = constrplutusdata_alternative(this.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * @returns {PlutusList}
  */
  data() {
    const ret = constrplutusdata_data(this.ptr);
    return PlutusList.__wrap(ret);
  }
  /**
  * @param {BigNum} alternative
  * @param {PlutusList} data
  * @returns {ConstrPlutusData}
  */
  static new(alternative, data) {
    _assertClass(alternative, BigNum);
    _assertClass(data, PlutusList);
    const ret = constrplutusdata_new(alternative.ptr, data.ptr);
    return ConstrPlutusData.__wrap(ret);
  }
};
var CostModel = class {
  static __wrap(ptr) {
    const obj = Object.create(CostModel.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_costmodel_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      costmodel_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {CostModel}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      costmodel_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return CostModel.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      costmodel_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {CostModel}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      costmodel_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return CostModel.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      costmodel_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      costmodel_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {CostModel}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      costmodel_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return CostModel.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * Creates a new CostModels instance of an unrestricted length
  * @returns {CostModel}
  */
  static new() {
    const ret = costmodel_new();
    return CostModel.__wrap(ret);
  }
  /**
  * Sets the cost at the specified index to the specified value.
  * In case the operation index is larger than the previous largest used index,
  * it will fill any inbetween indexes with zeroes
  * @param {number} operation
  * @param {Int} cost
  * @returns {Int}
  */
  set(operation, cost) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(cost, Int);
      costmodel_set(retptr, this.ptr, operation, cost.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Int.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {number} operation
  * @returns {Int}
  */
  get(operation) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      costmodel_get(retptr, this.ptr, operation);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Int.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = costmodel_len(this.ptr);
    return ret >>> 0;
  }
};
var Costmdls = class {
  static __wrap(ptr) {
    const obj = Object.create(Costmdls.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_costmdls_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      costmdls_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Costmdls}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      costmdls_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Costmdls.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      costmdls_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Costmdls}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      costmdls_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Costmdls.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      costmdls_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      costmdls_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Costmdls}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      costmdls_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Costmdls.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Costmdls}
  */
  static new() {
    const ret = costmdls_new();
    return Costmdls.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = costmdls_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {Language} key
  * @param {CostModel} value
  * @returns {CostModel | undefined}
  */
  insert(key, value) {
    _assertClass(key, Language);
    _assertClass(value, CostModel);
    const ret = costmdls_insert(this.ptr, key.ptr, value.ptr);
    return ret === 0 ? void 0 : CostModel.__wrap(ret);
  }
  /**
  * @param {Language} key
  * @returns {CostModel | undefined}
  */
  get(key) {
    _assertClass(key, Language);
    const ret = costmdls_get(this.ptr, key.ptr);
    return ret === 0 ? void 0 : CostModel.__wrap(ret);
  }
  /**
  * @returns {Languages}
  */
  keys() {
    const ret = costmdls_keys(this.ptr);
    return Languages.__wrap(ret);
  }
  /**
  * @param {Languages} languages
  * @returns {Costmdls}
  */
  retain_language_versions(languages) {
    _assertClass(languages, Languages);
    const ret = costmdls_retain_language_versions(this.ptr, languages.ptr);
    return Costmdls.__wrap(ret);
  }
};
var DNSRecordAorAAAA = class {
  static __wrap(ptr) {
    const obj = Object.create(DNSRecordAorAAAA.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_dnsrecordaoraaaa_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      dnsrecordaoraaaa_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {DNSRecordAorAAAA}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      dnsrecordaoraaaa_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return DNSRecordAorAAAA.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      dnsrecordaoraaaa_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {DNSRecordAorAAAA}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      dnsrecordaoraaaa_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return DNSRecordAorAAAA.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      dnsrecordaoraaaa_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      dnsrecordaoraaaa_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {DNSRecordAorAAAA}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      dnsrecordaoraaaa_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return DNSRecordAorAAAA.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} dns_name
  * @returns {DNSRecordAorAAAA}
  */
  static new(dns_name) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(dns_name, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      dnsrecordaoraaaa_new(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return DNSRecordAorAAAA.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  record() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      dnsrecordaoraaaa_record(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
};
var DNSRecordSRV = class {
  static __wrap(ptr) {
    const obj = Object.create(DNSRecordSRV.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_dnsrecordsrv_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      dnsrecordsrv_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {DNSRecordSRV}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      dnsrecordsrv_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return DNSRecordSRV.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      dnsrecordsrv_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {DNSRecordSRV}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      dnsrecordsrv_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return DNSRecordSRV.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      dnsrecordsrv_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      dnsrecordsrv_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {DNSRecordSRV}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      dnsrecordsrv_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return DNSRecordSRV.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} dns_name
  * @returns {DNSRecordSRV}
  */
  static new(dns_name) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(dns_name, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      dnsrecordsrv_new(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return DNSRecordSRV.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  record() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      dnsrecordsrv_record(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
};
var DataCost = class {
  static __wrap(ptr) {
    const obj = Object.create(DataCost.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_datacost_free(ptr);
  }
  /**
  * !!! DEPRECATED !!!
  * Since babbage era we should use coins per byte. Use `.new_coins_per_byte` instead.
  * @param {BigNum} coins_per_word
  * @returns {DataCost}
  */
  static new_coins_per_word(coins_per_word) {
    _assertClass(coins_per_word, BigNum);
    const ret = datacost_new_coins_per_word(coins_per_word.ptr);
    return DataCost.__wrap(ret);
  }
  /**
  * @param {BigNum} coins_per_byte
  * @returns {DataCost}
  */
  static new_coins_per_byte(coins_per_byte) {
    _assertClass(coins_per_byte, BigNum);
    const ret = datacost_new_coins_per_byte(coins_per_byte.ptr);
    return DataCost.__wrap(ret);
  }
  /**
  * @returns {BigNum}
  */
  coins_per_byte() {
    const ret = datacost_coins_per_byte(this.ptr);
    return BigNum.__wrap(ret);
  }
};
var DataHash = class {
  static __wrap(ptr) {
    const obj = Object.create(DataHash.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_datahash_free(ptr);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {DataHash}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      datahash_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return DataHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      datahash_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} prefix
  * @returns {string}
  */
  to_bech32(prefix) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(prefix, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      datahash_to_bech32(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr1 = r0;
      var len1 = r1;
      if (r3) {
        ptr1 = 0;
        len1 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr1, len1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr1, len1);
    }
  }
  /**
  * @param {string} bech_str
  * @returns {DataHash}
  */
  static from_bech32(bech_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      datahash_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return DataHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      datahash_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex
  * @returns {DataHash}
  */
  static from_hex(hex) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      datahash_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return DataHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var DatumSource = class {
  static __wrap(ptr) {
    const obj = Object.create(DatumSource.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_datumsource_free(ptr);
  }
  /**
  * @param {PlutusData} datum
  * @returns {DatumSource}
  */
  static new(datum) {
    _assertClass(datum, PlutusData);
    const ret = datumsource_new(datum.ptr);
    return DatumSource.__wrap(ret);
  }
  /**
  * @param {TransactionInput} input
  * @returns {DatumSource}
  */
  static new_ref_input(input) {
    _assertClass(input, TransactionInput);
    const ret = datumsource_new_ref_input(input.ptr);
    return DatumSource.__wrap(ret);
  }
};
var Ed25519KeyHash = class {
  static __wrap(ptr) {
    const obj = Object.create(Ed25519KeyHash.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_ed25519keyhash_free(ptr);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Ed25519KeyHash}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      ed25519keyhash_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Ed25519KeyHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ed25519keyhash_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} prefix
  * @returns {string}
  */
  to_bech32(prefix) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(prefix, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr1 = r0;
      var len1 = r1;
      if (r3) {
        ptr1 = 0;
        len1 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr1, len1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr1, len1);
    }
  }
  /**
  * @param {string} bech_str
  * @returns {Ed25519KeyHash}
  */
  static from_bech32(bech_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      ed25519keyhash_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Ed25519KeyHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ed25519keyhash_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex
  * @returns {Ed25519KeyHash}
  */
  static from_hex(hex) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      ed25519keyhash_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Ed25519KeyHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var Ed25519KeyHashes = class {
  static __wrap(ptr) {
    const obj = Object.create(Ed25519KeyHashes.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_ed25519keyhashes_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ed25519keyhashes_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Ed25519KeyHashes}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      ed25519keyhashes_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Ed25519KeyHashes.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ed25519keyhashes_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Ed25519KeyHashes}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      ed25519keyhashes_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Ed25519KeyHashes.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ed25519keyhashes_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ed25519keyhashes_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Ed25519KeyHashes}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      ed25519keyhashes_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Ed25519KeyHashes.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Ed25519KeyHashes}
  */
  static new() {
    const ret = ed25519keyhashes_new();
    return Ed25519KeyHashes.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = ed25519keyhashes_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {Ed25519KeyHash}
  */
  get(index) {
    const ret = ed25519keyhashes_get(this.ptr, index);
    return Ed25519KeyHash.__wrap(ret);
  }
  /**
  * @param {Ed25519KeyHash} elem
  */
  add(elem) {
    _assertClass(elem, Ed25519KeyHash);
    ed25519keyhashes_add(this.ptr, elem.ptr);
  }
  /**
  * @returns {Ed25519KeyHashes | undefined}
  */
  to_option() {
    const ret = ed25519keyhashes_to_option(this.ptr);
    return ret === 0 ? void 0 : Ed25519KeyHashes.__wrap(ret);
  }
};
var Ed25519Signature = class {
  static __wrap(ptr) {
    const obj = Object.create(Ed25519Signature.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_ed25519signature_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ed25519signature_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_bech32() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ed25519signature_to_bech32(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ed25519signature_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} bech32_str
  * @returns {Ed25519Signature}
  */
  static from_bech32(bech32_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech32_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      ed25519signature_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Ed25519Signature.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} input
  * @returns {Ed25519Signature}
  */
  static from_hex(input) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(input, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      ed25519signature_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Ed25519Signature.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Ed25519Signature}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      ed25519signature_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Ed25519Signature.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var EnterpriseAddress = class {
  static __wrap(ptr) {
    const obj = Object.create(EnterpriseAddress.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_enterpriseaddress_free(ptr);
  }
  /**
  * @param {number} network
  * @param {StakeCredential} payment
  * @returns {EnterpriseAddress}
  */
  static new(network, payment) {
    _assertClass(payment, StakeCredential);
    const ret = enterpriseaddress_new(network, payment.ptr);
    return EnterpriseAddress.__wrap(ret);
  }
  /**
  * @returns {StakeCredential}
  */
  payment_cred() {
    const ret = enterpriseaddress_payment_cred(this.ptr);
    return StakeCredential.__wrap(ret);
  }
  /**
  * @returns {Address}
  */
  to_address() {
    const ret = enterpriseaddress_to_address(this.ptr);
    return Address.__wrap(ret);
  }
  /**
  * @param {Address} addr
  * @returns {EnterpriseAddress | undefined}
  */
  static from_address(addr) {
    _assertClass(addr, Address);
    const ret = enterpriseaddress_from_address(addr.ptr);
    return ret === 0 ? void 0 : EnterpriseAddress.__wrap(ret);
  }
};
var ExUnitPrices = class {
  static __wrap(ptr) {
    const obj = Object.create(ExUnitPrices.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_exunitprices_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      exunitprices_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {ExUnitPrices}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      exunitprices_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ExUnitPrices.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      exunitprices_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {ExUnitPrices}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      exunitprices_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ExUnitPrices.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      exunitprices_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      exunitprices_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {ExUnitPrices}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      exunitprices_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ExUnitPrices.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {UnitInterval}
  */
  mem_price() {
    const ret = exunitprices_mem_price(this.ptr);
    return UnitInterval.__wrap(ret);
  }
  /**
  * @returns {UnitInterval}
  */
  step_price() {
    const ret = exunitprices_step_price(this.ptr);
    return UnitInterval.__wrap(ret);
  }
  /**
  * @param {UnitInterval} mem_price
  * @param {UnitInterval} step_price
  * @returns {ExUnitPrices}
  */
  static new(mem_price, step_price) {
    _assertClass(mem_price, UnitInterval);
    _assertClass(step_price, UnitInterval);
    const ret = exunitprices_new(mem_price.ptr, step_price.ptr);
    return ExUnitPrices.__wrap(ret);
  }
};
var ExUnits = class {
  static __wrap(ptr) {
    const obj = Object.create(ExUnits.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_exunits_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      exunits_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {ExUnits}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      exunits_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ExUnits.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      exunits_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {ExUnits}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      exunits_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ExUnits.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      exunits_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      exunits_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {ExUnits}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      exunits_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ExUnits.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {BigNum}
  */
  mem() {
    const ret = exunits_mem(this.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * @returns {BigNum}
  */
  steps() {
    const ret = exunits_steps(this.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * @param {BigNum} mem
  * @param {BigNum} steps
  * @returns {ExUnits}
  */
  static new(mem, steps) {
    _assertClass(mem, BigNum);
    _assertClass(steps, BigNum);
    const ret = exunits_new(mem.ptr, steps.ptr);
    return ExUnits.__wrap(ret);
  }
};
var FixedTransaction = class {
  static __wrap(ptr) {
    const obj = Object.create(FixedTransaction.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_fixedtransaction_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      fixedtransaction_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {FixedTransaction}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      fixedtransaction_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return FixedTransaction.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      fixedtransaction_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {FixedTransaction}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      fixedtransaction_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return FixedTransaction.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} raw_body
  * @param {Uint8Array} raw_witness_set
  * @param {boolean} is_valid
  * @returns {FixedTransaction}
  */
  static new(raw_body, raw_witness_set, is_valid) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(raw_body, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      const ptr1 = passArray8ToWasm0(raw_witness_set, __wbindgen_malloc);
      const len1 = WASM_VECTOR_LEN;
      fixedtransaction_new(retptr, ptr0, len0, ptr1, len1, is_valid);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return FixedTransaction.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} raw_body
  * @param {Uint8Array} raw_witness_set
  * @param {Uint8Array} raw_auxiliary_data
  * @param {boolean} is_valid
  * @returns {FixedTransaction}
  */
  static new_with_auxiliary(raw_body, raw_witness_set, raw_auxiliary_data, is_valid) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(raw_body, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      const ptr1 = passArray8ToWasm0(raw_witness_set, __wbindgen_malloc);
      const len1 = WASM_VECTOR_LEN;
      const ptr2 = passArray8ToWasm0(raw_auxiliary_data, __wbindgen_malloc);
      const len2 = WASM_VECTOR_LEN;
      fixedtransaction_new_with_auxiliary(retptr, ptr0, len0, ptr1, len1, ptr2, len2, is_valid);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return FixedTransaction.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {TransactionBody}
  */
  body() {
    const ret = fixedtransaction_body(this.ptr);
    return TransactionBody.__wrap(ret);
  }
  /**
  * @returns {Uint8Array}
  */
  raw_body() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      fixedtransaction_raw_body(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} raw_body
  */
  set_body(raw_body) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(raw_body, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      fixedtransaction_set_body(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      if (r1) {
        throw takeObject(r0);
      }
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} raw_witness_set
  */
  set_witness_set(raw_witness_set) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(raw_witness_set, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      fixedtransaction_set_witness_set(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      if (r1) {
        throw takeObject(r0);
      }
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {TransactionWitnessSet}
  */
  witness_set() {
    const ret = fixedtransaction_witness_set(this.ptr);
    return TransactionWitnessSet.__wrap(ret);
  }
  /**
  * @returns {Uint8Array}
  */
  raw_witness_set() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      fixedtransaction_raw_witness_set(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {boolean} valid
  */
  set_is_valid(valid) {
    fixedtransaction_set_is_valid(this.ptr, valid);
  }
  /**
  * @returns {boolean}
  */
  is_valid() {
    const ret = fixedtransaction_is_valid(this.ptr);
    return ret !== 0;
  }
  /**
  * @param {Uint8Array} raw_auxiliary_data
  */
  set_auxiliary_data(raw_auxiliary_data) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(raw_auxiliary_data, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      fixedtransaction_set_auxiliary_data(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      if (r1) {
        throw takeObject(r0);
      }
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {AuxiliaryData | undefined}
  */
  auxiliary_data() {
    const ret = fixedtransaction_auxiliary_data(this.ptr);
    return ret === 0 ? void 0 : AuxiliaryData.__wrap(ret);
  }
  /**
  * @returns {Uint8Array | undefined}
  */
  raw_auxiliary_data() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      fixedtransaction_raw_auxiliary_data(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      let v0;
      if (r0 !== 0) {
        v0 = getArrayU8FromWasm0(r0, r1).slice();
        __wbindgen_free(r0, r1 * 1);
      }
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var GeneralTransactionMetadata = class {
  static __wrap(ptr) {
    const obj = Object.create(GeneralTransactionMetadata.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_generaltransactionmetadata_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      generaltransactionmetadata_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {GeneralTransactionMetadata}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      generaltransactionmetadata_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return GeneralTransactionMetadata.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      generaltransactionmetadata_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {GeneralTransactionMetadata}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      generaltransactionmetadata_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return GeneralTransactionMetadata.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      generaltransactionmetadata_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      generaltransactionmetadata_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {GeneralTransactionMetadata}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      generaltransactionmetadata_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return GeneralTransactionMetadata.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {GeneralTransactionMetadata}
  */
  static new() {
    const ret = generaltransactionmetadata_new();
    return GeneralTransactionMetadata.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = generaltransactionmetadata_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {BigNum} key
  * @param {TransactionMetadatum} value
  * @returns {TransactionMetadatum | undefined}
  */
  insert(key, value) {
    _assertClass(key, BigNum);
    _assertClass(value, TransactionMetadatum);
    const ret = generaltransactionmetadata_insert(this.ptr, key.ptr, value.ptr);
    return ret === 0 ? void 0 : TransactionMetadatum.__wrap(ret);
  }
  /**
  * @param {BigNum} key
  * @returns {TransactionMetadatum | undefined}
  */
  get(key) {
    _assertClass(key, BigNum);
    const ret = generaltransactionmetadata_get(this.ptr, key.ptr);
    return ret === 0 ? void 0 : TransactionMetadatum.__wrap(ret);
  }
  /**
  * @returns {TransactionMetadatumLabels}
  */
  keys() {
    const ret = generaltransactionmetadata_keys(this.ptr);
    return TransactionMetadatumLabels.__wrap(ret);
  }
};
var GenesisDelegateHash = class {
  static __wrap(ptr) {
    const obj = Object.create(GenesisDelegateHash.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_genesisdelegatehash_free(ptr);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {GenesisDelegateHash}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      genesisdelegatehash_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return GenesisDelegateHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      genesisdelegatehash_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} prefix
  * @returns {string}
  */
  to_bech32(prefix) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(prefix, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      genesisdelegatehash_to_bech32(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr1 = r0;
      var len1 = r1;
      if (r3) {
        ptr1 = 0;
        len1 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr1, len1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr1, len1);
    }
  }
  /**
  * @param {string} bech_str
  * @returns {GenesisDelegateHash}
  */
  static from_bech32(bech_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      genesisdelegatehash_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return GenesisDelegateHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      genesisdelegatehash_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex
  * @returns {GenesisDelegateHash}
  */
  static from_hex(hex) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      genesisdelegatehash_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return GenesisDelegateHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var GenesisHash = class {
  static __wrap(ptr) {
    const obj = Object.create(GenesisHash.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_genesishash_free(ptr);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {GenesisHash}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      genesishash_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return GenesisHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      genesishash_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} prefix
  * @returns {string}
  */
  to_bech32(prefix) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(prefix, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      genesishash_to_bech32(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr1 = r0;
      var len1 = r1;
      if (r3) {
        ptr1 = 0;
        len1 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr1, len1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr1, len1);
    }
  }
  /**
  * @param {string} bech_str
  * @returns {GenesisHash}
  */
  static from_bech32(bech_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      genesishash_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return GenesisHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      genesishash_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex
  * @returns {GenesisHash}
  */
  static from_hex(hex) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      genesishash_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return GenesisHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var GenesisHashes = class {
  static __wrap(ptr) {
    const obj = Object.create(GenesisHashes.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_genesishashes_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      genesishashes_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {GenesisHashes}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      genesishashes_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return GenesisHashes.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      genesishashes_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {GenesisHashes}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      genesishashes_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return GenesisHashes.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      genesishashes_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      genesishashes_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {GenesisHashes}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      genesishashes_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return GenesisHashes.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {GenesisHashes}
  */
  static new() {
    const ret = genesishashes_new();
    return GenesisHashes.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = genesishashes_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {GenesisHash}
  */
  get(index) {
    const ret = genesishashes_get(this.ptr, index);
    return GenesisHash.__wrap(ret);
  }
  /**
  * @param {GenesisHash} elem
  */
  add(elem) {
    _assertClass(elem, GenesisHash);
    genesishashes_add(this.ptr, elem.ptr);
  }
};
var GenesisKeyDelegation = class {
  static __wrap(ptr) {
    const obj = Object.create(GenesisKeyDelegation.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_genesiskeydelegation_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      genesiskeydelegation_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {GenesisKeyDelegation}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      genesiskeydelegation_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return GenesisKeyDelegation.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      genesiskeydelegation_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {GenesisKeyDelegation}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      genesiskeydelegation_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return GenesisKeyDelegation.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      genesiskeydelegation_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      genesiskeydelegation_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {GenesisKeyDelegation}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      genesiskeydelegation_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return GenesisKeyDelegation.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {GenesisHash}
  */
  genesishash() {
    const ret = genesiskeydelegation_genesishash(this.ptr);
    return GenesisHash.__wrap(ret);
  }
  /**
  * @returns {GenesisDelegateHash}
  */
  genesis_delegate_hash() {
    const ret = genesiskeydelegation_genesis_delegate_hash(this.ptr);
    return GenesisDelegateHash.__wrap(ret);
  }
  /**
  * @returns {VRFKeyHash}
  */
  vrf_keyhash() {
    const ret = genesiskeydelegation_vrf_keyhash(this.ptr);
    return VRFKeyHash.__wrap(ret);
  }
  /**
  * @param {GenesisHash} genesishash
  * @param {GenesisDelegateHash} genesis_delegate_hash
  * @param {VRFKeyHash} vrf_keyhash
  * @returns {GenesisKeyDelegation}
  */
  static new(genesishash, genesis_delegate_hash, vrf_keyhash) {
    _assertClass(genesishash, GenesisHash);
    _assertClass(genesis_delegate_hash, GenesisDelegateHash);
    _assertClass(vrf_keyhash, VRFKeyHash);
    const ret = genesiskeydelegation_new(genesishash.ptr, genesis_delegate_hash.ptr, vrf_keyhash.ptr);
    return GenesisKeyDelegation.__wrap(ret);
  }
};
var Header = class {
  static __wrap(ptr) {
    const obj = Object.create(Header.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_header_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      header_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Header}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      header_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Header.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      header_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Header}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      header_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Header.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      header_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      header_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Header}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      header_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Header.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {HeaderBody}
  */
  header_body() {
    const ret = header_header_body(this.ptr);
    return HeaderBody.__wrap(ret);
  }
  /**
  * @returns {KESSignature}
  */
  body_signature() {
    const ret = header_body_signature(this.ptr);
    return KESSignature.__wrap(ret);
  }
  /**
  * @param {HeaderBody} header_body
  * @param {KESSignature} body_signature
  * @returns {Header}
  */
  static new(header_body, body_signature) {
    _assertClass(header_body, HeaderBody);
    _assertClass(body_signature, KESSignature);
    const ret = header_new(header_body.ptr, body_signature.ptr);
    return Header.__wrap(ret);
  }
};
var HeaderBody = class {
  static __wrap(ptr) {
    const obj = Object.create(HeaderBody.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_headerbody_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      headerbody_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {HeaderBody}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      headerbody_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return HeaderBody.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      headerbody_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {HeaderBody}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      headerbody_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return HeaderBody.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      headerbody_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      headerbody_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {HeaderBody}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      headerbody_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return HeaderBody.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {number}
  */
  block_number() {
    const ret = headerbody_block_number(this.ptr);
    return ret >>> 0;
  }
  /**
  * !!! DEPRECATED !!!
  * Returns a Slot32 (u32) value in case the underlying original BigNum (u64) value is within the limits.
  * Otherwise will just raise an error.
  * @returns {number}
  */
  slot() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      headerbody_slot(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return r0 >>> 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {BigNum}
  */
  slot_bignum() {
    const ret = headerbody_slot_bignum(this.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * @returns {BlockHash | undefined}
  */
  prev_hash() {
    const ret = headerbody_prev_hash(this.ptr);
    return ret === 0 ? void 0 : BlockHash.__wrap(ret);
  }
  /**
  * @returns {Vkey}
  */
  issuer_vkey() {
    const ret = headerbody_issuer_vkey(this.ptr);
    return Vkey.__wrap(ret);
  }
  /**
  * @returns {VRFVKey}
  */
  vrf_vkey() {
    const ret = headerbody_vrf_vkey(this.ptr);
    return VRFVKey.__wrap(ret);
  }
  /**
  * If this function returns true, the `.nonce_vrf_or_nothing`
  * and the `.leader_vrf_or_nothing` functions will return
  * non-empty results
  * @returns {boolean}
  */
  has_nonce_and_leader_vrf() {
    const ret = headerbody_has_nonce_and_leader_vrf(this.ptr);
    return ret !== 0;
  }
  /**
  * Might return nothing in case `.has_nonce_and_leader_vrf` returns false
  * @returns {VRFCert | undefined}
  */
  nonce_vrf_or_nothing() {
    const ret = headerbody_nonce_vrf_or_nothing(this.ptr);
    return ret === 0 ? void 0 : VRFCert.__wrap(ret);
  }
  /**
  * Might return nothing in case `.has_nonce_and_leader_vrf` returns false
  * @returns {VRFCert | undefined}
  */
  leader_vrf_or_nothing() {
    const ret = headerbody_leader_vrf_or_nothing(this.ptr);
    return ret === 0 ? void 0 : VRFCert.__wrap(ret);
  }
  /**
  * If this function returns true, the `.vrf_result_or_nothing`
  * function will return a non-empty result
  * @returns {boolean}
  */
  has_vrf_result() {
    const ret = headerbody_has_vrf_result(this.ptr);
    return ret !== 0;
  }
  /**
  * Might return nothing in case `.has_vrf_result` returns false
  * @returns {VRFCert | undefined}
  */
  vrf_result_or_nothing() {
    const ret = headerbody_vrf_result_or_nothing(this.ptr);
    return ret === 0 ? void 0 : VRFCert.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  block_body_size() {
    const ret = headerbody_block_body_size(this.ptr);
    return ret >>> 0;
  }
  /**
  * @returns {BlockHash}
  */
  block_body_hash() {
    const ret = headerbody_block_body_hash(this.ptr);
    return BlockHash.__wrap(ret);
  }
  /**
  * @returns {OperationalCert}
  */
  operational_cert() {
    const ret = headerbody_operational_cert(this.ptr);
    return OperationalCert.__wrap(ret);
  }
  /**
  * @returns {ProtocolVersion}
  */
  protocol_version() {
    const ret = headerbody_protocol_version(this.ptr);
    return ProtocolVersion.__wrap(ret);
  }
  /**
  * !!! DEPRECATED !!!
  * This constructor uses outdated slot number format.
  * Use `.new_headerbody` instead
  * @param {number} block_number
  * @param {number} slot
  * @param {BlockHash | undefined} prev_hash
  * @param {Vkey} issuer_vkey
  * @param {VRFVKey} vrf_vkey
  * @param {VRFCert} vrf_result
  * @param {number} block_body_size
  * @param {BlockHash} block_body_hash
  * @param {OperationalCert} operational_cert
  * @param {ProtocolVersion} protocol_version
  * @returns {HeaderBody}
  */
  static new(block_number, slot, prev_hash, issuer_vkey, vrf_vkey, vrf_result, block_body_size, block_body_hash, operational_cert, protocol_version) {
    let ptr0 = 0;
    if (!isLikeNone(prev_hash)) {
      _assertClass(prev_hash, BlockHash);
      ptr0 = prev_hash.ptr;
      prev_hash.ptr = 0;
    }
    _assertClass(issuer_vkey, Vkey);
    _assertClass(vrf_vkey, VRFVKey);
    _assertClass(vrf_result, VRFCert);
    _assertClass(block_body_hash, BlockHash);
    _assertClass(operational_cert, OperationalCert);
    _assertClass(protocol_version, ProtocolVersion);
    const ret = headerbody_new(block_number, slot, ptr0, issuer_vkey.ptr, vrf_vkey.ptr, vrf_result.ptr, block_body_size, block_body_hash.ptr, operational_cert.ptr, protocol_version.ptr);
    return HeaderBody.__wrap(ret);
  }
  /**
  * @param {number} block_number
  * @param {BigNum} slot
  * @param {BlockHash | undefined} prev_hash
  * @param {Vkey} issuer_vkey
  * @param {VRFVKey} vrf_vkey
  * @param {VRFCert} vrf_result
  * @param {number} block_body_size
  * @param {BlockHash} block_body_hash
  * @param {OperationalCert} operational_cert
  * @param {ProtocolVersion} protocol_version
  * @returns {HeaderBody}
  */
  static new_headerbody(block_number, slot, prev_hash, issuer_vkey, vrf_vkey, vrf_result, block_body_size, block_body_hash, operational_cert, protocol_version) {
    _assertClass(slot, BigNum);
    let ptr0 = 0;
    if (!isLikeNone(prev_hash)) {
      _assertClass(prev_hash, BlockHash);
      ptr0 = prev_hash.ptr;
      prev_hash.ptr = 0;
    }
    _assertClass(issuer_vkey, Vkey);
    _assertClass(vrf_vkey, VRFVKey);
    _assertClass(vrf_result, VRFCert);
    _assertClass(block_body_hash, BlockHash);
    _assertClass(operational_cert, OperationalCert);
    _assertClass(protocol_version, ProtocolVersion);
    const ret = headerbody_new_headerbody(block_number, slot.ptr, ptr0, issuer_vkey.ptr, vrf_vkey.ptr, vrf_result.ptr, block_body_size, block_body_hash.ptr, operational_cert.ptr, protocol_version.ptr);
    return HeaderBody.__wrap(ret);
  }
};
var InputWithScriptWitness = class {
  static __wrap(ptr) {
    const obj = Object.create(InputWithScriptWitness.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_inputwithscriptwitness_free(ptr);
  }
  /**
  * @param {TransactionInput} input
  * @param {NativeScript} witness
  * @returns {InputWithScriptWitness}
  */
  static new_with_native_script_witness(input, witness) {
    _assertClass(input, TransactionInput);
    _assertClass(witness, NativeScript);
    const ret = inputwithscriptwitness_new_with_native_script_witness(input.ptr, witness.ptr);
    return InputWithScriptWitness.__wrap(ret);
  }
  /**
  * @param {TransactionInput} input
  * @param {PlutusWitness} witness
  * @returns {InputWithScriptWitness}
  */
  static new_with_plutus_witness(input, witness) {
    _assertClass(input, TransactionInput);
    _assertClass(witness, PlutusWitness);
    const ret = inputwithscriptwitness_new_with_plutus_witness(input.ptr, witness.ptr);
    return InputWithScriptWitness.__wrap(ret);
  }
  /**
  * @returns {TransactionInput}
  */
  input() {
    const ret = inputwithscriptwitness_input(this.ptr);
    return TransactionInput.__wrap(ret);
  }
};
var InputsWithScriptWitness = class {
  static __wrap(ptr) {
    const obj = Object.create(InputsWithScriptWitness.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_inputswithscriptwitness_free(ptr);
  }
  /**
  * @returns {InputsWithScriptWitness}
  */
  static new() {
    const ret = inputswithscriptwitness_new();
    return InputsWithScriptWitness.__wrap(ret);
  }
  /**
  * @param {InputWithScriptWitness} input
  */
  add(input) {
    _assertClass(input, InputWithScriptWitness);
    inputswithscriptwitness_add(this.ptr, input.ptr);
  }
  /**
  * @param {number} index
  * @returns {InputWithScriptWitness}
  */
  get(index) {
    const ret = inputswithscriptwitness_get(this.ptr, index);
    return InputWithScriptWitness.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = inputswithscriptwitness_len(this.ptr);
    return ret >>> 0;
  }
};
var Int = class {
  static __wrap(ptr) {
    const obj = Object.create(Int.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_int_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      int_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Int}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      int_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Int.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      int_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Int}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      int_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Int.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      int_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      int_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Int}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      int_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Int.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {BigNum} x
  * @returns {Int}
  */
  static new(x) {
    _assertClass(x, BigNum);
    const ret = int_new(x.ptr);
    return Int.__wrap(ret);
  }
  /**
  * @param {BigNum} x
  * @returns {Int}
  */
  static new_negative(x) {
    _assertClass(x, BigNum);
    const ret = int_new_negative(x.ptr);
    return Int.__wrap(ret);
  }
  /**
  * @param {number} x
  * @returns {Int}
  */
  static new_i32(x) {
    const ret = int_new_i32(x);
    return Int.__wrap(ret);
  }
  /**
  * @returns {boolean}
  */
  is_positive() {
    const ret = int_is_positive(this.ptr);
    return ret !== 0;
  }
  /**
  * BigNum can only contain unsigned u64 values
  *
  * This function will return the BigNum representation
  * only in case the underlying i128 value is positive.
  *
  * Otherwise nothing will be returned (undefined).
  * @returns {BigNum | undefined}
  */
  as_positive() {
    const ret = int_as_positive(this.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * BigNum can only contain unsigned u64 values
  *
  * This function will return the *absolute* BigNum representation
  * only in case the underlying i128 value is negative.
  *
  * Otherwise nothing will be returned (undefined).
  * @returns {BigNum | undefined}
  */
  as_negative() {
    const ret = int_as_negative(this.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * !!! DEPRECATED !!!
  * Returns an i32 value in case the underlying original i128 value is within the limits.
  * Otherwise will just return an empty value (undefined).
  * @returns {number | undefined}
  */
  as_i32() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      int_as_i32(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return r0 === 0 ? void 0 : r1;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * Returns the underlying value converted to i32 if possible (within limits)
  * Otherwise will just return an empty value (undefined).
  * @returns {number | undefined}
  */
  as_i32_or_nothing() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      int_as_i32_or_nothing(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return r0 === 0 ? void 0 : r1;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * Returns the underlying value converted to i32 if possible (within limits)
  * JsError in case of out of boundary overflow
  * @returns {number}
  */
  as_i32_or_fail() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      int_as_i32_or_fail(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return r0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * Returns string representation of the underlying i128 value directly.
  * Might contain the minus sign (-) in case of negative value.
  * @returns {string}
  */
  to_str() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      int_to_str(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} string
  * @returns {Int}
  */
  static from_str(string) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(string, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      int_from_str(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Int.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var Ipv4 = class {
  static __wrap(ptr) {
    const obj = Object.create(Ipv4.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_ipv4_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ipv4_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Ipv4}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      ipv4_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Ipv4.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ipv4_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Ipv4}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      ipv4_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Ipv4.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ipv4_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ipv4_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Ipv4}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      ipv4_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Ipv4.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} data
  * @returns {Ipv4}
  */
  static new(data) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(data, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      ipv4_new(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Ipv4.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  ip() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ipv4_ip(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var Ipv6 = class {
  static __wrap(ptr) {
    const obj = Object.create(Ipv6.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_ipv6_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ipv6_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Ipv6}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      ipv6_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Ipv6.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ipv6_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Ipv6}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      ipv6_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Ipv6.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ipv6_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ipv6_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Ipv6}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      ipv6_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Ipv6.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} data
  * @returns {Ipv6}
  */
  static new(data) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(data, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      ipv6_new(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Ipv6.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  ip() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      ipv6_ip(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var KESSignature = class {
  static __wrap(ptr) {
    const obj = Object.create(KESSignature.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_kessignature_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      kessignature_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {KESSignature}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      kessignature_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return KESSignature.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var KESVKey = class {
  static __wrap(ptr) {
    const obj = Object.create(KESVKey.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_kesvkey_free(ptr);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {KESVKey}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      kesvkey_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return KESVKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      kesvkey_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} prefix
  * @returns {string}
  */
  to_bech32(prefix) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(prefix, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      kesvkey_to_bech32(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr1 = r0;
      var len1 = r1;
      if (r3) {
        ptr1 = 0;
        len1 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr1, len1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr1, len1);
    }
  }
  /**
  * @param {string} bech_str
  * @returns {KESVKey}
  */
  static from_bech32(bech_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      kesvkey_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return KESVKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      kesvkey_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex
  * @returns {KESVKey}
  */
  static from_hex(hex) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      kesvkey_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return KESVKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var Language = class {
  static __wrap(ptr) {
    const obj = Object.create(Language.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_language_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      language_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Language}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      language_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Language.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      language_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Language}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      language_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Language.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      language_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      language_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Language}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      language_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Language.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Language}
  */
  static new_plutus_v1() {
    const ret = language_new_plutus_v1();
    return Language.__wrap(ret);
  }
  /**
  * @returns {Language}
  */
  static new_plutus_v2() {
    const ret = language_new_plutus_v2();
    return Language.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  kind() {
    const ret = language_kind(this.ptr);
    return ret >>> 0;
  }
};
var Languages = class {
  static __wrap(ptr) {
    const obj = Object.create(Languages.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_languages_free(ptr);
  }
  /**
  * @returns {Languages}
  */
  static new() {
    const ret = languages_new();
    return Languages.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = languages_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {Language}
  */
  get(index) {
    const ret = languages_get(this.ptr, index);
    return Language.__wrap(ret);
  }
  /**
  * @param {Language} elem
  */
  add(elem) {
    _assertClass(elem, Language);
    var ptr0 = elem.ptr;
    elem.ptr = 0;
    languages_add(this.ptr, ptr0);
  }
  /**
  * @returns {Languages}
  */
  static list() {
    const ret = languages_list();
    return Languages.__wrap(ret);
  }
};
var LegacyDaedalusPrivateKey = class {
  static __wrap(ptr) {
    const obj = Object.create(LegacyDaedalusPrivateKey.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_legacydaedalusprivatekey_free(ptr);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {LegacyDaedalusPrivateKey}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      legacydaedalusprivatekey_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return LegacyDaedalusPrivateKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  as_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      legacydaedalusprivatekey_as_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  chaincode() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      legacydaedalusprivatekey_chaincode(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var LinearFee = class {
  static __wrap(ptr) {
    const obj = Object.create(LinearFee.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_linearfee_free(ptr);
  }
  /**
  * @returns {BigNum}
  */
  constant() {
    const ret = linearfee_constant(this.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * @returns {BigNum}
  */
  coefficient() {
    const ret = linearfee_coefficient(this.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * @param {BigNum} coefficient
  * @param {BigNum} constant
  * @returns {LinearFee}
  */
  static new(coefficient, constant) {
    _assertClass(coefficient, BigNum);
    _assertClass(constant, BigNum);
    const ret = linearfee_new(coefficient.ptr, constant.ptr);
    return LinearFee.__wrap(ret);
  }
};
var MIRToStakeCredentials = class {
  static __wrap(ptr) {
    const obj = Object.create(MIRToStakeCredentials.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_mirtostakecredentials_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      mirtostakecredentials_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {MIRToStakeCredentials}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      mirtostakecredentials_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MIRToStakeCredentials.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      mirtostakecredentials_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {MIRToStakeCredentials}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      mirtostakecredentials_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MIRToStakeCredentials.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      mirtostakecredentials_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      mirtostakecredentials_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {MIRToStakeCredentials}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      mirtostakecredentials_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MIRToStakeCredentials.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {MIRToStakeCredentials}
  */
  static new() {
    const ret = mirtostakecredentials_new();
    return MIRToStakeCredentials.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = mirtostakecredentials_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {StakeCredential} cred
  * @param {Int} delta
  * @returns {Int | undefined}
  */
  insert(cred, delta) {
    _assertClass(cred, StakeCredential);
    _assertClass(delta, Int);
    const ret = mirtostakecredentials_insert(this.ptr, cred.ptr, delta.ptr);
    return ret === 0 ? void 0 : Int.__wrap(ret);
  }
  /**
  * @param {StakeCredential} cred
  * @returns {Int | undefined}
  */
  get(cred) {
    _assertClass(cred, StakeCredential);
    const ret = mirtostakecredentials_get(this.ptr, cred.ptr);
    return ret === 0 ? void 0 : Int.__wrap(ret);
  }
  /**
  * @returns {StakeCredentials}
  */
  keys() {
    const ret = mirtostakecredentials_keys(this.ptr);
    return StakeCredentials.__wrap(ret);
  }
};
var MetadataList = class {
  static __wrap(ptr) {
    const obj = Object.create(MetadataList.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_metadatalist_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      metadatalist_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {MetadataList}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      metadatalist_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MetadataList.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      metadatalist_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {MetadataList}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      metadatalist_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MetadataList.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {MetadataList}
  */
  static new() {
    const ret = metadatalist_new();
    return MetadataList.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = metadatalist_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {TransactionMetadatum}
  */
  get(index) {
    const ret = metadatalist_get(this.ptr, index);
    return TransactionMetadatum.__wrap(ret);
  }
  /**
  * @param {TransactionMetadatum} elem
  */
  add(elem) {
    _assertClass(elem, TransactionMetadatum);
    metadatalist_add(this.ptr, elem.ptr);
  }
};
var MetadataMap = class {
  static __wrap(ptr) {
    const obj = Object.create(MetadataMap.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_metadatamap_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      metadatamap_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {MetadataMap}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      metadatamap_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MetadataMap.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      metadatamap_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {MetadataMap}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      metadatamap_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MetadataMap.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {MetadataMap}
  */
  static new() {
    const ret = metadatamap_new();
    return MetadataMap.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = metadatamap_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {TransactionMetadatum} key
  * @param {TransactionMetadatum} value
  * @returns {TransactionMetadatum | undefined}
  */
  insert(key, value) {
    _assertClass(key, TransactionMetadatum);
    _assertClass(value, TransactionMetadatum);
    const ret = metadatamap_insert(this.ptr, key.ptr, value.ptr);
    return ret === 0 ? void 0 : TransactionMetadatum.__wrap(ret);
  }
  /**
  * @param {string} key
  * @param {TransactionMetadatum} value
  * @returns {TransactionMetadatum | undefined}
  */
  insert_str(key, value) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(key, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      _assertClass(value, TransactionMetadatum);
      metadatamap_insert_str(retptr, this.ptr, ptr0, len0, value.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return r0 === 0 ? void 0 : TransactionMetadatum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {number} key
  * @param {TransactionMetadatum} value
  * @returns {TransactionMetadatum | undefined}
  */
  insert_i32(key, value) {
    _assertClass(value, TransactionMetadatum);
    const ret = metadatamap_insert_i32(this.ptr, key, value.ptr);
    return ret === 0 ? void 0 : TransactionMetadatum.__wrap(ret);
  }
  /**
  * @param {TransactionMetadatum} key
  * @returns {TransactionMetadatum}
  */
  get(key) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(key, TransactionMetadatum);
      metadatamap_get(retptr, this.ptr, key.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionMetadatum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} key
  * @returns {TransactionMetadatum}
  */
  get_str(key) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(key, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      metadatamap_get_str(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionMetadatum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {number} key
  * @returns {TransactionMetadatum}
  */
  get_i32(key) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      metadatamap_get_i32(retptr, this.ptr, key);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionMetadatum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {TransactionMetadatum} key
  * @returns {boolean}
  */
  has(key) {
    _assertClass(key, TransactionMetadatum);
    const ret = metadatamap_has(this.ptr, key.ptr);
    return ret !== 0;
  }
  /**
  * @returns {MetadataList}
  */
  keys() {
    const ret = metadatamap_keys(this.ptr);
    return MetadataList.__wrap(ret);
  }
};
var Mint = class {
  static __wrap(ptr) {
    const obj = Object.create(Mint.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_mint_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      mint_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Mint}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      mint_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Mint.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      mint_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Mint}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      mint_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Mint.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      mint_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      mint_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Mint}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      mint_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Mint.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Mint}
  */
  static new() {
    const ret = mint_new();
    return Mint.__wrap(ret);
  }
  /**
  * @param {ScriptHash} key
  * @param {MintAssets} value
  * @returns {Mint}
  */
  static new_from_entry(key, value) {
    _assertClass(key, ScriptHash);
    _assertClass(value, MintAssets);
    const ret = mint_new_from_entry(key.ptr, value.ptr);
    return Mint.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = mint_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {ScriptHash} key
  * @param {MintAssets} value
  * @returns {MintAssets | undefined}
  */
  insert(key, value) {
    _assertClass(key, ScriptHash);
    _assertClass(value, MintAssets);
    const ret = mint_insert(this.ptr, key.ptr, value.ptr);
    return ret === 0 ? void 0 : MintAssets.__wrap(ret);
  }
  /**
  * !!! DEPRECATED !!!
  * Mint can store multiple entries for the same policy id.
  * Use `.get_all` instead.
  * @param {ScriptHash} key
  * @returns {MintAssets | undefined}
  */
  get(key) {
    _assertClass(key, ScriptHash);
    const ret = mint_get(this.ptr, key.ptr);
    return ret === 0 ? void 0 : MintAssets.__wrap(ret);
  }
  /**
  * @param {ScriptHash} key
  * @returns {MintsAssets | undefined}
  */
  get_all(key) {
    _assertClass(key, ScriptHash);
    const ret = mint_get_all(this.ptr, key.ptr);
    return ret === 0 ? void 0 : MintsAssets.__wrap(ret);
  }
  /**
  * @returns {ScriptHashes}
  */
  keys() {
    const ret = mint_keys(this.ptr);
    return ScriptHashes.__wrap(ret);
  }
  /**
  * Returns the multiasset where only positive (minting) entries are present
  * @returns {MultiAsset}
  */
  as_positive_multiasset() {
    const ret = mint_as_positive_multiasset(this.ptr);
    return MultiAsset.__wrap(ret);
  }
  /**
  * Returns the multiasset where only negative (burning) entries are present
  * @returns {MultiAsset}
  */
  as_negative_multiasset() {
    const ret = mint_as_negative_multiasset(this.ptr);
    return MultiAsset.__wrap(ret);
  }
};
var MintAssets = class {
  static __wrap(ptr) {
    const obj = Object.create(MintAssets.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_mintassets_free(ptr);
  }
  /**
  * @returns {MintAssets}
  */
  static new() {
    const ret = mintassets_new();
    return MintAssets.__wrap(ret);
  }
  /**
  * @param {AssetName} key
  * @param {Int} value
  * @returns {MintAssets}
  */
  static new_from_entry(key, value) {
    _assertClass(key, AssetName);
    _assertClass(value, Int);
    var ptr0 = value.ptr;
    value.ptr = 0;
    const ret = mintassets_new_from_entry(key.ptr, ptr0);
    return MintAssets.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = mintassets_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {AssetName} key
  * @param {Int} value
  * @returns {Int | undefined}
  */
  insert(key, value) {
    _assertClass(key, AssetName);
    _assertClass(value, Int);
    var ptr0 = value.ptr;
    value.ptr = 0;
    const ret = mintassets_insert(this.ptr, key.ptr, ptr0);
    return ret === 0 ? void 0 : Int.__wrap(ret);
  }
  /**
  * @param {AssetName} key
  * @returns {Int | undefined}
  */
  get(key) {
    _assertClass(key, AssetName);
    const ret = mintassets_get(this.ptr, key.ptr);
    return ret === 0 ? void 0 : Int.__wrap(ret);
  }
  /**
  * @returns {AssetNames}
  */
  keys() {
    const ret = mintassets_keys(this.ptr);
    return AssetNames.__wrap(ret);
  }
};
var MintBuilder = class {
  static __wrap(ptr) {
    const obj = Object.create(MintBuilder.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_mintbuilder_free(ptr);
  }
  /**
  * @returns {MintBuilder}
  */
  static new() {
    const ret = mintbuilder_new();
    return MintBuilder.__wrap(ret);
  }
  /**
  * @param {MintWitness} mint
  * @param {AssetName} asset_name
  * @param {Int} amount
  */
  add_asset(mint, asset_name, amount) {
    _assertClass(mint, MintWitness);
    _assertClass(asset_name, AssetName);
    _assertClass(amount, Int);
    mintbuilder_add_asset(this.ptr, mint.ptr, asset_name.ptr, amount.ptr);
  }
  /**
  * @param {MintWitness} mint
  * @param {AssetName} asset_name
  * @param {Int} amount
  */
  set_asset(mint, asset_name, amount) {
    _assertClass(mint, MintWitness);
    _assertClass(asset_name, AssetName);
    _assertClass(amount, Int);
    mintbuilder_set_asset(this.ptr, mint.ptr, asset_name.ptr, amount.ptr);
  }
  /**
  * @returns {Mint}
  */
  build() {
    const ret = mintbuilder_build(this.ptr);
    return Mint.__wrap(ret);
  }
  /**
  * @returns {NativeScripts}
  */
  get_native_scripts() {
    const ret = mintbuilder_get_native_scripts(this.ptr);
    return NativeScripts.__wrap(ret);
  }
  /**
  * @returns {PlutusWitnesses}
  */
  get_plutus_witnesses() {
    const ret = mintbuilder_get_plutus_witnesses(this.ptr);
    return PlutusWitnesses.__wrap(ret);
  }
  /**
  * @returns {TransactionInputs}
  */
  get_ref_inputs() {
    const ret = mintbuilder_get_ref_inputs(this.ptr);
    return TransactionInputs.__wrap(ret);
  }
  /**
  * @returns {Redeemers}
  */
  get_redeeemers() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      mintbuilder_get_redeeemers(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Redeemers.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {boolean}
  */
  has_plutus_scripts() {
    const ret = mintbuilder_has_plutus_scripts(this.ptr);
    return ret !== 0;
  }
  /**
  * @returns {boolean}
  */
  has_native_scripts() {
    const ret = mintbuilder_has_native_scripts(this.ptr);
    return ret !== 0;
  }
};
var MintWitness = class {
  static __wrap(ptr) {
    const obj = Object.create(MintWitness.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_mintwitness_free(ptr);
  }
  /**
  * @param {NativeScript} native_script
  * @returns {MintWitness}
  */
  static new_native_script(native_script) {
    _assertClass(native_script, NativeScript);
    const ret = mintwitness_new_native_script(native_script.ptr);
    return MintWitness.__wrap(ret);
  }
  /**
  * @param {PlutusScriptSource} plutus_script
  * @param {Redeemer} redeemer
  * @returns {MintWitness}
  */
  static new_plutus_script(plutus_script, redeemer) {
    _assertClass(plutus_script, PlutusScriptSource);
    _assertClass(redeemer, Redeemer);
    const ret = mintwitness_new_plutus_script(plutus_script.ptr, redeemer.ptr);
    return MintWitness.__wrap(ret);
  }
};
var MintsAssets = class {
  static __wrap(ptr) {
    const obj = Object.create(MintsAssets.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_mintsassets_free(ptr);
  }
};
var MoveInstantaneousReward = class {
  static __wrap(ptr) {
    const obj = Object.create(MoveInstantaneousReward.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_moveinstantaneousreward_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      moveinstantaneousreward_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {MoveInstantaneousReward}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      moveinstantaneousreward_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MoveInstantaneousReward.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      moveinstantaneousreward_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {MoveInstantaneousReward}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      moveinstantaneousreward_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MoveInstantaneousReward.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      moveinstantaneousreward_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      moveinstantaneousreward_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {MoveInstantaneousReward}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      moveinstantaneousreward_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MoveInstantaneousReward.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {number} pot
  * @param {BigNum} amount
  * @returns {MoveInstantaneousReward}
  */
  static new_to_other_pot(pot, amount) {
    _assertClass(amount, BigNum);
    const ret = moveinstantaneousreward_new_to_other_pot(pot, amount.ptr);
    return MoveInstantaneousReward.__wrap(ret);
  }
  /**
  * @param {number} pot
  * @param {MIRToStakeCredentials} amounts
  * @returns {MoveInstantaneousReward}
  */
  static new_to_stake_creds(pot, amounts) {
    _assertClass(amounts, MIRToStakeCredentials);
    const ret = moveinstantaneousreward_new_to_stake_creds(pot, amounts.ptr);
    return MoveInstantaneousReward.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  pot() {
    const ret = moveinstantaneousreward_pot(this.ptr);
    return ret >>> 0;
  }
  /**
  * @returns {number}
  */
  kind() {
    const ret = moveinstantaneousreward_kind(this.ptr);
    return ret >>> 0;
  }
  /**
  * @returns {BigNum | undefined}
  */
  as_to_other_pot() {
    const ret = moveinstantaneousreward_as_to_other_pot(this.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * @returns {MIRToStakeCredentials | undefined}
  */
  as_to_stake_creds() {
    const ret = moveinstantaneousreward_as_to_stake_creds(this.ptr);
    return ret === 0 ? void 0 : MIRToStakeCredentials.__wrap(ret);
  }
};
var MoveInstantaneousRewardsCert = class {
  static __wrap(ptr) {
    const obj = Object.create(MoveInstantaneousRewardsCert.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_moveinstantaneousrewardscert_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      moveinstantaneousrewardscert_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {MoveInstantaneousRewardsCert}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      moveinstantaneousrewardscert_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MoveInstantaneousRewardsCert.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      moveinstantaneousrewardscert_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {MoveInstantaneousRewardsCert}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      moveinstantaneousrewardscert_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MoveInstantaneousRewardsCert.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      moveinstantaneousrewardscert_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      moveinstantaneousrewardscert_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {MoveInstantaneousRewardsCert}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      moveinstantaneousrewardscert_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MoveInstantaneousRewardsCert.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {MoveInstantaneousReward}
  */
  move_instantaneous_reward() {
    const ret = moveinstantaneousrewardscert_move_instantaneous_reward(this.ptr);
    return MoveInstantaneousReward.__wrap(ret);
  }
  /**
  * @param {MoveInstantaneousReward} move_instantaneous_reward
  * @returns {MoveInstantaneousRewardsCert}
  */
  static new(move_instantaneous_reward) {
    _assertClass(move_instantaneous_reward, MoveInstantaneousReward);
    const ret = moveinstantaneousrewardscert_new(move_instantaneous_reward.ptr);
    return MoveInstantaneousRewardsCert.__wrap(ret);
  }
};
var MultiAsset = class {
  static __wrap(ptr) {
    const obj = Object.create(MultiAsset.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_multiasset_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      multiasset_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {MultiAsset}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      multiasset_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MultiAsset.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      multiasset_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {MultiAsset}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      multiasset_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MultiAsset.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      multiasset_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      multiasset_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {MultiAsset}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      multiasset_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MultiAsset.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {MultiAsset}
  */
  static new() {
    const ret = multiasset_new();
    return MultiAsset.__wrap(ret);
  }
  /**
  * the number of unique policy IDs in the multiasset
  * @returns {number}
  */
  len() {
    const ret = multiasset_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * set (and replace if it exists) all assets with policy {policy_id} to a copy of {assets}
  * @param {ScriptHash} policy_id
  * @param {Assets} assets
  * @returns {Assets | undefined}
  */
  insert(policy_id, assets) {
    _assertClass(policy_id, ScriptHash);
    _assertClass(assets, Assets);
    const ret = multiasset_insert(this.ptr, policy_id.ptr, assets.ptr);
    return ret === 0 ? void 0 : Assets.__wrap(ret);
  }
  /**
  * all assets under {policy_id}, if any exist, or else None (undefined in JS)
  * @param {ScriptHash} policy_id
  * @returns {Assets | undefined}
  */
  get(policy_id) {
    _assertClass(policy_id, ScriptHash);
    const ret = multiasset_get(this.ptr, policy_id.ptr);
    return ret === 0 ? void 0 : Assets.__wrap(ret);
  }
  /**
  * sets the asset {asset_name} to {value} under policy {policy_id}
  * returns the previous amount if it was set, or else None (undefined in JS)
  * @param {ScriptHash} policy_id
  * @param {AssetName} asset_name
  * @param {BigNum} value
  * @returns {BigNum | undefined}
  */
  set_asset(policy_id, asset_name, value) {
    _assertClass(policy_id, ScriptHash);
    _assertClass(asset_name, AssetName);
    _assertClass(value, BigNum);
    var ptr0 = value.ptr;
    value.ptr = 0;
    const ret = multiasset_set_asset(this.ptr, policy_id.ptr, asset_name.ptr, ptr0);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * returns the amount of asset {asset_name} under policy {policy_id}
  * If such an asset does not exist, 0 is returned.
  * @param {ScriptHash} policy_id
  * @param {AssetName} asset_name
  * @returns {BigNum}
  */
  get_asset(policy_id, asset_name) {
    _assertClass(policy_id, ScriptHash);
    _assertClass(asset_name, AssetName);
    const ret = multiasset_get_asset(this.ptr, policy_id.ptr, asset_name.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * returns all policy IDs used by assets in this multiasset
  * @returns {ScriptHashes}
  */
  keys() {
    const ret = multiasset_keys(this.ptr);
    return ScriptHashes.__wrap(ret);
  }
  /**
  * removes an asset from the list if the result is 0 or less
  * does not modify this object, instead the result is returned
  * @param {MultiAsset} rhs_ma
  * @returns {MultiAsset}
  */
  sub(rhs_ma) {
    _assertClass(rhs_ma, MultiAsset);
    const ret = multiasset_sub(this.ptr, rhs_ma.ptr);
    return MultiAsset.__wrap(ret);
  }
};
var MultiHostName = class {
  static __wrap(ptr) {
    const obj = Object.create(MultiHostName.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_multihostname_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      multihostname_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {MultiHostName}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      multihostname_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MultiHostName.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      multihostname_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {MultiHostName}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      multihostname_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MultiHostName.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      multihostname_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      multihostname_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {MultiHostName}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      multihostname_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MultiHostName.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {DNSRecordSRV}
  */
  dns_name() {
    const ret = multihostname_dns_name(this.ptr);
    return DNSRecordSRV.__wrap(ret);
  }
  /**
  * @param {DNSRecordSRV} dns_name
  * @returns {MultiHostName}
  */
  static new(dns_name) {
    _assertClass(dns_name, DNSRecordSRV);
    const ret = multihostname_new(dns_name.ptr);
    return MultiHostName.__wrap(ret);
  }
};
var NativeScript = class {
  static __wrap(ptr) {
    const obj = Object.create(NativeScript.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_nativescript_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      nativescript_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {NativeScript}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      nativescript_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return NativeScript.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      nativescript_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {NativeScript}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      nativescript_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return NativeScript.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      nativescript_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      nativescript_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {NativeScript}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      nativescript_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return NativeScript.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {ScriptHash}
  */
  hash() {
    const ret = nativescript_hash(this.ptr);
    return ScriptHash.__wrap(ret);
  }
  /**
  * @param {ScriptPubkey} script_pubkey
  * @returns {NativeScript}
  */
  static new_script_pubkey(script_pubkey) {
    _assertClass(script_pubkey, ScriptPubkey);
    const ret = nativescript_new_script_pubkey(script_pubkey.ptr);
    return NativeScript.__wrap(ret);
  }
  /**
  * @param {ScriptAll} script_all
  * @returns {NativeScript}
  */
  static new_script_all(script_all) {
    _assertClass(script_all, ScriptAll);
    const ret = nativescript_new_script_all(script_all.ptr);
    return NativeScript.__wrap(ret);
  }
  /**
  * @param {ScriptAny} script_any
  * @returns {NativeScript}
  */
  static new_script_any(script_any) {
    _assertClass(script_any, ScriptAny);
    const ret = nativescript_new_script_any(script_any.ptr);
    return NativeScript.__wrap(ret);
  }
  /**
  * @param {ScriptNOfK} script_n_of_k
  * @returns {NativeScript}
  */
  static new_script_n_of_k(script_n_of_k) {
    _assertClass(script_n_of_k, ScriptNOfK);
    const ret = nativescript_new_script_n_of_k(script_n_of_k.ptr);
    return NativeScript.__wrap(ret);
  }
  /**
  * @param {TimelockStart} timelock_start
  * @returns {NativeScript}
  */
  static new_timelock_start(timelock_start) {
    _assertClass(timelock_start, TimelockStart);
    const ret = nativescript_new_timelock_start(timelock_start.ptr);
    return NativeScript.__wrap(ret);
  }
  /**
  * @param {TimelockExpiry} timelock_expiry
  * @returns {NativeScript}
  */
  static new_timelock_expiry(timelock_expiry) {
    _assertClass(timelock_expiry, TimelockExpiry);
    const ret = nativescript_new_timelock_expiry(timelock_expiry.ptr);
    return NativeScript.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  kind() {
    const ret = nativescript_kind(this.ptr);
    return ret >>> 0;
  }
  /**
  * @returns {ScriptPubkey | undefined}
  */
  as_script_pubkey() {
    const ret = nativescript_as_script_pubkey(this.ptr);
    return ret === 0 ? void 0 : ScriptPubkey.__wrap(ret);
  }
  /**
  * @returns {ScriptAll | undefined}
  */
  as_script_all() {
    const ret = nativescript_as_script_all(this.ptr);
    return ret === 0 ? void 0 : ScriptAll.__wrap(ret);
  }
  /**
  * @returns {ScriptAny | undefined}
  */
  as_script_any() {
    const ret = nativescript_as_script_any(this.ptr);
    return ret === 0 ? void 0 : ScriptAny.__wrap(ret);
  }
  /**
  * @returns {ScriptNOfK | undefined}
  */
  as_script_n_of_k() {
    const ret = nativescript_as_script_n_of_k(this.ptr);
    return ret === 0 ? void 0 : ScriptNOfK.__wrap(ret);
  }
  /**
  * @returns {TimelockStart | undefined}
  */
  as_timelock_start() {
    const ret = nativescript_as_timelock_start(this.ptr);
    return ret === 0 ? void 0 : TimelockStart.__wrap(ret);
  }
  /**
  * @returns {TimelockExpiry | undefined}
  */
  as_timelock_expiry() {
    const ret = nativescript_as_timelock_expiry(this.ptr);
    return ret === 0 ? void 0 : TimelockExpiry.__wrap(ret);
  }
  /**
  * Returns an array of unique Ed25519KeyHashes
  * contained within this script recursively on any depth level.
  * The order of the keys in the result is not determined in any way.
  * @returns {Ed25519KeyHashes}
  */
  get_required_signers() {
    const ret = nativescript_get_required_signers(this.ptr);
    return Ed25519KeyHashes.__wrap(ret);
  }
};
var NativeScripts = class {
  static __wrap(ptr) {
    const obj = Object.create(NativeScripts.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_nativescripts_free(ptr);
  }
  /**
  * @returns {NativeScripts}
  */
  static new() {
    const ret = nativescripts_new();
    return NativeScripts.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = nativescripts_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {NativeScript}
  */
  get(index) {
    const ret = nativescripts_get(this.ptr, index);
    return NativeScript.__wrap(ret);
  }
  /**
  * @param {NativeScript} elem
  */
  add(elem) {
    _assertClass(elem, NativeScript);
    nativescripts_add(this.ptr, elem.ptr);
  }
};
var NetworkId = class {
  static __wrap(ptr) {
    const obj = Object.create(NetworkId.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_networkid_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      networkid_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {NetworkId}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      networkid_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return NetworkId.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      networkid_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {NetworkId}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      networkid_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return NetworkId.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      networkid_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      networkid_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {NetworkId}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      networkid_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return NetworkId.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {NetworkId}
  */
  static testnet() {
    const ret = networkid_testnet();
    return NetworkId.__wrap(ret);
  }
  /**
  * @returns {NetworkId}
  */
  static mainnet() {
    const ret = networkid_mainnet();
    return NetworkId.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  kind() {
    const ret = networkid_kind(this.ptr);
    return ret >>> 0;
  }
};
var NetworkInfo = class {
  static __wrap(ptr) {
    const obj = Object.create(NetworkInfo.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_networkinfo_free(ptr);
  }
  /**
  * @param {number} network_id
  * @param {number} protocol_magic
  * @returns {NetworkInfo}
  */
  static new(network_id, protocol_magic) {
    const ret = networkinfo_new(network_id, protocol_magic);
    return NetworkInfo.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  network_id() {
    const ret = networkinfo_network_id(this.ptr);
    return ret;
  }
  /**
  * @returns {number}
  */
  protocol_magic() {
    const ret = networkinfo_protocol_magic(this.ptr);
    return ret >>> 0;
  }
  /**
  * @returns {NetworkInfo}
  */
  static testnet_preview() {
    const ret = networkinfo_testnet_preview();
    return NetworkInfo.__wrap(ret);
  }
  /**
  * @returns {NetworkInfo}
  */
  static testnet_preprod() {
    const ret = networkinfo_testnet_preprod();
    return NetworkInfo.__wrap(ret);
  }
  /**
  * !!! DEPRECATED !!!
  * This network does not exist anymore. Use `.testnet_preview()` or `.testnet_preprod()`
  * @returns {NetworkInfo}
  */
  static testnet() {
    const ret = networkinfo_testnet();
    return NetworkInfo.__wrap(ret);
  }
  /**
  * @returns {NetworkInfo}
  */
  static mainnet() {
    const ret = networkinfo_mainnet();
    return NetworkInfo.__wrap(ret);
  }
};
var Nonce = class {
  static __wrap(ptr) {
    const obj = Object.create(Nonce.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_nonce_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      nonce_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Nonce}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      nonce_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Nonce.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      nonce_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Nonce}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      nonce_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Nonce.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      nonce_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      nonce_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Nonce}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      nonce_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Nonce.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Nonce}
  */
  static new_identity() {
    const ret = nonce_new_identity();
    return Nonce.__wrap(ret);
  }
  /**
  * @param {Uint8Array} hash
  * @returns {Nonce}
  */
  static new_from_hash(hash) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(hash, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      nonce_new_from_hash(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Nonce.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array | undefined}
  */
  get_hash() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      nonce_get_hash(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      let v0;
      if (r0 !== 0) {
        v0 = getArrayU8FromWasm0(r0, r1).slice();
        __wbindgen_free(r0, r1 * 1);
      }
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var OperationalCert = class {
  static __wrap(ptr) {
    const obj = Object.create(OperationalCert.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_operationalcert_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      operationalcert_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {OperationalCert}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      operationalcert_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return OperationalCert.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      operationalcert_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {OperationalCert}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      operationalcert_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return OperationalCert.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      operationalcert_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      operationalcert_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {OperationalCert}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      operationalcert_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return OperationalCert.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {KESVKey}
  */
  hot_vkey() {
    const ret = operationalcert_hot_vkey(this.ptr);
    return KESVKey.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  sequence_number() {
    const ret = operationalcert_sequence_number(this.ptr);
    return ret >>> 0;
  }
  /**
  * @returns {number}
  */
  kes_period() {
    const ret = operationalcert_kes_period(this.ptr);
    return ret >>> 0;
  }
  /**
  * @returns {Ed25519Signature}
  */
  sigma() {
    const ret = operationalcert_sigma(this.ptr);
    return Ed25519Signature.__wrap(ret);
  }
  /**
  * @param {KESVKey} hot_vkey
  * @param {number} sequence_number
  * @param {number} kes_period
  * @param {Ed25519Signature} sigma
  * @returns {OperationalCert}
  */
  static new(hot_vkey, sequence_number, kes_period, sigma) {
    _assertClass(hot_vkey, KESVKey);
    _assertClass(sigma, Ed25519Signature);
    const ret = operationalcert_new(hot_vkey.ptr, sequence_number, kes_period, sigma.ptr);
    return OperationalCert.__wrap(ret);
  }
};
var PlutusData = class {
  static __wrap(ptr) {
    const obj = Object.create(PlutusData.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_plutusdata_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      plutusdata_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {PlutusData}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      plutusdata_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PlutusData.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      plutusdata_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {PlutusData}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      plutusdata_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PlutusData.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {ConstrPlutusData} constr_plutus_data
  * @returns {PlutusData}
  */
  static new_constr_plutus_data(constr_plutus_data) {
    _assertClass(constr_plutus_data, ConstrPlutusData);
    const ret = plutusdata_new_constr_plutus_data(constr_plutus_data.ptr);
    return PlutusData.__wrap(ret);
  }
  /**
  * Same as `.new_constr_plutus_data` but creates constr with empty data list
  * @param {BigNum} alternative
  * @returns {PlutusData}
  */
  static new_empty_constr_plutus_data(alternative) {
    _assertClass(alternative, BigNum);
    const ret = plutusdata_new_empty_constr_plutus_data(alternative.ptr);
    return PlutusData.__wrap(ret);
  }
  /**
  * @param {PlutusMap} map
  * @returns {PlutusData}
  */
  static new_map(map) {
    _assertClass(map, PlutusMap);
    const ret = plutusdata_new_map(map.ptr);
    return PlutusData.__wrap(ret);
  }
  /**
  * @param {PlutusList} list
  * @returns {PlutusData}
  */
  static new_list(list) {
    _assertClass(list, PlutusList);
    const ret = plutusdata_new_list(list.ptr);
    return PlutusData.__wrap(ret);
  }
  /**
  * @param {BigInt} integer
  * @returns {PlutusData}
  */
  static new_integer(integer) {
    _assertClass(integer, BigInt);
    const ret = plutusdata_new_integer(integer.ptr);
    return PlutusData.__wrap(ret);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {PlutusData}
  */
  static new_bytes(bytes) {
    const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
    const len0 = WASM_VECTOR_LEN;
    const ret = plutusdata_new_bytes(ptr0, len0);
    return PlutusData.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  kind() {
    const ret = plutusdata_kind(this.ptr);
    return ret >>> 0;
  }
  /**
  * @returns {ConstrPlutusData | undefined}
  */
  as_constr_plutus_data() {
    const ret = plutusdata_as_constr_plutus_data(this.ptr);
    return ret === 0 ? void 0 : ConstrPlutusData.__wrap(ret);
  }
  /**
  * @returns {PlutusMap | undefined}
  */
  as_map() {
    const ret = plutusdata_as_map(this.ptr);
    return ret === 0 ? void 0 : PlutusMap.__wrap(ret);
  }
  /**
  * @returns {PlutusList | undefined}
  */
  as_list() {
    const ret = plutusdata_as_list(this.ptr);
    return ret === 0 ? void 0 : PlutusList.__wrap(ret);
  }
  /**
  * @returns {BigInt | undefined}
  */
  as_integer() {
    const ret = plutusdata_as_integer(this.ptr);
    return ret === 0 ? void 0 : BigInt.__wrap(ret);
  }
  /**
  * @returns {Uint8Array | undefined}
  */
  as_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      plutusdata_as_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      let v0;
      if (r0 !== 0) {
        v0 = getArrayU8FromWasm0(r0, r1).slice();
        __wbindgen_free(r0, r1 * 1);
      }
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {number} schema
  * @returns {string}
  */
  to_json(schema) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      plutusdata_to_json(retptr, this.ptr, schema);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @param {string} json
  * @param {number} schema
  * @returns {PlutusData}
  */
  static from_json(json, schema) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      plutusdata_from_json(retptr, ptr0, len0, schema);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PlutusData.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var PlutusList = class {
  static __wrap(ptr) {
    const obj = Object.create(PlutusList.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_plutuslist_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      plutuslist_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {PlutusList}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      plutuslist_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PlutusList.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      plutuslist_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {PlutusList}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      plutuslist_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PlutusList.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {PlutusList}
  */
  static new() {
    const ret = plutuslist_new();
    return PlutusList.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = plutuslist_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {PlutusData}
  */
  get(index) {
    const ret = plutuslist_get(this.ptr, index);
    return PlutusData.__wrap(ret);
  }
  /**
  * @param {PlutusData} elem
  */
  add(elem) {
    _assertClass(elem, PlutusData);
    plutuslist_add(this.ptr, elem.ptr);
  }
};
var PlutusMap = class {
  static __wrap(ptr) {
    const obj = Object.create(PlutusMap.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_plutusmap_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      plutusmap_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {PlutusMap}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      plutusmap_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PlutusMap.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      plutusmap_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {PlutusMap}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      plutusmap_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PlutusMap.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {PlutusMap}
  */
  static new() {
    const ret = plutusmap_new();
    return PlutusMap.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = plutusmap_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {PlutusData} key
  * @param {PlutusData} value
  * @returns {PlutusData | undefined}
  */
  insert(key, value) {
    _assertClass(key, PlutusData);
    _assertClass(value, PlutusData);
    const ret = plutusmap_insert(this.ptr, key.ptr, value.ptr);
    return ret === 0 ? void 0 : PlutusData.__wrap(ret);
  }
  /**
  * @param {PlutusData} key
  * @returns {PlutusData | undefined}
  */
  get(key) {
    _assertClass(key, PlutusData);
    const ret = plutusmap_get(this.ptr, key.ptr);
    return ret === 0 ? void 0 : PlutusData.__wrap(ret);
  }
  /**
  * @returns {PlutusList}
  */
  keys() {
    const ret = plutusmap_keys(this.ptr);
    return PlutusList.__wrap(ret);
  }
};
var PlutusScript = class {
  static __wrap(ptr) {
    const obj = Object.create(PlutusScript.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_plutusscript_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      plutusscript_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {PlutusScript}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      plutusscript_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PlutusScript.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      plutusscript_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {PlutusScript}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      plutusscript_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PlutusScript.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  *
  *     * Creates a new Plutus script from the RAW bytes of the compiled script.
  *     * This does NOT include any CBOR encoding around these bytes (e.g. from "cborBytes" in cardano-cli)
  *     * If you creating this from those you should use PlutusScript::from_bytes() instead.
  *
  * @param {Uint8Array} bytes
  * @returns {PlutusScript}
  */
  static new(bytes) {
    const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
    const len0 = WASM_VECTOR_LEN;
    const ret = plutusscript_new(ptr0, len0);
    return PlutusScript.__wrap(ret);
  }
  /**
  *
  *     * Creates a new Plutus script from the RAW bytes of the compiled script.
  *     * This does NOT include any CBOR encoding around these bytes (e.g. from "cborBytes" in cardano-cli)
  *     * If you creating this from those you should use PlutusScript::from_bytes() instead.
  *
  * @param {Uint8Array} bytes
  * @returns {PlutusScript}
  */
  static new_v2(bytes) {
    const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
    const len0 = WASM_VECTOR_LEN;
    const ret = plutusscript_new_v2(ptr0, len0);
    return PlutusScript.__wrap(ret);
  }
  /**
  *
  *     * Creates a new Plutus script from the RAW bytes of the compiled script.
  *     * This does NOT include any CBOR encoding around these bytes (e.g. from "cborBytes" in cardano-cli)
  *     * If you creating this from those you should use PlutusScript::from_bytes() instead.
  *
  * @param {Uint8Array} bytes
  * @param {Language} language
  * @returns {PlutusScript}
  */
  static new_with_version(bytes, language) {
    const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
    const len0 = WASM_VECTOR_LEN;
    _assertClass(language, Language);
    const ret = plutusscript_new_with_version(ptr0, len0, language.ptr);
    return PlutusScript.__wrap(ret);
  }
  /**
  *
  *     * The raw bytes of this compiled Plutus script.
  *     * If you need "cborBytes" for cardano-cli use PlutusScript::to_bytes() instead.
  *
  * @returns {Uint8Array}
  */
  bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      plutusscript_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * Same as `.from_bytes` but will consider the script as requiring the Plutus Language V2
  * @param {Uint8Array} bytes
  * @returns {PlutusScript}
  */
  static from_bytes_v2(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      plutusscript_from_bytes_v2(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PlutusScript.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * Same as `.from_bytes` but will consider the script as requiring the specified language version
  * @param {Uint8Array} bytes
  * @param {Language} language
  * @returns {PlutusScript}
  */
  static from_bytes_with_version(bytes, language) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      _assertClass(language, Language);
      plutusscript_from_bytes_with_version(retptr, ptr0, len0, language.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PlutusScript.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * Same as .from_hex but will consider the script as requiring the specified language version
  * @param {string} hex_str
  * @param {Language} language
  * @returns {PlutusScript}
  */
  static from_hex_with_version(hex_str, language) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      _assertClass(language, Language);
      plutusscript_from_hex_with_version(retptr, ptr0, len0, language.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PlutusScript.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {ScriptHash}
  */
  hash() {
    const ret = plutusscript_hash(this.ptr);
    return ScriptHash.__wrap(ret);
  }
  /**
  * @returns {Language}
  */
  language_version() {
    const ret = plutusscript_language_version(this.ptr);
    return Language.__wrap(ret);
  }
};
var PlutusScriptSource = class {
  static __wrap(ptr) {
    const obj = Object.create(PlutusScriptSource.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_plutusscriptsource_free(ptr);
  }
  /**
  * @param {PlutusScript} script
  * @returns {PlutusScriptSource}
  */
  static new(script) {
    _assertClass(script, PlutusScript);
    const ret = plutusscriptsource_new(script.ptr);
    return PlutusScriptSource.__wrap(ret);
  }
  /**
  * !!! DEPRECATED !!!
  * This constructor has missed information about plutus script language vesrion. That can affect
  * the script data hash calculation.
  * Use `.new_ref_input_with_lang_ver` instead
  * @param {ScriptHash} script_hash
  * @param {TransactionInput} input
  * @returns {PlutusScriptSource}
  */
  static new_ref_input(script_hash, input) {
    _assertClass(script_hash, ScriptHash);
    _assertClass(input, TransactionInput);
    const ret = plutusscriptsource_new_ref_input(script_hash.ptr, input.ptr);
    return PlutusScriptSource.__wrap(ret);
  }
  /**
  * @param {ScriptHash} script_hash
  * @param {TransactionInput} input
  * @param {Language} lang_ver
  * @returns {PlutusScriptSource}
  */
  static new_ref_input_with_lang_ver(script_hash, input, lang_ver) {
    _assertClass(script_hash, ScriptHash);
    _assertClass(input, TransactionInput);
    _assertClass(lang_ver, Language);
    const ret = plutusscriptsource_new_ref_input_with_lang_ver(script_hash.ptr, input.ptr, lang_ver.ptr);
    return PlutusScriptSource.__wrap(ret);
  }
};
var PlutusScripts = class {
  static __wrap(ptr) {
    const obj = Object.create(PlutusScripts.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_plutusscripts_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      plutusscripts_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {PlutusScripts}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      plutusscripts_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PlutusScripts.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      plutusscripts_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {PlutusScripts}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      plutusscripts_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PlutusScripts.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      plutusscripts_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      plutusscripts_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {PlutusScripts}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      plutusscripts_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PlutusScripts.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {PlutusScripts}
  */
  static new() {
    const ret = plutusscripts_new();
    return PlutusScripts.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = plutusscripts_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {PlutusScript}
  */
  get(index) {
    const ret = plutusscripts_get(this.ptr, index);
    return PlutusScript.__wrap(ret);
  }
  /**
  * @param {PlutusScript} elem
  */
  add(elem) {
    _assertClass(elem, PlutusScript);
    plutusscripts_add(this.ptr, elem.ptr);
  }
};
var PlutusWitness = class {
  static __wrap(ptr) {
    const obj = Object.create(PlutusWitness.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_plutuswitness_free(ptr);
  }
  /**
  * @param {PlutusScript} script
  * @param {PlutusData} datum
  * @param {Redeemer} redeemer
  * @returns {PlutusWitness}
  */
  static new(script, datum, redeemer) {
    _assertClass(script, PlutusScript);
    _assertClass(datum, PlutusData);
    _assertClass(redeemer, Redeemer);
    const ret = plutuswitness_new(script.ptr, datum.ptr, redeemer.ptr);
    return PlutusWitness.__wrap(ret);
  }
  /**
  * @param {PlutusScriptSource} script
  * @param {DatumSource} datum
  * @param {Redeemer} redeemer
  * @returns {PlutusWitness}
  */
  static new_with_ref(script, datum, redeemer) {
    _assertClass(script, PlutusScriptSource);
    _assertClass(datum, DatumSource);
    _assertClass(redeemer, Redeemer);
    const ret = plutuswitness_new_with_ref(script.ptr, datum.ptr, redeemer.ptr);
    return PlutusWitness.__wrap(ret);
  }
  /**
  * @param {PlutusScript} script
  * @param {Redeemer} redeemer
  * @returns {PlutusWitness}
  */
  static new_without_datum(script, redeemer) {
    _assertClass(script, PlutusScript);
    _assertClass(redeemer, Redeemer);
    const ret = plutuswitness_new_without_datum(script.ptr, redeemer.ptr);
    return PlutusWitness.__wrap(ret);
  }
  /**
  * @param {PlutusScriptSource} script
  * @param {Redeemer} redeemer
  * @returns {PlutusWitness}
  */
  static new_with_ref_without_datum(script, redeemer) {
    _assertClass(script, PlutusScriptSource);
    _assertClass(redeemer, Redeemer);
    const ret = plutuswitness_new_with_ref_without_datum(script.ptr, redeemer.ptr);
    return PlutusWitness.__wrap(ret);
  }
  /**
  * @returns {PlutusScript | undefined}
  */
  script() {
    const ret = plutuswitness_script(this.ptr);
    return ret === 0 ? void 0 : PlutusScript.__wrap(ret);
  }
  /**
  * @returns {PlutusData | undefined}
  */
  datum() {
    const ret = plutuswitness_datum(this.ptr);
    return ret === 0 ? void 0 : PlutusData.__wrap(ret);
  }
  /**
  * @returns {Redeemer}
  */
  redeemer() {
    const ret = plutuswitness_redeemer(this.ptr);
    return Redeemer.__wrap(ret);
  }
};
var PlutusWitnesses = class {
  static __wrap(ptr) {
    const obj = Object.create(PlutusWitnesses.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_plutuswitnesses_free(ptr);
  }
  /**
  * @returns {PlutusWitnesses}
  */
  static new() {
    const ret = plutuswitnesses_new();
    return PlutusWitnesses.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = plutuswitnesses_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {PlutusWitness}
  */
  get(index) {
    const ret = plutuswitnesses_get(this.ptr, index);
    return PlutusWitness.__wrap(ret);
  }
  /**
  * @param {PlutusWitness} elem
  */
  add(elem) {
    _assertClass(elem, PlutusWitness);
    plutuswitnesses_add(this.ptr, elem.ptr);
  }
};
var Pointer = class {
  static __wrap(ptr) {
    const obj = Object.create(Pointer.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_pointer_free(ptr);
  }
  /**
  * !!! DEPRECATED !!!
  * This constructor uses outdated slot number format for the ttl value, tx_index and cert_index.
  * Use `.new_pointer` instead
  * @param {number} slot
  * @param {number} tx_index
  * @param {number} cert_index
  * @returns {Pointer}
  */
  static new(slot, tx_index, cert_index) {
    const ret = pointer_new(slot, tx_index, cert_index);
    return Pointer.__wrap(ret);
  }
  /**
  * @param {BigNum} slot
  * @param {BigNum} tx_index
  * @param {BigNum} cert_index
  * @returns {Pointer}
  */
  static new_pointer(slot, tx_index, cert_index) {
    _assertClass(slot, BigNum);
    _assertClass(tx_index, BigNum);
    _assertClass(cert_index, BigNum);
    const ret = pointer_new_pointer(slot.ptr, tx_index.ptr, cert_index.ptr);
    return Pointer.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  slot() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      pointer_slot(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return r0 >>> 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {number}
  */
  tx_index() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      pointer_tx_index(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return r0 >>> 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {number}
  */
  cert_index() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      pointer_cert_index(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return r0 >>> 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {BigNum}
  */
  slot_bignum() {
    const ret = pointer_slot_bignum(this.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * @returns {BigNum}
  */
  tx_index_bignum() {
    const ret = pointer_tx_index_bignum(this.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * @returns {BigNum}
  */
  cert_index_bignum() {
    const ret = pointer_cert_index_bignum(this.ptr);
    return BigNum.__wrap(ret);
  }
};
var PointerAddress = class {
  static __wrap(ptr) {
    const obj = Object.create(PointerAddress.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_pointeraddress_free(ptr);
  }
  /**
  * @param {number} network
  * @param {StakeCredential} payment
  * @param {Pointer} stake
  * @returns {PointerAddress}
  */
  static new(network, payment, stake) {
    _assertClass(payment, StakeCredential);
    _assertClass(stake, Pointer);
    const ret = pointeraddress_new(network, payment.ptr, stake.ptr);
    return PointerAddress.__wrap(ret);
  }
  /**
  * @returns {StakeCredential}
  */
  payment_cred() {
    const ret = pointeraddress_payment_cred(this.ptr);
    return StakeCredential.__wrap(ret);
  }
  /**
  * @returns {Pointer}
  */
  stake_pointer() {
    const ret = pointeraddress_stake_pointer(this.ptr);
    return Pointer.__wrap(ret);
  }
  /**
  * @returns {Address}
  */
  to_address() {
    const ret = pointeraddress_to_address(this.ptr);
    return Address.__wrap(ret);
  }
  /**
  * @param {Address} addr
  * @returns {PointerAddress | undefined}
  */
  static from_address(addr) {
    _assertClass(addr, Address);
    const ret = pointeraddress_from_address(addr.ptr);
    return ret === 0 ? void 0 : PointerAddress.__wrap(ret);
  }
};
var PoolMetadata = class {
  static __wrap(ptr) {
    const obj = Object.create(PoolMetadata.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_poolmetadata_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolmetadata_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {PoolMetadata}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      poolmetadata_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PoolMetadata.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolmetadata_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {PoolMetadata}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      poolmetadata_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PoolMetadata.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolmetadata_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolmetadata_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {PoolMetadata}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      poolmetadata_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PoolMetadata.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {URL}
  */
  url() {
    const ret = poolmetadata_url(this.ptr);
    return URL.__wrap(ret);
  }
  /**
  * @returns {PoolMetadataHash}
  */
  pool_metadata_hash() {
    const ret = poolmetadata_pool_metadata_hash(this.ptr);
    return PoolMetadataHash.__wrap(ret);
  }
  /**
  * @param {URL} url
  * @param {PoolMetadataHash} pool_metadata_hash
  * @returns {PoolMetadata}
  */
  static new(url, pool_metadata_hash) {
    _assertClass(url, URL);
    _assertClass(pool_metadata_hash, PoolMetadataHash);
    const ret = poolmetadata_new(url.ptr, pool_metadata_hash.ptr);
    return PoolMetadata.__wrap(ret);
  }
};
var PoolMetadataHash = class {
  static __wrap(ptr) {
    const obj = Object.create(PoolMetadataHash.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_poolmetadatahash_free(ptr);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {PoolMetadataHash}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      poolmetadatahash_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PoolMetadataHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolmetadatahash_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} prefix
  * @returns {string}
  */
  to_bech32(prefix) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(prefix, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      poolmetadatahash_to_bech32(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr1 = r0;
      var len1 = r1;
      if (r3) {
        ptr1 = 0;
        len1 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr1, len1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr1, len1);
    }
  }
  /**
  * @param {string} bech_str
  * @returns {PoolMetadataHash}
  */
  static from_bech32(bech_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      poolmetadatahash_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PoolMetadataHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolmetadatahash_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex
  * @returns {PoolMetadataHash}
  */
  static from_hex(hex) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      poolmetadatahash_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PoolMetadataHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var PoolParams = class {
  static __wrap(ptr) {
    const obj = Object.create(PoolParams.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_poolparams_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolparams_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {PoolParams}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      poolparams_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PoolParams.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolparams_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {PoolParams}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      poolparams_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PoolParams.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolparams_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolparams_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {PoolParams}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      poolparams_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PoolParams.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Ed25519KeyHash}
  */
  operator() {
    const ret = poolparams_operator(this.ptr);
    return Ed25519KeyHash.__wrap(ret);
  }
  /**
  * @returns {VRFKeyHash}
  */
  vrf_keyhash() {
    const ret = poolparams_vrf_keyhash(this.ptr);
    return VRFKeyHash.__wrap(ret);
  }
  /**
  * @returns {BigNum}
  */
  pledge() {
    const ret = poolparams_pledge(this.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * @returns {BigNum}
  */
  cost() {
    const ret = poolparams_cost(this.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * @returns {UnitInterval}
  */
  margin() {
    const ret = poolparams_margin(this.ptr);
    return UnitInterval.__wrap(ret);
  }
  /**
  * @returns {RewardAddress}
  */
  reward_account() {
    const ret = poolparams_reward_account(this.ptr);
    return RewardAddress.__wrap(ret);
  }
  /**
  * @returns {Ed25519KeyHashes}
  */
  pool_owners() {
    const ret = poolparams_pool_owners(this.ptr);
    return Ed25519KeyHashes.__wrap(ret);
  }
  /**
  * @returns {Relays}
  */
  relays() {
    const ret = poolparams_relays(this.ptr);
    return Relays.__wrap(ret);
  }
  /**
  * @returns {PoolMetadata | undefined}
  */
  pool_metadata() {
    const ret = poolparams_pool_metadata(this.ptr);
    return ret === 0 ? void 0 : PoolMetadata.__wrap(ret);
  }
  /**
  * @param {Ed25519KeyHash} operator
  * @param {VRFKeyHash} vrf_keyhash
  * @param {BigNum} pledge
  * @param {BigNum} cost
  * @param {UnitInterval} margin
  * @param {RewardAddress} reward_account
  * @param {Ed25519KeyHashes} pool_owners
  * @param {Relays} relays
  * @param {PoolMetadata | undefined} pool_metadata
  * @returns {PoolParams}
  */
  static new(operator, vrf_keyhash, pledge, cost, margin, reward_account, pool_owners, relays, pool_metadata) {
    _assertClass(operator, Ed25519KeyHash);
    _assertClass(vrf_keyhash, VRFKeyHash);
    _assertClass(pledge, BigNum);
    _assertClass(cost, BigNum);
    _assertClass(margin, UnitInterval);
    _assertClass(reward_account, RewardAddress);
    _assertClass(pool_owners, Ed25519KeyHashes);
    _assertClass(relays, Relays);
    let ptr0 = 0;
    if (!isLikeNone(pool_metadata)) {
      _assertClass(pool_metadata, PoolMetadata);
      ptr0 = pool_metadata.ptr;
      pool_metadata.ptr = 0;
    }
    const ret = poolparams_new(operator.ptr, vrf_keyhash.ptr, pledge.ptr, cost.ptr, margin.ptr, reward_account.ptr, pool_owners.ptr, relays.ptr, ptr0);
    return PoolParams.__wrap(ret);
  }
};
var PoolRegistration = class {
  static __wrap(ptr) {
    const obj = Object.create(PoolRegistration.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_poolregistration_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolregistration_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {PoolRegistration}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      poolregistration_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PoolRegistration.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolregistration_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {PoolRegistration}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      poolregistration_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PoolRegistration.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolregistration_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolregistration_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {PoolRegistration}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      poolregistration_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PoolRegistration.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {PoolParams}
  */
  pool_params() {
    const ret = poolregistration_pool_params(this.ptr);
    return PoolParams.__wrap(ret);
  }
  /**
  * @param {PoolParams} pool_params
  * @returns {PoolRegistration}
  */
  static new(pool_params) {
    _assertClass(pool_params, PoolParams);
    const ret = poolregistration_new(pool_params.ptr);
    return PoolRegistration.__wrap(ret);
  }
};
var PoolRetirement = class {
  static __wrap(ptr) {
    const obj = Object.create(PoolRetirement.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_poolretirement_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolretirement_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {PoolRetirement}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      poolretirement_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PoolRetirement.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolretirement_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {PoolRetirement}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      poolretirement_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PoolRetirement.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolretirement_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      poolretirement_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {PoolRetirement}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      poolretirement_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PoolRetirement.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Ed25519KeyHash}
  */
  pool_keyhash() {
    const ret = poolretirement_pool_keyhash(this.ptr);
    return Ed25519KeyHash.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  epoch() {
    const ret = poolretirement_epoch(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {Ed25519KeyHash} pool_keyhash
  * @param {number} epoch
  * @returns {PoolRetirement}
  */
  static new(pool_keyhash, epoch) {
    _assertClass(pool_keyhash, Ed25519KeyHash);
    const ret = poolretirement_new(pool_keyhash.ptr, epoch);
    return PoolRetirement.__wrap(ret);
  }
};
var PrivateKey = class {
  static __wrap(ptr) {
    const obj = Object.create(PrivateKey.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_privatekey_free(ptr);
  }
  /**
  * @returns {PublicKey}
  */
  to_public() {
    const ret = privatekey_to_public(this.ptr);
    return PublicKey.__wrap(ret);
  }
  /**
  * @returns {PrivateKey}
  */
  static generate_ed25519() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      privatekey_generate_ed25519(retptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PrivateKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {PrivateKey}
  */
  static generate_ed25519extended() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      privatekey_generate_ed25519extended(retptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PrivateKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * Get private key from its bech32 representation
  * ```javascript
  * PrivateKey.from_bech32(&#39;ed25519_sk1ahfetf02qwwg4dkq7mgp4a25lx5vh9920cr5wnxmpzz9906qvm8qwvlts0&#39;);
  * ```
  * For an extended 25519 key
  * ```javascript
  * PrivateKey.from_bech32(&#39;ed25519e_sk1gqwl4szuwwh6d0yk3nsqcc6xxc3fpvjlevgwvt60df59v8zd8f8prazt8ln3lmz096ux3xvhhvm3ca9wj2yctdh3pnw0szrma07rt5gl748fp&#39;);
  * ```
  * @param {string} bech32_str
  * @returns {PrivateKey}
  */
  static from_bech32(bech32_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech32_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      privatekey_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PrivateKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_bech32() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      privatekey_to_bech32(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  as_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      privatekey_as_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {PrivateKey}
  */
  static from_extended_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      privatekey_from_extended_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PrivateKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {PrivateKey}
  */
  static from_normal_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      privatekey_from_normal_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PrivateKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} message
  * @returns {Ed25519Signature}
  */
  sign(message) {
    const ptr0 = passArray8ToWasm0(message, __wbindgen_malloc);
    const len0 = WASM_VECTOR_LEN;
    const ret = privatekey_sign(this.ptr, ptr0, len0);
    return Ed25519Signature.__wrap(ret);
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      privatekey_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {PrivateKey}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      privatekey_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PrivateKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var ProposedProtocolParameterUpdates = class {
  static __wrap(ptr) {
    const obj = Object.create(ProposedProtocolParameterUpdates.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_proposedprotocolparameterupdates_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      proposedprotocolparameterupdates_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {ProposedProtocolParameterUpdates}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      proposedprotocolparameterupdates_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ProposedProtocolParameterUpdates.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      proposedprotocolparameterupdates_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {ProposedProtocolParameterUpdates}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      proposedprotocolparameterupdates_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ProposedProtocolParameterUpdates.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      proposedprotocolparameterupdates_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      proposedprotocolparameterupdates_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {ProposedProtocolParameterUpdates}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      proposedprotocolparameterupdates_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ProposedProtocolParameterUpdates.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {ProposedProtocolParameterUpdates}
  */
  static new() {
    const ret = proposedprotocolparameterupdates_new();
    return ProposedProtocolParameterUpdates.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = proposedprotocolparameterupdates_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {GenesisHash} key
  * @param {ProtocolParamUpdate} value
  * @returns {ProtocolParamUpdate | undefined}
  */
  insert(key, value) {
    _assertClass(key, GenesisHash);
    _assertClass(value, ProtocolParamUpdate);
    const ret = proposedprotocolparameterupdates_insert(this.ptr, key.ptr, value.ptr);
    return ret === 0 ? void 0 : ProtocolParamUpdate.__wrap(ret);
  }
  /**
  * @param {GenesisHash} key
  * @returns {ProtocolParamUpdate | undefined}
  */
  get(key) {
    _assertClass(key, GenesisHash);
    const ret = proposedprotocolparameterupdates_get(this.ptr, key.ptr);
    return ret === 0 ? void 0 : ProtocolParamUpdate.__wrap(ret);
  }
  /**
  * @returns {GenesisHashes}
  */
  keys() {
    const ret = proposedprotocolparameterupdates_keys(this.ptr);
    return GenesisHashes.__wrap(ret);
  }
};
var ProtocolParamUpdate = class {
  static __wrap(ptr) {
    const obj = Object.create(ProtocolParamUpdate.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_protocolparamupdate_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      protocolparamupdate_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {ProtocolParamUpdate}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      protocolparamupdate_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ProtocolParamUpdate.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      protocolparamupdate_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {ProtocolParamUpdate}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      protocolparamupdate_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ProtocolParamUpdate.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      protocolparamupdate_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      protocolparamupdate_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {ProtocolParamUpdate}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      protocolparamupdate_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ProtocolParamUpdate.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {BigNum} minfee_a
  */
  set_minfee_a(minfee_a) {
    _assertClass(minfee_a, BigNum);
    protocolparamupdate_set_minfee_a(this.ptr, minfee_a.ptr);
  }
  /**
  * @returns {BigNum | undefined}
  */
  minfee_a() {
    const ret = protocolparamupdate_minfee_a(this.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * @param {BigNum} minfee_b
  */
  set_minfee_b(minfee_b) {
    _assertClass(minfee_b, BigNum);
    protocolparamupdate_set_minfee_b(this.ptr, minfee_b.ptr);
  }
  /**
  * @returns {BigNum | undefined}
  */
  minfee_b() {
    const ret = protocolparamupdate_minfee_b(this.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * @param {number} max_block_body_size
  */
  set_max_block_body_size(max_block_body_size) {
    protocolparamupdate_set_max_block_body_size(this.ptr, max_block_body_size);
  }
  /**
  * @returns {number | undefined}
  */
  max_block_body_size() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      protocolparamupdate_max_block_body_size(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return r0 === 0 ? void 0 : r1 >>> 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {number} max_tx_size
  */
  set_max_tx_size(max_tx_size) {
    protocolparamupdate_set_max_tx_size(this.ptr, max_tx_size);
  }
  /**
  * @returns {number | undefined}
  */
  max_tx_size() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      protocolparamupdate_max_tx_size(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return r0 === 0 ? void 0 : r1 >>> 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {number} max_block_header_size
  */
  set_max_block_header_size(max_block_header_size) {
    protocolparamupdate_set_max_block_header_size(this.ptr, max_block_header_size);
  }
  /**
  * @returns {number | undefined}
  */
  max_block_header_size() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      protocolparamupdate_max_block_header_size(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return r0 === 0 ? void 0 : r1 >>> 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {BigNum} key_deposit
  */
  set_key_deposit(key_deposit) {
    _assertClass(key_deposit, BigNum);
    protocolparamupdate_set_key_deposit(this.ptr, key_deposit.ptr);
  }
  /**
  * @returns {BigNum | undefined}
  */
  key_deposit() {
    const ret = protocolparamupdate_key_deposit(this.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * @param {BigNum} pool_deposit
  */
  set_pool_deposit(pool_deposit) {
    _assertClass(pool_deposit, BigNum);
    protocolparamupdate_set_pool_deposit(this.ptr, pool_deposit.ptr);
  }
  /**
  * @returns {BigNum | undefined}
  */
  pool_deposit() {
    const ret = protocolparamupdate_pool_deposit(this.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * @param {number} max_epoch
  */
  set_max_epoch(max_epoch) {
    protocolparamupdate_set_max_epoch(this.ptr, max_epoch);
  }
  /**
  * @returns {number | undefined}
  */
  max_epoch() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      protocolparamupdate_max_epoch(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return r0 === 0 ? void 0 : r1 >>> 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {number} n_opt
  */
  set_n_opt(n_opt) {
    protocolparamupdate_set_n_opt(this.ptr, n_opt);
  }
  /**
  * @returns {number | undefined}
  */
  n_opt() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      protocolparamupdate_n_opt(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return r0 === 0 ? void 0 : r1 >>> 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {UnitInterval} pool_pledge_influence
  */
  set_pool_pledge_influence(pool_pledge_influence) {
    _assertClass(pool_pledge_influence, UnitInterval);
    protocolparamupdate_set_pool_pledge_influence(this.ptr, pool_pledge_influence.ptr);
  }
  /**
  * @returns {UnitInterval | undefined}
  */
  pool_pledge_influence() {
    const ret = protocolparamupdate_pool_pledge_influence(this.ptr);
    return ret === 0 ? void 0 : UnitInterval.__wrap(ret);
  }
  /**
  * @param {UnitInterval} expansion_rate
  */
  set_expansion_rate(expansion_rate) {
    _assertClass(expansion_rate, UnitInterval);
    protocolparamupdate_set_expansion_rate(this.ptr, expansion_rate.ptr);
  }
  /**
  * @returns {UnitInterval | undefined}
  */
  expansion_rate() {
    const ret = protocolparamupdate_expansion_rate(this.ptr);
    return ret === 0 ? void 0 : UnitInterval.__wrap(ret);
  }
  /**
  * @param {UnitInterval} treasury_growth_rate
  */
  set_treasury_growth_rate(treasury_growth_rate) {
    _assertClass(treasury_growth_rate, UnitInterval);
    protocolparamupdate_set_treasury_growth_rate(this.ptr, treasury_growth_rate.ptr);
  }
  /**
  * @returns {UnitInterval | undefined}
  */
  treasury_growth_rate() {
    const ret = protocolparamupdate_treasury_growth_rate(this.ptr);
    return ret === 0 ? void 0 : UnitInterval.__wrap(ret);
  }
  /**
  * !!! DEPRECATED !!!
  * Since babbage era this param is outdated. But this param you can meet in a pre-babbage block.
  * @returns {UnitInterval | undefined}
  */
  d() {
    const ret = protocolparamupdate_d(this.ptr);
    return ret === 0 ? void 0 : UnitInterval.__wrap(ret);
  }
  /**
  * !!! DEPRECATED !!!
  * Since babbage era this param is outdated. But this param you can meet in a pre-babbage block.
  * @returns {Nonce | undefined}
  */
  extra_entropy() {
    const ret = protocolparamupdate_extra_entropy(this.ptr);
    return ret === 0 ? void 0 : Nonce.__wrap(ret);
  }
  /**
  * @param {ProtocolVersion} protocol_version
  */
  set_protocol_version(protocol_version) {
    _assertClass(protocol_version, ProtocolVersion);
    protocolparamupdate_set_protocol_version(this.ptr, protocol_version.ptr);
  }
  /**
  * @returns {ProtocolVersion | undefined}
  */
  protocol_version() {
    const ret = protocolparamupdate_protocol_version(this.ptr);
    return ret === 0 ? void 0 : ProtocolVersion.__wrap(ret);
  }
  /**
  * @param {BigNum} min_pool_cost
  */
  set_min_pool_cost(min_pool_cost) {
    _assertClass(min_pool_cost, BigNum);
    protocolparamupdate_set_min_pool_cost(this.ptr, min_pool_cost.ptr);
  }
  /**
  * @returns {BigNum | undefined}
  */
  min_pool_cost() {
    const ret = protocolparamupdate_min_pool_cost(this.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * @param {BigNum} ada_per_utxo_byte
  */
  set_ada_per_utxo_byte(ada_per_utxo_byte) {
    _assertClass(ada_per_utxo_byte, BigNum);
    protocolparamupdate_set_ada_per_utxo_byte(this.ptr, ada_per_utxo_byte.ptr);
  }
  /**
  * @returns {BigNum | undefined}
  */
  ada_per_utxo_byte() {
    const ret = protocolparamupdate_ada_per_utxo_byte(this.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * @param {Costmdls} cost_models
  */
  set_cost_models(cost_models) {
    _assertClass(cost_models, Costmdls);
    protocolparamupdate_set_cost_models(this.ptr, cost_models.ptr);
  }
  /**
  * @returns {Costmdls | undefined}
  */
  cost_models() {
    const ret = protocolparamupdate_cost_models(this.ptr);
    return ret === 0 ? void 0 : Costmdls.__wrap(ret);
  }
  /**
  * @param {ExUnitPrices} execution_costs
  */
  set_execution_costs(execution_costs) {
    _assertClass(execution_costs, ExUnitPrices);
    protocolparamupdate_set_execution_costs(this.ptr, execution_costs.ptr);
  }
  /**
  * @returns {ExUnitPrices | undefined}
  */
  execution_costs() {
    const ret = protocolparamupdate_execution_costs(this.ptr);
    return ret === 0 ? void 0 : ExUnitPrices.__wrap(ret);
  }
  /**
  * @param {ExUnits} max_tx_ex_units
  */
  set_max_tx_ex_units(max_tx_ex_units) {
    _assertClass(max_tx_ex_units, ExUnits);
    protocolparamupdate_set_max_tx_ex_units(this.ptr, max_tx_ex_units.ptr);
  }
  /**
  * @returns {ExUnits | undefined}
  */
  max_tx_ex_units() {
    const ret = protocolparamupdate_max_tx_ex_units(this.ptr);
    return ret === 0 ? void 0 : ExUnits.__wrap(ret);
  }
  /**
  * @param {ExUnits} max_block_ex_units
  */
  set_max_block_ex_units(max_block_ex_units) {
    _assertClass(max_block_ex_units, ExUnits);
    protocolparamupdate_set_max_block_ex_units(this.ptr, max_block_ex_units.ptr);
  }
  /**
  * @returns {ExUnits | undefined}
  */
  max_block_ex_units() {
    const ret = protocolparamupdate_max_block_ex_units(this.ptr);
    return ret === 0 ? void 0 : ExUnits.__wrap(ret);
  }
  /**
  * @param {number} max_value_size
  */
  set_max_value_size(max_value_size) {
    protocolparamupdate_set_max_value_size(this.ptr, max_value_size);
  }
  /**
  * @returns {number | undefined}
  */
  max_value_size() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      protocolparamupdate_max_value_size(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return r0 === 0 ? void 0 : r1 >>> 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {number} collateral_percentage
  */
  set_collateral_percentage(collateral_percentage) {
    protocolparamupdate_set_collateral_percentage(this.ptr, collateral_percentage);
  }
  /**
  * @returns {number | undefined}
  */
  collateral_percentage() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      protocolparamupdate_collateral_percentage(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return r0 === 0 ? void 0 : r1 >>> 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {number} max_collateral_inputs
  */
  set_max_collateral_inputs(max_collateral_inputs) {
    protocolparamupdate_set_max_collateral_inputs(this.ptr, max_collateral_inputs);
  }
  /**
  * @returns {number | undefined}
  */
  max_collateral_inputs() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      protocolparamupdate_max_collateral_inputs(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return r0 === 0 ? void 0 : r1 >>> 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {ProtocolParamUpdate}
  */
  static new() {
    const ret = protocolparamupdate_new();
    return ProtocolParamUpdate.__wrap(ret);
  }
};
var ProtocolVersion = class {
  static __wrap(ptr) {
    const obj = Object.create(ProtocolVersion.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_protocolversion_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      protocolversion_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {ProtocolVersion}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      protocolversion_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ProtocolVersion.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      protocolversion_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {ProtocolVersion}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      protocolversion_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ProtocolVersion.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      protocolversion_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      protocolversion_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {ProtocolVersion}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      protocolversion_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ProtocolVersion.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {number}
  */
  major() {
    const ret = protocolversion_major(this.ptr);
    return ret >>> 0;
  }
  /**
  * @returns {number}
  */
  minor() {
    const ret = protocolversion_minor(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} major
  * @param {number} minor
  * @returns {ProtocolVersion}
  */
  static new(major, minor) {
    const ret = protocolversion_new(major, minor);
    return ProtocolVersion.__wrap(ret);
  }
};
var PublicKey = class {
  static __wrap(ptr) {
    const obj = Object.create(PublicKey.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_publickey_free(ptr);
  }
  /**
  * Get public key from its bech32 representation
  * Example:
  * ```javascript
  * const pkey = PublicKey.from_bech32(&#39;ed25519_pk1dgaagyh470y66p899txcl3r0jaeaxu6yd7z2dxyk55qcycdml8gszkxze2&#39;);
  * ```
  * @param {string} bech32_str
  * @returns {PublicKey}
  */
  static from_bech32(bech32_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech32_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      publickey_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PublicKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_bech32() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      publickey_to_bech32(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  as_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      publickey_as_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {PublicKey}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      publickey_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PublicKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} data
  * @param {Ed25519Signature} signature
  * @returns {boolean}
  */
  verify(data, signature) {
    const ptr0 = passArray8ToWasm0(data, __wbindgen_malloc);
    const len0 = WASM_VECTOR_LEN;
    _assertClass(signature, Ed25519Signature);
    const ret = publickey_verify(this.ptr, ptr0, len0, signature.ptr);
    return ret !== 0;
  }
  /**
  * @returns {Ed25519KeyHash}
  */
  hash() {
    const ret = publickey_hash(this.ptr);
    return Ed25519KeyHash.__wrap(ret);
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      publickey_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {PublicKey}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      publickey_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return PublicKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var PublicKeys = class {
  static __wrap(ptr) {
    const obj = Object.create(PublicKeys.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_publickeys_free(ptr);
  }
  /**
  */
  constructor() {
    const ret = publickeys_new();
    return PublicKeys.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  size() {
    const ret = publickeys_size(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {PublicKey}
  */
  get(index) {
    const ret = publickeys_get(this.ptr, index);
    return PublicKey.__wrap(ret);
  }
  /**
  * @param {PublicKey} key
  */
  add(key) {
    _assertClass(key, PublicKey);
    publickeys_add(this.ptr, key.ptr);
  }
};
var Redeemer = class {
  static __wrap(ptr) {
    const obj = Object.create(Redeemer.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_redeemer_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      redeemer_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Redeemer}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      redeemer_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Redeemer.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      redeemer_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Redeemer}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      redeemer_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Redeemer.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      redeemer_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      redeemer_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Redeemer}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      redeemer_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Redeemer.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {RedeemerTag}
  */
  tag() {
    const ret = redeemer_tag(this.ptr);
    return RedeemerTag.__wrap(ret);
  }
  /**
  * @returns {BigNum}
  */
  index() {
    const ret = redeemer_index(this.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * @returns {PlutusData}
  */
  data() {
    const ret = redeemer_data(this.ptr);
    return PlutusData.__wrap(ret);
  }
  /**
  * @returns {ExUnits}
  */
  ex_units() {
    const ret = redeemer_ex_units(this.ptr);
    return ExUnits.__wrap(ret);
  }
  /**
  * @param {RedeemerTag} tag
  * @param {BigNum} index
  * @param {PlutusData} data
  * @param {ExUnits} ex_units
  * @returns {Redeemer}
  */
  static new(tag, index, data, ex_units) {
    _assertClass(tag, RedeemerTag);
    _assertClass(index, BigNum);
    _assertClass(data, PlutusData);
    _assertClass(ex_units, ExUnits);
    const ret = redeemer_new(tag.ptr, index.ptr, data.ptr, ex_units.ptr);
    return Redeemer.__wrap(ret);
  }
};
var RedeemerTag = class {
  static __wrap(ptr) {
    const obj = Object.create(RedeemerTag.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_redeemertag_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      redeemertag_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {RedeemerTag}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      redeemertag_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return RedeemerTag.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      redeemertag_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {RedeemerTag}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      redeemertag_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return RedeemerTag.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      redeemertag_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      redeemertag_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {RedeemerTag}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      redeemertag_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return RedeemerTag.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {RedeemerTag}
  */
  static new_spend() {
    const ret = redeemertag_new_spend();
    return RedeemerTag.__wrap(ret);
  }
  /**
  * @returns {RedeemerTag}
  */
  static new_mint() {
    const ret = redeemertag_new_mint();
    return RedeemerTag.__wrap(ret);
  }
  /**
  * @returns {RedeemerTag}
  */
  static new_cert() {
    const ret = redeemertag_new_cert();
    return RedeemerTag.__wrap(ret);
  }
  /**
  * @returns {RedeemerTag}
  */
  static new_reward() {
    const ret = redeemertag_new_reward();
    return RedeemerTag.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  kind() {
    const ret = redeemertag_kind(this.ptr);
    return ret >>> 0;
  }
};
var Redeemers = class {
  static __wrap(ptr) {
    const obj = Object.create(Redeemers.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_redeemers_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      redeemers_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Redeemers}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      redeemers_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Redeemers.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      redeemers_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Redeemers}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      redeemers_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Redeemers.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      redeemers_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      redeemers_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Redeemers}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      redeemers_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Redeemers.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Redeemers}
  */
  static new() {
    const ret = redeemers_new();
    return Redeemers.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = redeemers_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {Redeemer}
  */
  get(index) {
    const ret = redeemers_get(this.ptr, index);
    return Redeemer.__wrap(ret);
  }
  /**
  * @param {Redeemer} elem
  */
  add(elem) {
    _assertClass(elem, Redeemer);
    redeemers_add(this.ptr, elem.ptr);
  }
  /**
  * @returns {ExUnits}
  */
  total_ex_units() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      redeemers_total_ex_units(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ExUnits.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var Relay = class {
  static __wrap(ptr) {
    const obj = Object.create(Relay.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_relay_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      relay_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Relay}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      relay_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Relay.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      relay_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Relay}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      relay_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Relay.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      relay_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      relay_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Relay}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      relay_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Relay.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {SingleHostAddr} single_host_addr
  * @returns {Relay}
  */
  static new_single_host_addr(single_host_addr) {
    _assertClass(single_host_addr, SingleHostAddr);
    const ret = relay_new_single_host_addr(single_host_addr.ptr);
    return Relay.__wrap(ret);
  }
  /**
  * @param {SingleHostName} single_host_name
  * @returns {Relay}
  */
  static new_single_host_name(single_host_name) {
    _assertClass(single_host_name, SingleHostName);
    const ret = relay_new_single_host_name(single_host_name.ptr);
    return Relay.__wrap(ret);
  }
  /**
  * @param {MultiHostName} multi_host_name
  * @returns {Relay}
  */
  static new_multi_host_name(multi_host_name) {
    _assertClass(multi_host_name, MultiHostName);
    const ret = relay_new_multi_host_name(multi_host_name.ptr);
    return Relay.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  kind() {
    const ret = relay_kind(this.ptr);
    return ret >>> 0;
  }
  /**
  * @returns {SingleHostAddr | undefined}
  */
  as_single_host_addr() {
    const ret = relay_as_single_host_addr(this.ptr);
    return ret === 0 ? void 0 : SingleHostAddr.__wrap(ret);
  }
  /**
  * @returns {SingleHostName | undefined}
  */
  as_single_host_name() {
    const ret = relay_as_single_host_name(this.ptr);
    return ret === 0 ? void 0 : SingleHostName.__wrap(ret);
  }
  /**
  * @returns {MultiHostName | undefined}
  */
  as_multi_host_name() {
    const ret = relay_as_multi_host_name(this.ptr);
    return ret === 0 ? void 0 : MultiHostName.__wrap(ret);
  }
};
var Relays = class {
  static __wrap(ptr) {
    const obj = Object.create(Relays.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_relays_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      relays_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Relays}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      relays_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Relays.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      relays_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Relays}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      relays_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Relays.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      relays_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      relays_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Relays}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      relays_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Relays.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Relays}
  */
  static new() {
    const ret = relays_new();
    return Relays.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = relays_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {Relay}
  */
  get(index) {
    const ret = relays_get(this.ptr, index);
    return Relay.__wrap(ret);
  }
  /**
  * @param {Relay} elem
  */
  add(elem) {
    _assertClass(elem, Relay);
    relays_add(this.ptr, elem.ptr);
  }
};
var RewardAddress = class {
  static __wrap(ptr) {
    const obj = Object.create(RewardAddress.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_rewardaddress_free(ptr);
  }
  /**
  * @param {number} network
  * @param {StakeCredential} payment
  * @returns {RewardAddress}
  */
  static new(network, payment) {
    _assertClass(payment, StakeCredential);
    const ret = rewardaddress_new(network, payment.ptr);
    return RewardAddress.__wrap(ret);
  }
  /**
  * @returns {StakeCredential}
  */
  payment_cred() {
    const ret = rewardaddress_payment_cred(this.ptr);
    return StakeCredential.__wrap(ret);
  }
  /**
  * @returns {Address}
  */
  to_address() {
    const ret = rewardaddress_to_address(this.ptr);
    return Address.__wrap(ret);
  }
  /**
  * @param {Address} addr
  * @returns {RewardAddress | undefined}
  */
  static from_address(addr) {
    _assertClass(addr, Address);
    const ret = rewardaddress_from_address(addr.ptr);
    return ret === 0 ? void 0 : RewardAddress.__wrap(ret);
  }
};
var RewardAddresses = class {
  static __wrap(ptr) {
    const obj = Object.create(RewardAddresses.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_rewardaddresses_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      rewardaddresses_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {RewardAddresses}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      rewardaddresses_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return RewardAddresses.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      rewardaddresses_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {RewardAddresses}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      rewardaddresses_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return RewardAddresses.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      rewardaddresses_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      rewardaddresses_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {RewardAddresses}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      rewardaddresses_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return RewardAddresses.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {RewardAddresses}
  */
  static new() {
    const ret = rewardaddresses_new();
    return RewardAddresses.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = rewardaddresses_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {RewardAddress}
  */
  get(index) {
    const ret = rewardaddresses_get(this.ptr, index);
    return RewardAddress.__wrap(ret);
  }
  /**
  * @param {RewardAddress} elem
  */
  add(elem) {
    _assertClass(elem, RewardAddress);
    rewardaddresses_add(this.ptr, elem.ptr);
  }
};
var ScriptAll = class {
  static __wrap(ptr) {
    const obj = Object.create(ScriptAll.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_scriptall_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptall_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {ScriptAll}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      scriptall_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptAll.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptall_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {ScriptAll}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scriptall_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptAll.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptall_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptall_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {ScriptAll}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scriptall_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptAll.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {NativeScripts}
  */
  native_scripts() {
    const ret = scriptall_native_scripts(this.ptr);
    return NativeScripts.__wrap(ret);
  }
  /**
  * @param {NativeScripts} native_scripts
  * @returns {ScriptAll}
  */
  static new(native_scripts) {
    _assertClass(native_scripts, NativeScripts);
    const ret = scriptall_new(native_scripts.ptr);
    return ScriptAll.__wrap(ret);
  }
};
var ScriptAny = class {
  static __wrap(ptr) {
    const obj = Object.create(ScriptAny.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_scriptany_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptany_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {ScriptAny}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      scriptany_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptAny.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptany_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {ScriptAny}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scriptany_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptAny.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptany_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptany_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {ScriptAny}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scriptany_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptAny.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {NativeScripts}
  */
  native_scripts() {
    const ret = scriptany_native_scripts(this.ptr);
    return NativeScripts.__wrap(ret);
  }
  /**
  * @param {NativeScripts} native_scripts
  * @returns {ScriptAny}
  */
  static new(native_scripts) {
    _assertClass(native_scripts, NativeScripts);
    const ret = scriptany_new(native_scripts.ptr);
    return ScriptAny.__wrap(ret);
  }
};
var ScriptDataHash = class {
  static __wrap(ptr) {
    const obj = Object.create(ScriptDataHash.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_scriptdatahash_free(ptr);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {ScriptDataHash}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      scriptdatahash_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptDataHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptdatahash_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} prefix
  * @returns {string}
  */
  to_bech32(prefix) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(prefix, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scriptdatahash_to_bech32(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr1 = r0;
      var len1 = r1;
      if (r3) {
        ptr1 = 0;
        len1 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr1, len1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr1, len1);
    }
  }
  /**
  * @param {string} bech_str
  * @returns {ScriptDataHash}
  */
  static from_bech32(bech_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scriptdatahash_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptDataHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptdatahash_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex
  * @returns {ScriptDataHash}
  */
  static from_hex(hex) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scriptdatahash_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptDataHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var ScriptHash = class {
  static __wrap(ptr) {
    const obj = Object.create(ScriptHash.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_scripthash_free(ptr);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {ScriptHash}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      scripthash_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scripthash_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} prefix
  * @returns {string}
  */
  to_bech32(prefix) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(prefix, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scripthash_to_bech32(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr1 = r0;
      var len1 = r1;
      if (r3) {
        ptr1 = 0;
        len1 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr1, len1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr1, len1);
    }
  }
  /**
  * @param {string} bech_str
  * @returns {ScriptHash}
  */
  static from_bech32(bech_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scripthash_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scripthash_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex
  * @returns {ScriptHash}
  */
  static from_hex(hex) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scripthash_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var ScriptHashes = class {
  static __wrap(ptr) {
    const obj = Object.create(ScriptHashes.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_scripthashes_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scripthashes_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {ScriptHashes}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      scripthashes_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptHashes.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scripthashes_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {ScriptHashes}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scripthashes_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptHashes.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scripthashes_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scripthashes_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {ScriptHashes}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scripthashes_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptHashes.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {ScriptHashes}
  */
  static new() {
    const ret = scripthashes_new();
    return ScriptHashes.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = scripthashes_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {ScriptHash}
  */
  get(index) {
    const ret = scripthashes_get(this.ptr, index);
    return ScriptHash.__wrap(ret);
  }
  /**
  * @param {ScriptHash} elem
  */
  add(elem) {
    _assertClass(elem, ScriptHash);
    scripthashes_add(this.ptr, elem.ptr);
  }
};
var ScriptNOfK = class {
  static __wrap(ptr) {
    const obj = Object.create(ScriptNOfK.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_scriptnofk_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptnofk_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {ScriptNOfK}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      scriptnofk_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptNOfK.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptnofk_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {ScriptNOfK}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scriptnofk_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptNOfK.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptnofk_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptnofk_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {ScriptNOfK}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scriptnofk_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptNOfK.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {number}
  */
  n() {
    const ret = scriptnofk_n(this.ptr);
    return ret >>> 0;
  }
  /**
  * @returns {NativeScripts}
  */
  native_scripts() {
    const ret = scriptnofk_native_scripts(this.ptr);
    return NativeScripts.__wrap(ret);
  }
  /**
  * @param {number} n
  * @param {NativeScripts} native_scripts
  * @returns {ScriptNOfK}
  */
  static new(n, native_scripts) {
    _assertClass(native_scripts, NativeScripts);
    const ret = scriptnofk_new(n, native_scripts.ptr);
    return ScriptNOfK.__wrap(ret);
  }
};
var ScriptPubkey = class {
  static __wrap(ptr) {
    const obj = Object.create(ScriptPubkey.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_scriptpubkey_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptpubkey_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {ScriptPubkey}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      scriptpubkey_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptPubkey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptpubkey_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {ScriptPubkey}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scriptpubkey_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptPubkey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptpubkey_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptpubkey_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {ScriptPubkey}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scriptpubkey_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptPubkey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Ed25519KeyHash}
  */
  addr_keyhash() {
    const ret = scriptpubkey_addr_keyhash(this.ptr);
    return Ed25519KeyHash.__wrap(ret);
  }
  /**
  * @param {Ed25519KeyHash} addr_keyhash
  * @returns {ScriptPubkey}
  */
  static new(addr_keyhash) {
    _assertClass(addr_keyhash, Ed25519KeyHash);
    const ret = scriptpubkey_new(addr_keyhash.ptr);
    return ScriptPubkey.__wrap(ret);
  }
};
var ScriptRef = class {
  static __wrap(ptr) {
    const obj = Object.create(ScriptRef.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_scriptref_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptref_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {ScriptRef}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      scriptref_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptRef.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptref_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {ScriptRef}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scriptref_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptRef.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptref_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      scriptref_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {ScriptRef}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      scriptref_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return ScriptRef.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {NativeScript} native_script
  * @returns {ScriptRef}
  */
  static new_native_script(native_script) {
    _assertClass(native_script, NativeScript);
    const ret = scriptref_new_native_script(native_script.ptr);
    return ScriptRef.__wrap(ret);
  }
  /**
  * @param {PlutusScript} plutus_script
  * @returns {ScriptRef}
  */
  static new_plutus_script(plutus_script) {
    _assertClass(plutus_script, PlutusScript);
    const ret = scriptref_new_plutus_script(plutus_script.ptr);
    return ScriptRef.__wrap(ret);
  }
  /**
  * @returns {boolean}
  */
  is_native_script() {
    const ret = scriptref_is_native_script(this.ptr);
    return ret !== 0;
  }
  /**
  * @returns {boolean}
  */
  is_plutus_script() {
    const ret = scriptref_is_plutus_script(this.ptr);
    return ret !== 0;
  }
  /**
  * @returns {NativeScript | undefined}
  */
  native_script() {
    const ret = scriptref_native_script(this.ptr);
    return ret === 0 ? void 0 : NativeScript.__wrap(ret);
  }
  /**
  * @returns {PlutusScript | undefined}
  */
  plutus_script() {
    const ret = scriptref_plutus_script(this.ptr);
    return ret === 0 ? void 0 : PlutusScript.__wrap(ret);
  }
};
var SingleHostAddr = class {
  static __wrap(ptr) {
    const obj = Object.create(SingleHostAddr.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_singlehostaddr_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      singlehostaddr_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {SingleHostAddr}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      singlehostaddr_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return SingleHostAddr.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      singlehostaddr_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {SingleHostAddr}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      singlehostaddr_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return SingleHostAddr.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      singlehostaddr_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      singlehostaddr_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {SingleHostAddr}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      singlehostaddr_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return SingleHostAddr.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {number | undefined}
  */
  port() {
    const ret = singlehostaddr_port(this.ptr);
    return ret === 16777215 ? void 0 : ret;
  }
  /**
  * @returns {Ipv4 | undefined}
  */
  ipv4() {
    const ret = singlehostaddr_ipv4(this.ptr);
    return ret === 0 ? void 0 : Ipv4.__wrap(ret);
  }
  /**
  * @returns {Ipv6 | undefined}
  */
  ipv6() {
    const ret = singlehostaddr_ipv6(this.ptr);
    return ret === 0 ? void 0 : Ipv6.__wrap(ret);
  }
  /**
  * @param {number | undefined} port
  * @param {Ipv4 | undefined} ipv4
  * @param {Ipv6 | undefined} ipv6
  * @returns {SingleHostAddr}
  */
  static new(port, ipv4, ipv6) {
    let ptr0 = 0;
    if (!isLikeNone(ipv4)) {
      _assertClass(ipv4, Ipv4);
      ptr0 = ipv4.ptr;
      ipv4.ptr = 0;
    }
    let ptr1 = 0;
    if (!isLikeNone(ipv6)) {
      _assertClass(ipv6, Ipv6);
      ptr1 = ipv6.ptr;
      ipv6.ptr = 0;
    }
    const ret = singlehostaddr_new(isLikeNone(port) ? 16777215 : port, ptr0, ptr1);
    return SingleHostAddr.__wrap(ret);
  }
};
var SingleHostName = class {
  static __wrap(ptr) {
    const obj = Object.create(SingleHostName.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_singlehostname_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      singlehostname_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {SingleHostName}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      singlehostname_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return SingleHostName.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      singlehostname_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {SingleHostName}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      singlehostname_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return SingleHostName.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      singlehostname_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      singlehostname_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {SingleHostName}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      singlehostname_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return SingleHostName.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {number | undefined}
  */
  port() {
    const ret = singlehostname_port(this.ptr);
    return ret === 16777215 ? void 0 : ret;
  }
  /**
  * @returns {DNSRecordAorAAAA}
  */
  dns_name() {
    const ret = singlehostname_dns_name(this.ptr);
    return DNSRecordAorAAAA.__wrap(ret);
  }
  /**
  * @param {number | undefined} port
  * @param {DNSRecordAorAAAA} dns_name
  * @returns {SingleHostName}
  */
  static new(port, dns_name) {
    _assertClass(dns_name, DNSRecordAorAAAA);
    const ret = singlehostname_new(isLikeNone(port) ? 16777215 : port, dns_name.ptr);
    return SingleHostName.__wrap(ret);
  }
};
var StakeCredential = class {
  static __wrap(ptr) {
    const obj = Object.create(StakeCredential.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_stakecredential_free(ptr);
  }
  /**
  * @param {Ed25519KeyHash} hash
  * @returns {StakeCredential}
  */
  static from_keyhash(hash) {
    _assertClass(hash, Ed25519KeyHash);
    const ret = stakecredential_from_keyhash(hash.ptr);
    return StakeCredential.__wrap(ret);
  }
  /**
  * @param {ScriptHash} hash
  * @returns {StakeCredential}
  */
  static from_scripthash(hash) {
    _assertClass(hash, ScriptHash);
    const ret = stakecredential_from_scripthash(hash.ptr);
    return StakeCredential.__wrap(ret);
  }
  /**
  * @returns {Ed25519KeyHash | undefined}
  */
  to_keyhash() {
    const ret = stakecredential_to_keyhash(this.ptr);
    return ret === 0 ? void 0 : Ed25519KeyHash.__wrap(ret);
  }
  /**
  * @returns {ScriptHash | undefined}
  */
  to_scripthash() {
    const ret = stakecredential_to_scripthash(this.ptr);
    return ret === 0 ? void 0 : ScriptHash.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  kind() {
    const ret = stakecredential_kind(this.ptr);
    return ret >>> 0;
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakecredential_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {StakeCredential}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      stakecredential_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return StakeCredential.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakecredential_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {StakeCredential}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      stakecredential_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return StakeCredential.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakecredential_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakecredential_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {StakeCredential}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      stakecredential_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return StakeCredential.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var StakeCredentials = class {
  static __wrap(ptr) {
    const obj = Object.create(StakeCredentials.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_stakecredentials_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakecredentials_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {StakeCredentials}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      stakecredentials_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return StakeCredentials.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakecredentials_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {StakeCredentials}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      stakecredentials_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return StakeCredentials.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakecredentials_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakecredentials_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {StakeCredentials}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      stakecredentials_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return StakeCredentials.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {StakeCredentials}
  */
  static new() {
    const ret = stakecredentials_new();
    return StakeCredentials.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = stakecredentials_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {StakeCredential}
  */
  get(index) {
    const ret = stakecredentials_get(this.ptr, index);
    return StakeCredential.__wrap(ret);
  }
  /**
  * @param {StakeCredential} elem
  */
  add(elem) {
    _assertClass(elem, StakeCredential);
    stakecredentials_add(this.ptr, elem.ptr);
  }
};
var StakeDelegation = class {
  static __wrap(ptr) {
    const obj = Object.create(StakeDelegation.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_stakedelegation_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakedelegation_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {StakeDelegation}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      stakedelegation_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return StakeDelegation.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakedelegation_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {StakeDelegation}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      stakedelegation_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return StakeDelegation.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakedelegation_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakedelegation_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {StakeDelegation}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      stakedelegation_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return StakeDelegation.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {StakeCredential}
  */
  stake_credential() {
    const ret = stakedelegation_stake_credential(this.ptr);
    return StakeCredential.__wrap(ret);
  }
  /**
  * @returns {Ed25519KeyHash}
  */
  pool_keyhash() {
    const ret = stakedelegation_pool_keyhash(this.ptr);
    return Ed25519KeyHash.__wrap(ret);
  }
  /**
  * @param {StakeCredential} stake_credential
  * @param {Ed25519KeyHash} pool_keyhash
  * @returns {StakeDelegation}
  */
  static new(stake_credential, pool_keyhash) {
    _assertClass(stake_credential, StakeCredential);
    _assertClass(pool_keyhash, Ed25519KeyHash);
    const ret = stakedelegation_new(stake_credential.ptr, pool_keyhash.ptr);
    return StakeDelegation.__wrap(ret);
  }
};
var StakeDeregistration = class {
  static __wrap(ptr) {
    const obj = Object.create(StakeDeregistration.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_stakederegistration_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakederegistration_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {StakeDeregistration}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      stakederegistration_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return StakeDeregistration.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakederegistration_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {StakeDeregistration}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      stakederegistration_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return StakeDeregistration.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakederegistration_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakederegistration_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {StakeDeregistration}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      stakederegistration_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return StakeDeregistration.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {StakeCredential}
  */
  stake_credential() {
    const ret = stakederegistration_stake_credential(this.ptr);
    return StakeCredential.__wrap(ret);
  }
  /**
  * @param {StakeCredential} stake_credential
  * @returns {StakeDeregistration}
  */
  static new(stake_credential) {
    _assertClass(stake_credential, StakeCredential);
    const ret = stakederegistration_new(stake_credential.ptr);
    return StakeDeregistration.__wrap(ret);
  }
};
var StakeRegistration = class {
  static __wrap(ptr) {
    const obj = Object.create(StakeRegistration.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_stakeregistration_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakeregistration_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {StakeRegistration}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      stakeregistration_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return StakeRegistration.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakeregistration_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {StakeRegistration}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      stakeregistration_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return StakeRegistration.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakeregistration_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      stakeregistration_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {StakeRegistration}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      stakeregistration_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return StakeRegistration.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {StakeCredential}
  */
  stake_credential() {
    const ret = stakeregistration_stake_credential(this.ptr);
    return StakeCredential.__wrap(ret);
  }
  /**
  * @param {StakeCredential} stake_credential
  * @returns {StakeRegistration}
  */
  static new(stake_credential) {
    _assertClass(stake_credential, StakeCredential);
    const ret = stakeregistration_new(stake_credential.ptr);
    return StakeRegistration.__wrap(ret);
  }
};
var Strings = class {
  static __wrap(ptr) {
    const obj = Object.create(Strings.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_strings_free(ptr);
  }
  /**
  * @returns {Strings}
  */
  static new() {
    const ret = strings_new();
    return Strings.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = strings_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {string}
  */
  get(index) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      strings_get(retptr, this.ptr, index);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} elem
  */
  add(elem) {
    const ptr0 = passStringToWasm0(elem, __wbindgen_malloc, __wbindgen_realloc);
    const len0 = WASM_VECTOR_LEN;
    strings_add(this.ptr, ptr0, len0);
  }
};
var TimelockExpiry = class {
  static __wrap(ptr) {
    const obj = Object.create(TimelockExpiry.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_timelockexpiry_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      timelockexpiry_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {TimelockExpiry}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      timelockexpiry_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TimelockExpiry.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      timelockexpiry_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {TimelockExpiry}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      timelockexpiry_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TimelockExpiry.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      timelockexpiry_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      timelockexpiry_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {TimelockExpiry}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      timelockexpiry_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TimelockExpiry.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {number}
  */
  slot() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      timelockexpiry_slot(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return r0 >>> 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {BigNum}
  */
  slot_bignum() {
    const ret = timelockexpiry_slot_bignum(this.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * !!! DEPRECATED !!!
  * This constructor uses outdated slot number format.
  * Use `.new_timelockexpiry` instead
  * @param {number} slot
  * @returns {TimelockExpiry}
  */
  static new(slot) {
    const ret = timelockexpiry_new(slot);
    return TimelockExpiry.__wrap(ret);
  }
  /**
  * @param {BigNum} slot
  * @returns {TimelockExpiry}
  */
  static new_timelockexpiry(slot) {
    _assertClass(slot, BigNum);
    const ret = timelockexpiry_new_timelockexpiry(slot.ptr);
    return TimelockExpiry.__wrap(ret);
  }
};
var TimelockStart = class {
  static __wrap(ptr) {
    const obj = Object.create(TimelockStart.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_timelockstart_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      timelockstart_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {TimelockStart}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      timelockstart_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TimelockStart.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      timelockstart_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {TimelockStart}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      timelockstart_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TimelockStart.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      timelockstart_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      timelockstart_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {TimelockStart}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      timelockstart_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TimelockStart.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * !!! DEPRECATED !!!
  * Returns a Slot32 (u32) value in case the underlying original BigNum (u64) value is within the limits.
  * Otherwise will just raise an error.
  * Use `.slot_bignum` instead
  * @returns {number}
  */
  slot() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      timelockstart_slot(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return r0 >>> 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {BigNum}
  */
  slot_bignum() {
    const ret = timelockstart_slot_bignum(this.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * !!! DEPRECATED !!!
  * This constructor uses outdated slot number format.
  * Use `.new_timelockstart` instead.
  * @param {number} slot
  * @returns {TimelockStart}
  */
  static new(slot) {
    const ret = timelockstart_new(slot);
    return TimelockStart.__wrap(ret);
  }
  /**
  * @param {BigNum} slot
  * @returns {TimelockStart}
  */
  static new_timelockstart(slot) {
    _assertClass(slot, BigNum);
    const ret = timelockstart_new_timelockstart(slot.ptr);
    return TimelockStart.__wrap(ret);
  }
};
var Transaction = class {
  static __wrap(ptr) {
    const obj = Object.create(Transaction.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transaction_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transaction_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Transaction}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      transaction_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Transaction.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transaction_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Transaction}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transaction_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Transaction.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transaction_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transaction_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Transaction}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transaction_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Transaction.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {TransactionBody}
  */
  body() {
    const ret = transaction_body(this.ptr);
    return TransactionBody.__wrap(ret);
  }
  /**
  * @returns {TransactionWitnessSet}
  */
  witness_set() {
    const ret = transaction_witness_set(this.ptr);
    return TransactionWitnessSet.__wrap(ret);
  }
  /**
  * @returns {boolean}
  */
  is_valid() {
    const ret = transaction_is_valid(this.ptr);
    return ret !== 0;
  }
  /**
  * @returns {AuxiliaryData | undefined}
  */
  auxiliary_data() {
    const ret = transaction_auxiliary_data(this.ptr);
    return ret === 0 ? void 0 : AuxiliaryData.__wrap(ret);
  }
  /**
  * @param {boolean} valid
  */
  set_is_valid(valid) {
    transaction_set_is_valid(this.ptr, valid);
  }
  /**
  * @param {TransactionBody} body
  * @param {TransactionWitnessSet} witness_set
  * @param {AuxiliaryData | undefined} auxiliary_data
  * @returns {Transaction}
  */
  static new(body, witness_set, auxiliary_data) {
    _assertClass(body, TransactionBody);
    _assertClass(witness_set, TransactionWitnessSet);
    let ptr0 = 0;
    if (!isLikeNone(auxiliary_data)) {
      _assertClass(auxiliary_data, AuxiliaryData);
      ptr0 = auxiliary_data.ptr;
      auxiliary_data.ptr = 0;
    }
    const ret = transaction_new(body.ptr, witness_set.ptr, ptr0);
    return Transaction.__wrap(ret);
  }
};
var TransactionBatch = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionBatch.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionbatch_free(ptr);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = transactionbatch_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {Transaction}
  */
  get(index) {
    const ret = transactionbatch_get(this.ptr, index);
    return Transaction.__wrap(ret);
  }
};
var TransactionBatchList = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionBatchList.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionbatchlist_free(ptr);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = transactionbatchlist_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {TransactionBatch}
  */
  get(index) {
    const ret = transactionbatchlist_get(this.ptr, index);
    return TransactionBatch.__wrap(ret);
  }
};
var TransactionBodies = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionBodies.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionbodies_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbodies_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {TransactionBodies}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      transactionbodies_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionBodies.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbodies_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {TransactionBodies}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionbodies_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionBodies.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbodies_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbodies_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {TransactionBodies}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionbodies_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionBodies.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {TransactionBodies}
  */
  static new() {
    const ret = transactionbodies_new();
    return TransactionBodies.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = transactionbodies_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {TransactionBody}
  */
  get(index) {
    const ret = transactionbodies_get(this.ptr, index);
    return TransactionBody.__wrap(ret);
  }
  /**
  * @param {TransactionBody} elem
  */
  add(elem) {
    _assertClass(elem, TransactionBody);
    transactionbodies_add(this.ptr, elem.ptr);
  }
};
var TransactionBody = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionBody.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionbody_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbody_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {TransactionBody}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      transactionbody_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionBody.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbody_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {TransactionBody}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionbody_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionBody.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbody_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbody_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {TransactionBody}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionbody_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionBody.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {TransactionInputs}
  */
  inputs() {
    const ret = transactionbody_inputs(this.ptr);
    return TransactionInputs.__wrap(ret);
  }
  /**
  * @returns {TransactionOutputs}
  */
  outputs() {
    const ret = transactionbody_outputs(this.ptr);
    return TransactionOutputs.__wrap(ret);
  }
  /**
  * @returns {BigNum}
  */
  fee() {
    const ret = transactionbody_fee(this.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * !!! DEPRECATED !!!
  * Returns a Slot32 (u32) value in case the underlying original BigNum (u64) value is within the limits.
  * Otherwise will just raise an error.
  * @returns {number | undefined}
  */
  ttl() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbody_ttl(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      if (r3) {
        throw takeObject(r2);
      }
      return r0 === 0 ? void 0 : r1 >>> 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {BigNum | undefined}
  */
  ttl_bignum() {
    const ret = transactionbody_ttl_bignum(this.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * @param {BigNum} ttl
  */
  set_ttl(ttl) {
    _assertClass(ttl, BigNum);
    transactionbody_set_ttl(this.ptr, ttl.ptr);
  }
  /**
  */
  remove_ttl() {
    transactionbody_remove_ttl(this.ptr);
  }
  /**
  * @param {Certificates} certs
  */
  set_certs(certs) {
    _assertClass(certs, Certificates);
    transactionbody_set_certs(this.ptr, certs.ptr);
  }
  /**
  * @returns {Certificates | undefined}
  */
  certs() {
    const ret = transactionbody_certs(this.ptr);
    return ret === 0 ? void 0 : Certificates.__wrap(ret);
  }
  /**
  * @param {Withdrawals} withdrawals
  */
  set_withdrawals(withdrawals) {
    _assertClass(withdrawals, Withdrawals);
    transactionbody_set_withdrawals(this.ptr, withdrawals.ptr);
  }
  /**
  * @returns {Withdrawals | undefined}
  */
  withdrawals() {
    const ret = transactionbody_withdrawals(this.ptr);
    return ret === 0 ? void 0 : Withdrawals.__wrap(ret);
  }
  /**
  * @param {Update} update
  */
  set_update(update) {
    _assertClass(update, Update);
    transactionbody_set_update(this.ptr, update.ptr);
  }
  /**
  * @returns {Update | undefined}
  */
  update() {
    const ret = transactionbody_update(this.ptr);
    return ret === 0 ? void 0 : Update.__wrap(ret);
  }
  /**
  * @param {AuxiliaryDataHash} auxiliary_data_hash
  */
  set_auxiliary_data_hash(auxiliary_data_hash) {
    _assertClass(auxiliary_data_hash, AuxiliaryDataHash);
    transactionbody_set_auxiliary_data_hash(this.ptr, auxiliary_data_hash.ptr);
  }
  /**
  * @returns {AuxiliaryDataHash | undefined}
  */
  auxiliary_data_hash() {
    const ret = transactionbody_auxiliary_data_hash(this.ptr);
    return ret === 0 ? void 0 : AuxiliaryDataHash.__wrap(ret);
  }
  /**
  * !!! DEPRECATED !!!
  * Uses outdated slot number format.
  * @param {number} validity_start_interval
  */
  set_validity_start_interval(validity_start_interval) {
    transactionbody_set_validity_start_interval(this.ptr, validity_start_interval);
  }
  /**
  * @param {BigNum} validity_start_interval
  */
  set_validity_start_interval_bignum(validity_start_interval) {
    _assertClass(validity_start_interval, BigNum);
    var ptr0 = validity_start_interval.ptr;
    validity_start_interval.ptr = 0;
    transactionbody_set_validity_start_interval_bignum(this.ptr, ptr0);
  }
  /**
  * @returns {BigNum | undefined}
  */
  validity_start_interval_bignum() {
    const ret = transactionbody_validity_start_interval_bignum(this.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * !!! DEPRECATED !!!
  * Returns a Option<Slot32> (u32) value in case the underlying original Option<BigNum> (u64) value is within the limits.
  * Otherwise will just raise an error.
  * Use `.validity_start_interval_bignum` instead.
  * @returns {number | undefined}
  */
  validity_start_interval() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbody_validity_start_interval(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      if (r3) {
        throw takeObject(r2);
      }
      return r0 === 0 ? void 0 : r1 >>> 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Mint} mint
  */
  set_mint(mint) {
    _assertClass(mint, Mint);
    transactionbody_set_mint(this.ptr, mint.ptr);
  }
  /**
  * @returns {Mint | undefined}
  */
  mint() {
    const ret = transactionbody_mint(this.ptr);
    return ret === 0 ? void 0 : Mint.__wrap(ret);
  }
  /**
  * This function returns the mint value of the transaction
  * Use `.mint()` instead.
  * @returns {Mint | undefined}
  */
  multiassets() {
    const ret = transactionbody_multiassets(this.ptr);
    return ret === 0 ? void 0 : Mint.__wrap(ret);
  }
  /**
  * @param {TransactionInputs} reference_inputs
  */
  set_reference_inputs(reference_inputs) {
    _assertClass(reference_inputs, TransactionInputs);
    transactionbody_set_reference_inputs(this.ptr, reference_inputs.ptr);
  }
  /**
  * @returns {TransactionInputs | undefined}
  */
  reference_inputs() {
    const ret = transactionbody_reference_inputs(this.ptr);
    return ret === 0 ? void 0 : TransactionInputs.__wrap(ret);
  }
  /**
  * @param {ScriptDataHash} script_data_hash
  */
  set_script_data_hash(script_data_hash) {
    _assertClass(script_data_hash, ScriptDataHash);
    transactionbody_set_script_data_hash(this.ptr, script_data_hash.ptr);
  }
  /**
  * @returns {ScriptDataHash | undefined}
  */
  script_data_hash() {
    const ret = transactionbody_script_data_hash(this.ptr);
    return ret === 0 ? void 0 : ScriptDataHash.__wrap(ret);
  }
  /**
  * @param {TransactionInputs} collateral
  */
  set_collateral(collateral) {
    _assertClass(collateral, TransactionInputs);
    transactionbody_set_collateral(this.ptr, collateral.ptr);
  }
  /**
  * @returns {TransactionInputs | undefined}
  */
  collateral() {
    const ret = transactionbody_collateral(this.ptr);
    return ret === 0 ? void 0 : TransactionInputs.__wrap(ret);
  }
  /**
  * @param {Ed25519KeyHashes} required_signers
  */
  set_required_signers(required_signers) {
    _assertClass(required_signers, Ed25519KeyHashes);
    transactionbody_set_required_signers(this.ptr, required_signers.ptr);
  }
  /**
  * @returns {Ed25519KeyHashes | undefined}
  */
  required_signers() {
    const ret = transactionbody_required_signers(this.ptr);
    return ret === 0 ? void 0 : Ed25519KeyHashes.__wrap(ret);
  }
  /**
  * @param {NetworkId} network_id
  */
  set_network_id(network_id) {
    _assertClass(network_id, NetworkId);
    transactionbody_set_network_id(this.ptr, network_id.ptr);
  }
  /**
  * @returns {NetworkId | undefined}
  */
  network_id() {
    const ret = transactionbody_network_id(this.ptr);
    return ret === 0 ? void 0 : NetworkId.__wrap(ret);
  }
  /**
  * @param {TransactionOutput} collateral_return
  */
  set_collateral_return(collateral_return) {
    _assertClass(collateral_return, TransactionOutput);
    transactionbody_set_collateral_return(this.ptr, collateral_return.ptr);
  }
  /**
  * @returns {TransactionOutput | undefined}
  */
  collateral_return() {
    const ret = transactionbody_collateral_return(this.ptr);
    return ret === 0 ? void 0 : TransactionOutput.__wrap(ret);
  }
  /**
  * @param {BigNum} total_collateral
  */
  set_total_collateral(total_collateral) {
    _assertClass(total_collateral, BigNum);
    transactionbody_set_total_collateral(this.ptr, total_collateral.ptr);
  }
  /**
  * @returns {BigNum | undefined}
  */
  total_collateral() {
    const ret = transactionbody_total_collateral(this.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * !!! DEPRECATED !!!
  * This constructor uses outdated slot number format for the ttl value.
  * Use `.new_tx_body` and then `.set_ttl` instead
  * @param {TransactionInputs} inputs
  * @param {TransactionOutputs} outputs
  * @param {BigNum} fee
  * @param {number | undefined} ttl
  * @returns {TransactionBody}
  */
  static new(inputs, outputs, fee, ttl) {
    _assertClass(inputs, TransactionInputs);
    _assertClass(outputs, TransactionOutputs);
    _assertClass(fee, BigNum);
    const ret = transactionbody_new(inputs.ptr, outputs.ptr, fee.ptr, !isLikeNone(ttl), isLikeNone(ttl) ? 0 : ttl);
    return TransactionBody.__wrap(ret);
  }
  /**
  * Returns a new TransactionBody.
  * In the new version of "new" we removed optional ttl for support it by wasm_bingen.
  * Your can use "set_ttl" and "remove_ttl" to set a new value for ttl or set it as None.
  * @param {TransactionInputs} inputs
  * @param {TransactionOutputs} outputs
  * @param {BigNum} fee
  * @returns {TransactionBody}
  */
  static new_tx_body(inputs, outputs, fee) {
    _assertClass(inputs, TransactionInputs);
    _assertClass(outputs, TransactionOutputs);
    _assertClass(fee, BigNum);
    const ret = transactionbody_new_tx_body(inputs.ptr, outputs.ptr, fee.ptr);
    return TransactionBody.__wrap(ret);
  }
};
var TransactionBuilder = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionBuilder.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionbuilder_free(ptr);
  }
  /**
  * This automatically selects and adds inputs from {inputs} consisting of just enough to cover
  * the outputs that have already been added.
  * This should be called after adding all certs/outputs/etc and will be an error otherwise.
  * Uses CIP2: https://github.com/cardano-foundation/CIPs/blob/master/CIP-0002/CIP-0002.md
  * Adding a change output must be called after via TransactionBuilder::add_change_if_needed()
  * This function, diverging from CIP2, takes into account fees and will attempt to add additional
  * inputs to cover the minimum fees. This does not, however, set the txbuilder's fee.
  * @param {TransactionUnspentOutputs} inputs
  * @param {number} strategy
  */
  add_inputs_from(inputs, strategy) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(inputs, TransactionUnspentOutputs);
      transactionbuilder_add_inputs_from(retptr, this.ptr, inputs.ptr, strategy);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      if (r1) {
        throw takeObject(r0);
      }
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {TxInputsBuilder} inputs
  */
  set_inputs(inputs) {
    _assertClass(inputs, TxInputsBuilder);
    transactionbuilder_set_inputs(this.ptr, inputs.ptr);
  }
  /**
  * @param {TxInputsBuilder} collateral
  */
  set_collateral(collateral) {
    _assertClass(collateral, TxInputsBuilder);
    transactionbuilder_set_collateral(this.ptr, collateral.ptr);
  }
  /**
  * @param {TransactionOutput} collateral_return
  */
  set_collateral_return(collateral_return) {
    _assertClass(collateral_return, TransactionOutput);
    transactionbuilder_set_collateral_return(this.ptr, collateral_return.ptr);
  }
  /**
  * This function will set the collateral-return value and then auto-calculate and assign
  * the total collateral coin value. Will raise an error in case no collateral inputs are set
  * or in case the total collateral value will have any assets in it except coin.
  * @param {TransactionOutput} collateral_return
  */
  set_collateral_return_and_total(collateral_return) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(collateral_return, TransactionOutput);
      transactionbuilder_set_collateral_return_and_total(retptr, this.ptr, collateral_return.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      if (r1) {
        throw takeObject(r0);
      }
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {BigNum} total_collateral
  */
  set_total_collateral(total_collateral) {
    _assertClass(total_collateral, BigNum);
    transactionbuilder_set_total_collateral(this.ptr, total_collateral.ptr);
  }
  /**
  * This function will set the total-collateral coin and then auto-calculate and assign
  * the collateral return value. Will raise an error in case no collateral inputs are set.
  * The specified address will be the received of the collateral return
  * @param {BigNum} total_collateral
  * @param {Address} return_address
  */
  set_total_collateral_and_return(total_collateral, return_address) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(total_collateral, BigNum);
      _assertClass(return_address, Address);
      transactionbuilder_set_total_collateral_and_return(retptr, this.ptr, total_collateral.ptr, return_address.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      if (r1) {
        throw takeObject(r0);
      }
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {TransactionInput} reference_input
  */
  add_reference_input(reference_input) {
    _assertClass(reference_input, TransactionInput);
    transactionbuilder_add_reference_input(this.ptr, reference_input.ptr);
  }
  /**
  * We have to know what kind of inputs these are to know what kind of mock witnesses to create since
  * 1) mock witnesses have different lengths depending on the type which changes the expecting fee
  * 2) Witnesses are a set so we need to get rid of duplicates to avoid over-estimating the fee
  * @param {Ed25519KeyHash} hash
  * @param {TransactionInput} input
  * @param {Value} amount
  */
  add_key_input(hash, input, amount) {
    _assertClass(hash, Ed25519KeyHash);
    _assertClass(input, TransactionInput);
    _assertClass(amount, Value);
    transactionbuilder_add_key_input(this.ptr, hash.ptr, input.ptr, amount.ptr);
  }
  /**
  * This method adds the input to the builder BUT leaves a missing spot for the witness native script
  *
  * After adding the input with this method, use `.add_required_native_input_scripts`
  * and `.add_required_plutus_input_scripts` to add the witness scripts
  *
  * Or instead use `.add_native_script_input` and `.add_plutus_script_input`
  * to add inputs right along with the script, instead of the script hash
  * @param {ScriptHash} hash
  * @param {TransactionInput} input
  * @param {Value} amount
  */
  add_script_input(hash, input, amount) {
    _assertClass(hash, ScriptHash);
    _assertClass(input, TransactionInput);
    _assertClass(amount, Value);
    transactionbuilder_add_script_input(this.ptr, hash.ptr, input.ptr, amount.ptr);
  }
  /**
  * This method will add the input to the builder and also register the required native script witness
  * @param {NativeScript} script
  * @param {TransactionInput} input
  * @param {Value} amount
  */
  add_native_script_input(script, input, amount) {
    _assertClass(script, NativeScript);
    _assertClass(input, TransactionInput);
    _assertClass(amount, Value);
    transactionbuilder_add_native_script_input(this.ptr, script.ptr, input.ptr, amount.ptr);
  }
  /**
  * This method will add the input to the builder and also register the required plutus witness
  * @param {PlutusWitness} witness
  * @param {TransactionInput} input
  * @param {Value} amount
  */
  add_plutus_script_input(witness, input, amount) {
    _assertClass(witness, PlutusWitness);
    _assertClass(input, TransactionInput);
    _assertClass(amount, Value);
    transactionbuilder_add_plutus_script_input(this.ptr, witness.ptr, input.ptr, amount.ptr);
  }
  /**
  * @param {ByronAddress} hash
  * @param {TransactionInput} input
  * @param {Value} amount
  */
  add_bootstrap_input(hash, input, amount) {
    _assertClass(hash, ByronAddress);
    _assertClass(input, TransactionInput);
    _assertClass(amount, Value);
    transactionbuilder_add_bootstrap_input(this.ptr, hash.ptr, input.ptr, amount.ptr);
  }
  /**
  * Note that for script inputs this method will use underlying generic `.add_script_input`
  * which leaves a required empty spot for the script witness (or witnesses in case of Plutus).
  * You can use `.add_native_script_input` or `.add_plutus_script_input` directly to register the input along with the witness.
  * @param {Address} address
  * @param {TransactionInput} input
  * @param {Value} amount
  */
  add_input(address, input, amount) {
    _assertClass(address, Address);
    _assertClass(input, TransactionInput);
    _assertClass(amount, Value);
    transactionbuilder_add_input(this.ptr, address.ptr, input.ptr, amount.ptr);
  }
  /**
  * Returns the number of still missing input scripts (either native or plutus)
  * Use `.add_required_native_input_scripts` or `.add_required_plutus_input_scripts` to add the missing scripts
  * @returns {number}
  */
  count_missing_input_scripts() {
    const ret = transactionbuilder_count_missing_input_scripts(this.ptr);
    return ret >>> 0;
  }
  /**
  * Try adding the specified scripts as witnesses for ALREADY ADDED script inputs
  * Any scripts that don't match any of the previously added inputs will be ignored
  * Returns the number of remaining required missing witness scripts
  * Use `.count_missing_input_scripts` to find the number of still missing scripts
  * @param {NativeScripts} scripts
  * @returns {number}
  */
  add_required_native_input_scripts(scripts) {
    _assertClass(scripts, NativeScripts);
    const ret = transactionbuilder_add_required_native_input_scripts(this.ptr, scripts.ptr);
    return ret >>> 0;
  }
  /**
  * Try adding the specified scripts as witnesses for ALREADY ADDED script inputs
  * Any scripts that don't match any of the previously added inputs will be ignored
  * Returns the number of remaining required missing witness scripts
  * Use `.count_missing_input_scripts` to find the number of still missing scripts
  * @param {PlutusWitnesses} scripts
  * @returns {number}
  */
  add_required_plutus_input_scripts(scripts) {
    _assertClass(scripts, PlutusWitnesses);
    const ret = transactionbuilder_add_required_plutus_input_scripts(this.ptr, scripts.ptr);
    return ret >>> 0;
  }
  /**
  * Returns a copy of the current script input witness scripts in the builder
  * @returns {NativeScripts | undefined}
  */
  get_native_input_scripts() {
    const ret = transactionbuilder_get_native_input_scripts(this.ptr);
    return ret === 0 ? void 0 : NativeScripts.__wrap(ret);
  }
  /**
  * Returns a copy of the current plutus input witness scripts in the builder.
  * NOTE: each plutus witness will be cloned with a specific corresponding input index
  * @returns {PlutusWitnesses | undefined}
  */
  get_plutus_input_scripts() {
    const ret = transactionbuilder_get_plutus_input_scripts(this.ptr);
    return ret === 0 ? void 0 : PlutusWitnesses.__wrap(ret);
  }
  /**
  * calculates how much the fee would increase if you added a given output
  * @param {Address} address
  * @param {TransactionInput} input
  * @param {Value} amount
  * @returns {BigNum}
  */
  fee_for_input(address, input, amount) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(address, Address);
      _assertClass(input, TransactionInput);
      _assertClass(amount, Value);
      transactionbuilder_fee_for_input(retptr, this.ptr, address.ptr, input.ptr, amount.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BigNum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * Add explicit output via a TransactionOutput object
  * @param {TransactionOutput} output
  */
  add_output(output) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(output, TransactionOutput);
      transactionbuilder_add_output(retptr, this.ptr, output.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      if (r1) {
        throw takeObject(r0);
      }
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * calculates how much the fee would increase if you added a given output
  * @param {TransactionOutput} output
  * @returns {BigNum}
  */
  fee_for_output(output) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(output, TransactionOutput);
      transactionbuilder_fee_for_output(retptr, this.ptr, output.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BigNum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {BigNum} fee
  */
  set_fee(fee) {
    _assertClass(fee, BigNum);
    transactionbuilder_set_fee(this.ptr, fee.ptr);
  }
  /**
  * !!! DEPRECATED !!!
  * Set ttl value.
  * @param {number} ttl
  */
  set_ttl(ttl) {
    transactionbuilder_set_ttl(this.ptr, ttl);
  }
  /**
  * @param {BigNum} ttl
  */
  set_ttl_bignum(ttl) {
    _assertClass(ttl, BigNum);
    transactionbuilder_set_ttl_bignum(this.ptr, ttl.ptr);
  }
  /**
  * !!! DEPRECATED !!!
  * Uses outdated slot number format.
  * @param {number} validity_start_interval
  */
  set_validity_start_interval(validity_start_interval) {
    transactionbuilder_set_validity_start_interval(this.ptr, validity_start_interval);
  }
  /**
  * @param {BigNum} validity_start_interval
  */
  set_validity_start_interval_bignum(validity_start_interval) {
    _assertClass(validity_start_interval, BigNum);
    var ptr0 = validity_start_interval.ptr;
    validity_start_interval.ptr = 0;
    transactionbuilder_set_validity_start_interval_bignum(this.ptr, ptr0);
  }
  /**
  * @param {Certificates} certs
  */
  set_certs(certs) {
    _assertClass(certs, Certificates);
    transactionbuilder_set_certs(this.ptr, certs.ptr);
  }
  /**
  * @param {Withdrawals} withdrawals
  */
  set_withdrawals(withdrawals) {
    _assertClass(withdrawals, Withdrawals);
    transactionbuilder_set_withdrawals(this.ptr, withdrawals.ptr);
  }
  /**
  * @returns {AuxiliaryData | undefined}
  */
  get_auxiliary_data() {
    const ret = transactionbuilder_get_auxiliary_data(this.ptr);
    return ret === 0 ? void 0 : AuxiliaryData.__wrap(ret);
  }
  /**
  * Set explicit auxiliary data via an AuxiliaryData object
  * It might contain some metadata plus native or Plutus scripts
  * @param {AuxiliaryData} auxiliary_data
  */
  set_auxiliary_data(auxiliary_data) {
    _assertClass(auxiliary_data, AuxiliaryData);
    transactionbuilder_set_auxiliary_data(this.ptr, auxiliary_data.ptr);
  }
  /**
  * Set metadata using a GeneralTransactionMetadata object
  * It will be set to the existing or new auxiliary data in this builder
  * @param {GeneralTransactionMetadata} metadata
  */
  set_metadata(metadata) {
    _assertClass(metadata, GeneralTransactionMetadata);
    transactionbuilder_set_metadata(this.ptr, metadata.ptr);
  }
  /**
  * Add a single metadatum using TransactionMetadatumLabel and TransactionMetadatum objects
  * It will be securely added to existing or new metadata in this builder
  * @param {BigNum} key
  * @param {TransactionMetadatum} val
  */
  add_metadatum(key, val) {
    _assertClass(key, BigNum);
    _assertClass(val, TransactionMetadatum);
    transactionbuilder_add_metadatum(this.ptr, key.ptr, val.ptr);
  }
  /**
  * Add a single JSON metadatum using a TransactionMetadatumLabel and a String
  * It will be securely added to existing or new metadata in this builder
  * @param {BigNum} key
  * @param {string} val
  */
  add_json_metadatum(key, val) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(key, BigNum);
      const ptr0 = passStringToWasm0(val, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionbuilder_add_json_metadatum(retptr, this.ptr, key.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      if (r1) {
        throw takeObject(r0);
      }
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * Add a single JSON metadatum using a TransactionMetadatumLabel, a String, and a MetadataJsonSchema object
  * It will be securely added to existing or new metadata in this builder
  * @param {BigNum} key
  * @param {string} val
  * @param {number} schema
  */
  add_json_metadatum_with_schema(key, val, schema) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(key, BigNum);
      const ptr0 = passStringToWasm0(val, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionbuilder_add_json_metadatum_with_schema(retptr, this.ptr, key.ptr, ptr0, len0, schema);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      if (r1) {
        throw takeObject(r0);
      }
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {MintBuilder} mint_builder
  */
  set_mint_builder(mint_builder) {
    _assertClass(mint_builder, MintBuilder);
    transactionbuilder_set_mint_builder(this.ptr, mint_builder.ptr);
  }
  /**
  * @returns {MintBuilder | undefined}
  */
  get_mint_builder() {
    const ret = transactionbuilder_get_mint_builder(this.ptr);
    return ret === 0 ? void 0 : MintBuilder.__wrap(ret);
  }
  /**
  * !!! DEPRECATED !!!
  * Mints are defining by MintBuilder now.
  * Use `.set_mint_builder()` and `MintBuilder` instead.
  * Set explicit Mint object and the required witnesses to this builder
  * it will replace any previously existing mint and mint scripts
  * NOTE! Error will be returned in case a mint policy does not have a matching script
  * @param {Mint} mint
  * @param {NativeScripts} mint_scripts
  */
  set_mint(mint, mint_scripts) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(mint, Mint);
      _assertClass(mint_scripts, NativeScripts);
      transactionbuilder_set_mint(retptr, this.ptr, mint.ptr, mint_scripts.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      if (r1) {
        throw takeObject(r0);
      }
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * !!! DEPRECATED !!!
  * Mints are defining by MintBuilder now.
  * Use `.get_mint_builder()` and `.build()` instead.
  * Returns a copy of the current mint state in the builder
  * @returns {Mint | undefined}
  */
  get_mint() {
    const ret = transactionbuilder_get_mint(this.ptr);
    return ret === 0 ? void 0 : Mint.__wrap(ret);
  }
  /**
  * Returns a copy of the current mint witness scripts in the builder
  * @returns {NativeScripts | undefined}
  */
  get_mint_scripts() {
    const ret = transactionbuilder_get_mint_scripts(this.ptr);
    return ret === 0 ? void 0 : NativeScripts.__wrap(ret);
  }
  /**
  * !!! DEPRECATED !!!
  * Mints are defining by MintBuilder now.
  * Use `.set_mint_builder()` and `MintBuilder` instead.
  * Add a mint entry to this builder using a PolicyID and MintAssets object
  * It will be securely added to existing or new Mint in this builder
  * It will replace any existing mint assets with the same PolicyID
  * @param {NativeScript} policy_script
  * @param {MintAssets} mint_assets
  */
  set_mint_asset(policy_script, mint_assets) {
    _assertClass(policy_script, NativeScript);
    _assertClass(mint_assets, MintAssets);
    transactionbuilder_set_mint_asset(this.ptr, policy_script.ptr, mint_assets.ptr);
  }
  /**
  * !!! DEPRECATED !!!
  * Mints are defining by MintBuilder now.
  * Use `.set_mint_builder()` and `MintBuilder` instead.
  * Add a mint entry to this builder using a PolicyID, AssetName, and Int object for amount
  * It will be securely added to existing or new Mint in this builder
  * It will replace any previous existing amount same PolicyID and AssetName
  * @param {NativeScript} policy_script
  * @param {AssetName} asset_name
  * @param {Int} amount
  */
  add_mint_asset(policy_script, asset_name, amount) {
    _assertClass(policy_script, NativeScript);
    _assertClass(asset_name, AssetName);
    _assertClass(amount, Int);
    var ptr0 = amount.ptr;
    amount.ptr = 0;
    transactionbuilder_add_mint_asset(this.ptr, policy_script.ptr, asset_name.ptr, ptr0);
  }
  /**
  * Add a mint entry together with an output to this builder
  * Using a PolicyID, AssetName, Int for amount, Address, and Coin (BigNum) objects
  * The asset will be securely added to existing or new Mint in this builder
  * A new output will be added with the specified Address, the Coin value, and the minted asset
  * @param {NativeScript} policy_script
  * @param {AssetName} asset_name
  * @param {Int} amount
  * @param {TransactionOutputAmountBuilder} output_builder
  * @param {BigNum} output_coin
  */
  add_mint_asset_and_output(policy_script, asset_name, amount, output_builder, output_coin) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(policy_script, NativeScript);
      _assertClass(asset_name, AssetName);
      _assertClass(amount, Int);
      var ptr0 = amount.ptr;
      amount.ptr = 0;
      _assertClass(output_builder, TransactionOutputAmountBuilder);
      _assertClass(output_coin, BigNum);
      transactionbuilder_add_mint_asset_and_output(retptr, this.ptr, policy_script.ptr, asset_name.ptr, ptr0, output_builder.ptr, output_coin.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      if (r1) {
        throw takeObject(r0);
      }
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * Add a mint entry together with an output to this builder
  * Using a PolicyID, AssetName, Int for amount, and Address objects
  * The asset will be securely added to existing or new Mint in this builder
  * A new output will be added with the specified Address and the minted asset
  * The output will be set to contain the minimum required amount of Coin
  * @param {NativeScript} policy_script
  * @param {AssetName} asset_name
  * @param {Int} amount
  * @param {TransactionOutputAmountBuilder} output_builder
  */
  add_mint_asset_and_output_min_required_coin(policy_script, asset_name, amount, output_builder) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(policy_script, NativeScript);
      _assertClass(asset_name, AssetName);
      _assertClass(amount, Int);
      var ptr0 = amount.ptr;
      amount.ptr = 0;
      _assertClass(output_builder, TransactionOutputAmountBuilder);
      transactionbuilder_add_mint_asset_and_output_min_required_coin(retptr, this.ptr, policy_script.ptr, asset_name.ptr, ptr0, output_builder.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      if (r1) {
        throw takeObject(r0);
      }
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {TransactionBuilderConfig} cfg
  * @returns {TransactionBuilder}
  */
  static new(cfg) {
    _assertClass(cfg, TransactionBuilderConfig);
    const ret = transactionbuilder_new(cfg.ptr);
    return TransactionBuilder.__wrap(ret);
  }
  /**
  * @returns {TransactionInputs}
  */
  get_reference_inputs() {
    const ret = transactionbuilder_get_reference_inputs(this.ptr);
    return TransactionInputs.__wrap(ret);
  }
  /**
  * does not include refunds or withdrawals
  * @returns {Value}
  */
  get_explicit_input() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbuilder_get_explicit_input(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Value.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * withdrawals and refunds
  * @returns {Value}
  */
  get_implicit_input() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbuilder_get_implicit_input(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Value.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * Return explicit input plus implicit input plus mint
  * @returns {Value}
  */
  get_total_input() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbuilder_get_total_input(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Value.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * Return explicit output plus deposit plus burn
  * @returns {Value}
  */
  get_total_output() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbuilder_get_total_output(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Value.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * does not include fee
  * @returns {Value}
  */
  get_explicit_output() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbuilder_get_explicit_output(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Value.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {BigNum}
  */
  get_deposit() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbuilder_get_deposit(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BigNum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {BigNum | undefined}
  */
  get_fee_if_set() {
    const ret = transactionbuilder_get_fee_if_set(this.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * Warning: this function will mutate the /fee/ field
  * Make sure to call this function last after setting all other tx-body properties
  * Editing inputs, outputs, mint, etc. after change been calculated
  * might cause a mismatch in calculated fee versus the required fee
  * @param {Address} address
  * @returns {boolean}
  */
  add_change_if_needed(address) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(address, Address);
      transactionbuilder_add_change_if_needed(retptr, this.ptr, address.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return r0 !== 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * This method will calculate the script hash data
  * using the plutus datums and redeemers already present in the builder
  * along with the provided cost model, and will register the calculated value
  * in the builder to be used when building the tx body.
  * In case there are no plutus input witnesses present - nothing will change
  * You can set specific hash value using `.set_script_data_hash`
  * NOTE: this function will check which language versions are used in the present scripts
  * and will assert and require for a corresponding cost-model to be present in the passed map.
  * Only the cost-models for the present language versions will be used in the hash calculation.
  * @param {Costmdls} cost_models
  */
  calc_script_data_hash(cost_models) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(cost_models, Costmdls);
      transactionbuilder_calc_script_data_hash(retptr, this.ptr, cost_models.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      if (r1) {
        throw takeObject(r0);
      }
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * Sets the specified hash value.
  * Alternatively you can use `.calc_script_data_hash` to calculate the hash automatically.
  * Or use `.remove_script_data_hash` to delete the previously set value
  * @param {ScriptDataHash} hash
  */
  set_script_data_hash(hash) {
    _assertClass(hash, ScriptDataHash);
    transactionbuilder_set_script_data_hash(this.ptr, hash.ptr);
  }
  /**
  * Deletes any previously set plutus data hash value.
  * Use `.set_script_data_hash` or `.calc_script_data_hash` to set it.
  */
  remove_script_data_hash() {
    transactionbuilder_remove_script_data_hash(this.ptr);
  }
  /**
  * @param {Ed25519KeyHash} key
  */
  add_required_signer(key) {
    _assertClass(key, Ed25519KeyHash);
    transactionbuilder_add_required_signer(this.ptr, key.ptr);
  }
  /**
  * @returns {number}
  */
  full_size() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbuilder_full_size(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return r0 >>> 0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint32Array}
  */
  output_sizes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbuilder_output_sizes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU32FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 4);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * Returns object the body of the new transaction
  * Auxiliary data itself is not included
  * You can use `get_auxiliary_data` or `build_tx`
  * @returns {TransactionBody}
  */
  build() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbuilder_build(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionBody.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * Returns full Transaction object with the body and the auxiliary data
  * NOTE: witness_set will contain all mint_scripts if any been added or set
  * NOTE: is_valid set to true
  * NOTE: Will fail in case there are any script inputs added with no corresponding witness
  * @returns {Transaction}
  */
  build_tx() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbuilder_build_tx(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Transaction.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * Similar to `.build_tx()` but will NOT fail in case there are missing script witnesses
  * @returns {Transaction}
  */
  build_tx_unsafe() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbuilder_build_tx_unsafe(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Transaction.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * warning: sum of all parts of a transaction must equal 0. You cannot just set the fee to the min value and forget about it
  * warning: min_fee may be slightly larger than the actual minimum fee (ex: a few lovelaces)
  * this is done to simplify the library code, but can be fixed later
  * @returns {BigNum}
  */
  min_fee() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbuilder_min_fee(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return BigNum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var TransactionBuilderConfig = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionBuilderConfig.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionbuilderconfig_free(ptr);
  }
};
var TransactionBuilderConfigBuilder = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionBuilderConfigBuilder.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionbuilderconfigbuilder_free(ptr);
  }
  /**
  * @returns {TransactionBuilderConfigBuilder}
  */
  static new() {
    const ret = transactionbuilderconfigbuilder_new();
    return TransactionBuilderConfigBuilder.__wrap(ret);
  }
  /**
  * @param {LinearFee} fee_algo
  * @returns {TransactionBuilderConfigBuilder}
  */
  fee_algo(fee_algo) {
    _assertClass(fee_algo, LinearFee);
    const ret = transactionbuilderconfigbuilder_fee_algo(this.ptr, fee_algo.ptr);
    return TransactionBuilderConfigBuilder.__wrap(ret);
  }
  /**
  * !!! DEPRECATED !!!
  * Since babbage era cardano nodes use coins per byte. Use '.coins_per_utxo_byte' instead.
  * @param {BigNum} coins_per_utxo_word
  * @returns {TransactionBuilderConfigBuilder}
  */
  coins_per_utxo_word(coins_per_utxo_word) {
    _assertClass(coins_per_utxo_word, BigNum);
    const ret = transactionbuilderconfigbuilder_coins_per_utxo_word(this.ptr, coins_per_utxo_word.ptr);
    return TransactionBuilderConfigBuilder.__wrap(ret);
  }
  /**
  * @param {BigNum} coins_per_utxo_byte
  * @returns {TransactionBuilderConfigBuilder}
  */
  coins_per_utxo_byte(coins_per_utxo_byte) {
    _assertClass(coins_per_utxo_byte, BigNum);
    const ret = transactionbuilderconfigbuilder_coins_per_utxo_byte(this.ptr, coins_per_utxo_byte.ptr);
    return TransactionBuilderConfigBuilder.__wrap(ret);
  }
  /**
  * @param {ExUnitPrices} ex_unit_prices
  * @returns {TransactionBuilderConfigBuilder}
  */
  ex_unit_prices(ex_unit_prices) {
    _assertClass(ex_unit_prices, ExUnitPrices);
    const ret = transactionbuilderconfigbuilder_ex_unit_prices(this.ptr, ex_unit_prices.ptr);
    return TransactionBuilderConfigBuilder.__wrap(ret);
  }
  /**
  * @param {BigNum} pool_deposit
  * @returns {TransactionBuilderConfigBuilder}
  */
  pool_deposit(pool_deposit) {
    _assertClass(pool_deposit, BigNum);
    const ret = transactionbuilderconfigbuilder_pool_deposit(this.ptr, pool_deposit.ptr);
    return TransactionBuilderConfigBuilder.__wrap(ret);
  }
  /**
  * @param {BigNum} key_deposit
  * @returns {TransactionBuilderConfigBuilder}
  */
  key_deposit(key_deposit) {
    _assertClass(key_deposit, BigNum);
    const ret = transactionbuilderconfigbuilder_key_deposit(this.ptr, key_deposit.ptr);
    return TransactionBuilderConfigBuilder.__wrap(ret);
  }
  /**
  * @param {number} max_value_size
  * @returns {TransactionBuilderConfigBuilder}
  */
  max_value_size(max_value_size) {
    const ret = transactionbuilderconfigbuilder_max_value_size(this.ptr, max_value_size);
    return TransactionBuilderConfigBuilder.__wrap(ret);
  }
  /**
  * @param {number} max_tx_size
  * @returns {TransactionBuilderConfigBuilder}
  */
  max_tx_size(max_tx_size) {
    const ret = transactionbuilderconfigbuilder_max_tx_size(this.ptr, max_tx_size);
    return TransactionBuilderConfigBuilder.__wrap(ret);
  }
  /**
  * @param {boolean} prefer_pure_change
  * @returns {TransactionBuilderConfigBuilder}
  */
  prefer_pure_change(prefer_pure_change) {
    const ret = transactionbuilderconfigbuilder_prefer_pure_change(this.ptr, prefer_pure_change);
    return TransactionBuilderConfigBuilder.__wrap(ret);
  }
  /**
  * @returns {TransactionBuilderConfig}
  */
  build() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionbuilderconfigbuilder_build(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionBuilderConfig.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var TransactionHash = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionHash.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionhash_free(ptr);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {TransactionHash}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      transactionhash_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionhash_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} prefix
  * @returns {string}
  */
  to_bech32(prefix) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(prefix, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionhash_to_bech32(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr1 = r0;
      var len1 = r1;
      if (r3) {
        ptr1 = 0;
        len1 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr1, len1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr1, len1);
    }
  }
  /**
  * @param {string} bech_str
  * @returns {TransactionHash}
  */
  static from_bech32(bech_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionhash_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionhash_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex
  * @returns {TransactionHash}
  */
  static from_hex(hex) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionhash_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var TransactionInput = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionInput.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactioninput_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactioninput_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {TransactionInput}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      transactioninput_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionInput.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactioninput_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {TransactionInput}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactioninput_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionInput.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactioninput_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactioninput_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {TransactionInput}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactioninput_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionInput.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {TransactionHash}
  */
  transaction_id() {
    const ret = transactioninput_transaction_id(this.ptr);
    return TransactionHash.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  index() {
    const ret = transactioninput_index(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {TransactionHash} transaction_id
  * @param {number} index
  * @returns {TransactionInput}
  */
  static new(transaction_id, index) {
    _assertClass(transaction_id, TransactionHash);
    const ret = transactioninput_new(transaction_id.ptr, index);
    return TransactionInput.__wrap(ret);
  }
};
var TransactionInputs = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionInputs.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactioninputs_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactioninputs_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {TransactionInputs}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      transactioninputs_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionInputs.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactioninputs_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {TransactionInputs}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactioninputs_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionInputs.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactioninputs_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactioninputs_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {TransactionInputs}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactioninputs_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionInputs.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {TransactionInputs}
  */
  static new() {
    const ret = transactioninputs_new();
    return TransactionInputs.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = transactioninputs_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {TransactionInput}
  */
  get(index) {
    const ret = transactioninputs_get(this.ptr, index);
    return TransactionInput.__wrap(ret);
  }
  /**
  * @param {TransactionInput} elem
  */
  add(elem) {
    _assertClass(elem, TransactionInput);
    transactioninputs_add(this.ptr, elem.ptr);
  }
  /**
  * @returns {TransactionInputs | undefined}
  */
  to_option() {
    const ret = transactioninputs_to_option(this.ptr);
    return ret === 0 ? void 0 : TransactionInputs.__wrap(ret);
  }
};
var TransactionMetadatum = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionMetadatum.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionmetadatum_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionmetadatum_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {TransactionMetadatum}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      transactionmetadatum_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionMetadatum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionmetadatum_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {TransactionMetadatum}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionmetadatum_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionMetadatum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {MetadataMap} map
  * @returns {TransactionMetadatum}
  */
  static new_map(map) {
    _assertClass(map, MetadataMap);
    const ret = transactionmetadatum_new_map(map.ptr);
    return TransactionMetadatum.__wrap(ret);
  }
  /**
  * @param {MetadataList} list
  * @returns {TransactionMetadatum}
  */
  static new_list(list) {
    _assertClass(list, MetadataList);
    const ret = transactionmetadatum_new_list(list.ptr);
    return TransactionMetadatum.__wrap(ret);
  }
  /**
  * @param {Int} int
  * @returns {TransactionMetadatum}
  */
  static new_int(int) {
    _assertClass(int, Int);
    const ret = transactionmetadatum_new_int(int.ptr);
    return TransactionMetadatum.__wrap(ret);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {TransactionMetadatum}
  */
  static new_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      transactionmetadatum_new_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionMetadatum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} text
  * @returns {TransactionMetadatum}
  */
  static new_text(text) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(text, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionmetadatum_new_text(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionMetadatum.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {number}
  */
  kind() {
    const ret = transactionmetadatum_kind(this.ptr);
    return ret >>> 0;
  }
  /**
  * @returns {MetadataMap}
  */
  as_map() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionmetadatum_as_map(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MetadataMap.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {MetadataList}
  */
  as_list() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionmetadatum_as_list(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return MetadataList.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Int}
  */
  as_int() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionmetadatum_as_int(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Int.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  as_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionmetadatum_as_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      if (r3) {
        throw takeObject(r2);
      }
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  as_text() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionmetadatum_as_text(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
};
var TransactionMetadatumLabels = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionMetadatumLabels.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionmetadatumlabels_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionmetadatumlabels_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {TransactionMetadatumLabels}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      transactionmetadatumlabels_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionMetadatumLabels.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionmetadatumlabels_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {TransactionMetadatumLabels}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionmetadatumlabels_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionMetadatumLabels.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {TransactionMetadatumLabels}
  */
  static new() {
    const ret = transactionmetadatumlabels_new();
    return TransactionMetadatumLabels.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = transactionmetadatumlabels_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {BigNum}
  */
  get(index) {
    const ret = transactionmetadatumlabels_get(this.ptr, index);
    return BigNum.__wrap(ret);
  }
  /**
  * @param {BigNum} elem
  */
  add(elem) {
    _assertClass(elem, BigNum);
    transactionmetadatumlabels_add(this.ptr, elem.ptr);
  }
};
var TransactionOutput = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionOutput.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionoutput_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionoutput_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {TransactionOutput}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      transactionoutput_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionOutput.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionoutput_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {TransactionOutput}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionoutput_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionOutput.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionoutput_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionoutput_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {TransactionOutput}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionoutput_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionOutput.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Address}
  */
  address() {
    const ret = transactionoutput_address(this.ptr);
    return Address.__wrap(ret);
  }
  /**
  * @returns {Value}
  */
  amount() {
    const ret = transactionoutput_amount(this.ptr);
    return Value.__wrap(ret);
  }
  /**
  * @returns {DataHash | undefined}
  */
  data_hash() {
    const ret = transactionoutput_data_hash(this.ptr);
    return ret === 0 ? void 0 : DataHash.__wrap(ret);
  }
  /**
  * @returns {PlutusData | undefined}
  */
  plutus_data() {
    const ret = transactionoutput_plutus_data(this.ptr);
    return ret === 0 ? void 0 : PlutusData.__wrap(ret);
  }
  /**
  * @returns {ScriptRef | undefined}
  */
  script_ref() {
    const ret = transactionoutput_script_ref(this.ptr);
    return ret === 0 ? void 0 : ScriptRef.__wrap(ret);
  }
  /**
  * @param {ScriptRef} script_ref
  */
  set_script_ref(script_ref) {
    _assertClass(script_ref, ScriptRef);
    transactionoutput_set_script_ref(this.ptr, script_ref.ptr);
  }
  /**
  * @param {PlutusData} data
  */
  set_plutus_data(data) {
    _assertClass(data, PlutusData);
    transactionoutput_set_plutus_data(this.ptr, data.ptr);
  }
  /**
  * @param {DataHash} data_hash
  */
  set_data_hash(data_hash) {
    _assertClass(data_hash, DataHash);
    transactionoutput_set_data_hash(this.ptr, data_hash.ptr);
  }
  /**
  * @returns {boolean}
  */
  has_plutus_data() {
    const ret = transactionoutput_has_plutus_data(this.ptr);
    return ret !== 0;
  }
  /**
  * @returns {boolean}
  */
  has_data_hash() {
    const ret = transactionoutput_has_data_hash(this.ptr);
    return ret !== 0;
  }
  /**
  * @returns {boolean}
  */
  has_script_ref() {
    const ret = transactionoutput_has_script_ref(this.ptr);
    return ret !== 0;
  }
  /**
  * @param {Address} address
  * @param {Value} amount
  * @returns {TransactionOutput}
  */
  static new(address, amount) {
    _assertClass(address, Address);
    _assertClass(amount, Value);
    const ret = transactionoutput_new(address.ptr, amount.ptr);
    return TransactionOutput.__wrap(ret);
  }
};
var TransactionOutputAmountBuilder = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionOutputAmountBuilder.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionoutputamountbuilder_free(ptr);
  }
  /**
  * @param {Value} amount
  * @returns {TransactionOutputAmountBuilder}
  */
  with_value(amount) {
    _assertClass(amount, Value);
    const ret = transactionoutputamountbuilder_with_value(this.ptr, amount.ptr);
    return TransactionOutputAmountBuilder.__wrap(ret);
  }
  /**
  * @param {BigNum} coin
  * @returns {TransactionOutputAmountBuilder}
  */
  with_coin(coin) {
    _assertClass(coin, BigNum);
    const ret = transactionoutputamountbuilder_with_coin(this.ptr, coin.ptr);
    return TransactionOutputAmountBuilder.__wrap(ret);
  }
  /**
  * @param {BigNum} coin
  * @param {MultiAsset} multiasset
  * @returns {TransactionOutputAmountBuilder}
  */
  with_coin_and_asset(coin, multiasset) {
    _assertClass(coin, BigNum);
    _assertClass(multiasset, MultiAsset);
    const ret = transactionoutputamountbuilder_with_coin_and_asset(this.ptr, coin.ptr, multiasset.ptr);
    return TransactionOutputAmountBuilder.__wrap(ret);
  }
  /**
  * !!! DEPRECATED !!!
  * Since babbage era cardano nodes use coins per byte. Use '.with_asset_and_min_required_coin_by_utxo_cost' instead.
  * @param {MultiAsset} multiasset
  * @param {BigNum} coins_per_utxo_word
  * @returns {TransactionOutputAmountBuilder}
  */
  with_asset_and_min_required_coin(multiasset, coins_per_utxo_word) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(multiasset, MultiAsset);
      _assertClass(coins_per_utxo_word, BigNum);
      transactionoutputamountbuilder_with_asset_and_min_required_coin(retptr, this.ptr, multiasset.ptr, coins_per_utxo_word.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionOutputAmountBuilder.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {MultiAsset} multiasset
  * @param {DataCost} data_cost
  * @returns {TransactionOutputAmountBuilder}
  */
  with_asset_and_min_required_coin_by_utxo_cost(multiasset, data_cost) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(multiasset, MultiAsset);
      _assertClass(data_cost, DataCost);
      transactionoutputamountbuilder_with_asset_and_min_required_coin_by_utxo_cost(retptr, this.ptr, multiasset.ptr, data_cost.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionOutputAmountBuilder.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {TransactionOutput}
  */
  build() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionoutputamountbuilder_build(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionOutput.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var TransactionOutputBuilder = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionOutputBuilder.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionoutputbuilder_free(ptr);
  }
  /**
  * @returns {TransactionOutputBuilder}
  */
  static new() {
    const ret = transactionoutputbuilder_new();
    return TransactionOutputBuilder.__wrap(ret);
  }
  /**
  * @param {Address} address
  * @returns {TransactionOutputBuilder}
  */
  with_address(address) {
    _assertClass(address, Address);
    const ret = transactionoutputbuilder_with_address(this.ptr, address.ptr);
    return TransactionOutputBuilder.__wrap(ret);
  }
  /**
  * @param {DataHash} data_hash
  * @returns {TransactionOutputBuilder}
  */
  with_data_hash(data_hash) {
    _assertClass(data_hash, DataHash);
    const ret = transactionoutputbuilder_with_data_hash(this.ptr, data_hash.ptr);
    return TransactionOutputBuilder.__wrap(ret);
  }
  /**
  * @param {PlutusData} data
  * @returns {TransactionOutputBuilder}
  */
  with_plutus_data(data) {
    _assertClass(data, PlutusData);
    const ret = transactionoutputbuilder_with_plutus_data(this.ptr, data.ptr);
    return TransactionOutputBuilder.__wrap(ret);
  }
  /**
  * @param {ScriptRef} script_ref
  * @returns {TransactionOutputBuilder}
  */
  with_script_ref(script_ref) {
    _assertClass(script_ref, ScriptRef);
    const ret = transactionoutputbuilder_with_script_ref(this.ptr, script_ref.ptr);
    return TransactionOutputBuilder.__wrap(ret);
  }
  /**
  * @returns {TransactionOutputAmountBuilder}
  */
  next() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionoutputbuilder_next(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionOutputAmountBuilder.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var TransactionOutputs = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionOutputs.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionoutputs_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionoutputs_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {TransactionOutputs}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      transactionoutputs_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionOutputs.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionoutputs_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {TransactionOutputs}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionoutputs_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionOutputs.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionoutputs_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionoutputs_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {TransactionOutputs}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionoutputs_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionOutputs.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {TransactionOutputs}
  */
  static new() {
    const ret = transactionoutputs_new();
    return TransactionOutputs.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = transactionoutputs_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {TransactionOutput}
  */
  get(index) {
    const ret = transactionoutputs_get(this.ptr, index);
    return TransactionOutput.__wrap(ret);
  }
  /**
  * @param {TransactionOutput} elem
  */
  add(elem) {
    _assertClass(elem, TransactionOutput);
    transactionoutputs_add(this.ptr, elem.ptr);
  }
};
var TransactionUnspentOutput = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionUnspentOutput.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionunspentoutput_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionunspentoutput_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {TransactionUnspentOutput}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      transactionunspentoutput_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionUnspentOutput.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionunspentoutput_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {TransactionUnspentOutput}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionunspentoutput_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionUnspentOutput.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionunspentoutput_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionunspentoutput_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {TransactionUnspentOutput}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionunspentoutput_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionUnspentOutput.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {TransactionInput} input
  * @param {TransactionOutput} output
  * @returns {TransactionUnspentOutput}
  */
  static new(input, output) {
    _assertClass(input, TransactionInput);
    _assertClass(output, TransactionOutput);
    const ret = transactionunspentoutput_new(input.ptr, output.ptr);
    return TransactionUnspentOutput.__wrap(ret);
  }
  /**
  * @returns {TransactionInput}
  */
  input() {
    const ret = transactionunspentoutput_input(this.ptr);
    return TransactionInput.__wrap(ret);
  }
  /**
  * @returns {TransactionOutput}
  */
  output() {
    const ret = transactionunspentoutput_output(this.ptr);
    return TransactionOutput.__wrap(ret);
  }
};
var TransactionUnspentOutputs = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionUnspentOutputs.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionunspentoutputs_free(ptr);
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionunspentoutputs_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionunspentoutputs_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {TransactionUnspentOutputs}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionunspentoutputs_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionUnspentOutputs.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {TransactionUnspentOutputs}
  */
  static new() {
    const ret = transactionunspentoutputs_new();
    return TransactionUnspentOutputs.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = transactionunspentoutputs_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {TransactionUnspentOutput}
  */
  get(index) {
    const ret = transactionunspentoutputs_get(this.ptr, index);
    return TransactionUnspentOutput.__wrap(ret);
  }
  /**
  * @param {TransactionUnspentOutput} elem
  */
  add(elem) {
    _assertClass(elem, TransactionUnspentOutput);
    transactionunspentoutputs_add(this.ptr, elem.ptr);
  }
};
var TransactionWitnessSet = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionWitnessSet.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionwitnessset_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionwitnessset_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {TransactionWitnessSet}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      transactionwitnessset_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionWitnessSet.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionwitnessset_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {TransactionWitnessSet}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionwitnessset_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionWitnessSet.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionwitnessset_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionwitnessset_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {TransactionWitnessSet}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionwitnessset_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionWitnessSet.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Vkeywitnesses} vkeys
  */
  set_vkeys(vkeys) {
    _assertClass(vkeys, Vkeywitnesses);
    transactionwitnessset_set_vkeys(this.ptr, vkeys.ptr);
  }
  /**
  * @returns {Vkeywitnesses | undefined}
  */
  vkeys() {
    const ret = transactionwitnessset_vkeys(this.ptr);
    return ret === 0 ? void 0 : Vkeywitnesses.__wrap(ret);
  }
  /**
  * @param {NativeScripts} native_scripts
  */
  set_native_scripts(native_scripts) {
    _assertClass(native_scripts, NativeScripts);
    transactionwitnessset_set_native_scripts(this.ptr, native_scripts.ptr);
  }
  /**
  * @returns {NativeScripts | undefined}
  */
  native_scripts() {
    const ret = transactionwitnessset_native_scripts(this.ptr);
    return ret === 0 ? void 0 : NativeScripts.__wrap(ret);
  }
  /**
  * @param {BootstrapWitnesses} bootstraps
  */
  set_bootstraps(bootstraps) {
    _assertClass(bootstraps, BootstrapWitnesses);
    transactionwitnessset_set_bootstraps(this.ptr, bootstraps.ptr);
  }
  /**
  * @returns {BootstrapWitnesses | undefined}
  */
  bootstraps() {
    const ret = transactionwitnessset_bootstraps(this.ptr);
    return ret === 0 ? void 0 : BootstrapWitnesses.__wrap(ret);
  }
  /**
  * @param {PlutusScripts} plutus_scripts
  */
  set_plutus_scripts(plutus_scripts) {
    _assertClass(plutus_scripts, PlutusScripts);
    transactionwitnessset_set_plutus_scripts(this.ptr, plutus_scripts.ptr);
  }
  /**
  * @returns {PlutusScripts | undefined}
  */
  plutus_scripts() {
    const ret = transactionwitnessset_plutus_scripts(this.ptr);
    return ret === 0 ? void 0 : PlutusScripts.__wrap(ret);
  }
  /**
  * @param {PlutusList} plutus_data
  */
  set_plutus_data(plutus_data) {
    _assertClass(plutus_data, PlutusList);
    transactionwitnessset_set_plutus_data(this.ptr, plutus_data.ptr);
  }
  /**
  * @returns {PlutusList | undefined}
  */
  plutus_data() {
    const ret = transactionwitnessset_plutus_data(this.ptr);
    return ret === 0 ? void 0 : PlutusList.__wrap(ret);
  }
  /**
  * @param {Redeemers} redeemers
  */
  set_redeemers(redeemers) {
    _assertClass(redeemers, Redeemers);
    transactionwitnessset_set_redeemers(this.ptr, redeemers.ptr);
  }
  /**
  * @returns {Redeemers | undefined}
  */
  redeemers() {
    const ret = transactionwitnessset_redeemers(this.ptr);
    return ret === 0 ? void 0 : Redeemers.__wrap(ret);
  }
  /**
  * @returns {TransactionWitnessSet}
  */
  static new() {
    const ret = transactionwitnessset_new();
    return TransactionWitnessSet.__wrap(ret);
  }
};
var TransactionWitnessSets = class {
  static __wrap(ptr) {
    const obj = Object.create(TransactionWitnessSets.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_transactionwitnesssets_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionwitnesssets_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {TransactionWitnessSets}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      transactionwitnesssets_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionWitnessSets.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionwitnesssets_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {TransactionWitnessSets}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionwitnesssets_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionWitnessSets.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionwitnesssets_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      transactionwitnesssets_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {TransactionWitnessSets}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      transactionwitnesssets_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return TransactionWitnessSets.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {TransactionWitnessSets}
  */
  static new() {
    const ret = transactionwitnesssets_new();
    return TransactionWitnessSets.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = transactionwitnesssets_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {TransactionWitnessSet}
  */
  get(index) {
    const ret = transactionwitnesssets_get(this.ptr, index);
    return TransactionWitnessSet.__wrap(ret);
  }
  /**
  * @param {TransactionWitnessSet} elem
  */
  add(elem) {
    _assertClass(elem, TransactionWitnessSet);
    transactionwitnesssets_add(this.ptr, elem.ptr);
  }
};
var TxBuilderConstants = class {
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_txbuilderconstants_free(ptr);
  }
  /**
  * @returns {Costmdls}
  */
  static plutus_default_cost_models() {
    const ret = txbuilderconstants_plutus_default_cost_models();
    return Costmdls.__wrap(ret);
  }
  /**
  * @returns {Costmdls}
  */
  static plutus_alonzo_cost_models() {
    const ret = txbuilderconstants_plutus_alonzo_cost_models();
    return Costmdls.__wrap(ret);
  }
  /**
  * @returns {Costmdls}
  */
  static plutus_vasil_cost_models() {
    const ret = txbuilderconstants_plutus_vasil_cost_models();
    return Costmdls.__wrap(ret);
  }
};
var TxInputsBuilder = class {
  static __wrap(ptr) {
    const obj = Object.create(TxInputsBuilder.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_txinputsbuilder_free(ptr);
  }
  /**
  * @returns {TxInputsBuilder}
  */
  static new() {
    const ret = txinputsbuilder_new();
    return TxInputsBuilder.__wrap(ret);
  }
  /**
  * We have to know what kind of inputs these are to know what kind of mock witnesses to create since
  * 1) mock witnesses have different lengths depending on the type which changes the expecting fee
  * 2) Witnesses are a set so we need to get rid of duplicates to avoid over-estimating the fee
  * @param {Ed25519KeyHash} hash
  * @param {TransactionInput} input
  * @param {Value} amount
  */
  add_key_input(hash, input, amount) {
    _assertClass(hash, Ed25519KeyHash);
    _assertClass(input, TransactionInput);
    _assertClass(amount, Value);
    txinputsbuilder_add_key_input(this.ptr, hash.ptr, input.ptr, amount.ptr);
  }
  /**
  * !!! DEPRECATED !!!
  * This function can make a mistake in choosing right input index. Use `.add_native_script_input` or `.add_plutus_script_input` instead.
  * This method adds the input to the builder BUT leaves a missing spot for the witness native script
  *
  * After adding the input with this method, use `.add_required_native_input_scripts`
  * and `.add_required_plutus_input_scripts` to add the witness scripts
  *
  * Or instead use `.add_native_script_input` and `.add_plutus_script_input`
  * to add inputs right along with the script, instead of the script hash
  * @param {ScriptHash} hash
  * @param {TransactionInput} input
  * @param {Value} amount
  */
  add_script_input(hash, input, amount) {
    _assertClass(hash, ScriptHash);
    _assertClass(input, TransactionInput);
    _assertClass(amount, Value);
    txinputsbuilder_add_script_input(this.ptr, hash.ptr, input.ptr, amount.ptr);
  }
  /**
  * This method will add the input to the builder and also register the required native script witness
  * @param {NativeScript} script
  * @param {TransactionInput} input
  * @param {Value} amount
  */
  add_native_script_input(script, input, amount) {
    _assertClass(script, NativeScript);
    _assertClass(input, TransactionInput);
    _assertClass(amount, Value);
    txinputsbuilder_add_native_script_input(this.ptr, script.ptr, input.ptr, amount.ptr);
  }
  /**
  * This method will add the input to the builder and also register the required plutus witness
  * @param {PlutusWitness} witness
  * @param {TransactionInput} input
  * @param {Value} amount
  */
  add_plutus_script_input(witness, input, amount) {
    _assertClass(witness, PlutusWitness);
    _assertClass(input, TransactionInput);
    _assertClass(amount, Value);
    txinputsbuilder_add_plutus_script_input(this.ptr, witness.ptr, input.ptr, amount.ptr);
  }
  /**
  * @param {ByronAddress} hash
  * @param {TransactionInput} input
  * @param {Value} amount
  */
  add_bootstrap_input(hash, input, amount) {
    _assertClass(hash, ByronAddress);
    _assertClass(input, TransactionInput);
    _assertClass(amount, Value);
    txinputsbuilder_add_bootstrap_input(this.ptr, hash.ptr, input.ptr, amount.ptr);
  }
  /**
  * Note that for script inputs this method will use underlying generic `.add_script_input`
  * which leaves a required empty spot for the script witness (or witnesses in case of Plutus).
  * You can use `.add_native_script_input` or `.add_plutus_script_input` directly to register the input along with the witness.
  * @param {Address} address
  * @param {TransactionInput} input
  * @param {Value} amount
  */
  add_input(address, input, amount) {
    _assertClass(address, Address);
    _assertClass(input, TransactionInput);
    _assertClass(amount, Value);
    txinputsbuilder_add_input(this.ptr, address.ptr, input.ptr, amount.ptr);
  }
  /**
  * Returns the number of still missing input scripts (either native or plutus)
  * Use `.add_required_native_input_scripts` or `.add_required_plutus_input_scripts` to add the missing scripts
  * @returns {number}
  */
  count_missing_input_scripts() {
    const ret = txinputsbuilder_count_missing_input_scripts(this.ptr);
    return ret >>> 0;
  }
  /**
  * Try adding the specified scripts as witnesses for ALREADY ADDED script inputs
  * Any scripts that don't match any of the previously added inputs will be ignored
  * Returns the number of remaining required missing witness scripts
  * Use `.count_missing_input_scripts` to find the number of still missing scripts
  * @param {NativeScripts} scripts
  * @returns {number}
  */
  add_required_native_input_scripts(scripts) {
    _assertClass(scripts, NativeScripts);
    const ret = txinputsbuilder_add_required_native_input_scripts(this.ptr, scripts.ptr);
    return ret >>> 0;
  }
  /**
  * !!! DEPRECATED !!!
  * This function can make a mistake in choosing right input index. Use `.add_required_script_input_witnesses` instead.
  * Try adding the specified scripts as witnesses for ALREADY ADDED script inputs
  * Any scripts that don't match any of the previously added inputs will be ignored
  * Returns the number of remaining required missing witness scripts
  * Use `.count_missing_input_scripts` to find the number of still missing scripts
  * @param {PlutusWitnesses} scripts
  * @returns {number}
  */
  add_required_plutus_input_scripts(scripts) {
    _assertClass(scripts, PlutusWitnesses);
    const ret = txinputsbuilder_add_required_plutus_input_scripts(this.ptr, scripts.ptr);
    return ret >>> 0;
  }
  /**
  * Try adding the specified scripts as witnesses for ALREADY ADDED script inputs
  * Any scripts that don't match any of the previously added inputs will be ignored
  * Returns the number of remaining required missing witness scripts
  * Use `.count_missing_input_scripts` to find the number of still missing scripts
  * @param {InputsWithScriptWitness} inputs_with_wit
  * @returns {number}
  */
  add_required_script_input_witnesses(inputs_with_wit) {
    _assertClass(inputs_with_wit, InputsWithScriptWitness);
    const ret = txinputsbuilder_add_required_script_input_witnesses(this.ptr, inputs_with_wit.ptr);
    return ret >>> 0;
  }
  /**
  * @returns {TransactionInputs}
  */
  get_ref_inputs() {
    const ret = txinputsbuilder_get_ref_inputs(this.ptr);
    return TransactionInputs.__wrap(ret);
  }
  /**
  * Returns a copy of the current script input witness scripts in the builder
  * @returns {NativeScripts | undefined}
  */
  get_native_input_scripts() {
    const ret = txinputsbuilder_get_native_input_scripts(this.ptr);
    return ret === 0 ? void 0 : NativeScripts.__wrap(ret);
  }
  /**
  * Returns a copy of the current plutus input witness scripts in the builder.
  * NOTE: each plutus witness will be cloned with a specific corresponding input index
  * @returns {PlutusWitnesses | undefined}
  */
  get_plutus_input_scripts() {
    const ret = txinputsbuilder_get_plutus_input_scripts(this.ptr);
    return ret === 0 ? void 0 : PlutusWitnesses.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = txinputsbuilder_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {Ed25519KeyHash} key
  */
  add_required_signer(key) {
    _assertClass(key, Ed25519KeyHash);
    txinputsbuilder_add_required_signer(this.ptr, key.ptr);
  }
  /**
  * @param {Ed25519KeyHashes} keys
  */
  add_required_signers(keys) {
    _assertClass(keys, Ed25519KeyHashes);
    txinputsbuilder_add_required_signers(this.ptr, keys.ptr);
  }
  /**
  * @returns {Value}
  */
  total_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      txinputsbuilder_total_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Value.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {TransactionInputs}
  */
  inputs() {
    const ret = txinputsbuilder_inputs(this.ptr);
    return TransactionInputs.__wrap(ret);
  }
  /**
  * @returns {TransactionInputs | undefined}
  */
  inputs_option() {
    const ret = txinputsbuilder_inputs_option(this.ptr);
    return ret === 0 ? void 0 : TransactionInputs.__wrap(ret);
  }
};
var URL = class {
  static __wrap(ptr) {
    const obj = Object.create(URL.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_url_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      url_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {URL}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      url_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return URL.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      url_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {URL}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      url_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return URL.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      url_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      url_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {URL}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      url_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return URL.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} url
  * @returns {URL}
  */
  static new(url) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(url, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      url_new(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return URL.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  url() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      url_url(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
};
var UnitInterval = class {
  static __wrap(ptr) {
    const obj = Object.create(UnitInterval.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_unitinterval_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      unitinterval_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {UnitInterval}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      unitinterval_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return UnitInterval.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      unitinterval_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {UnitInterval}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      unitinterval_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return UnitInterval.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      unitinterval_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      unitinterval_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {UnitInterval}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      unitinterval_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return UnitInterval.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {BigNum}
  */
  numerator() {
    const ret = unitinterval_numerator(this.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * @returns {BigNum}
  */
  denominator() {
    const ret = unitinterval_denominator(this.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * @param {BigNum} numerator
  * @param {BigNum} denominator
  * @returns {UnitInterval}
  */
  static new(numerator, denominator) {
    _assertClass(numerator, BigNum);
    _assertClass(denominator, BigNum);
    const ret = unitinterval_new(numerator.ptr, denominator.ptr);
    return UnitInterval.__wrap(ret);
  }
};
var Update = class {
  static __wrap(ptr) {
    const obj = Object.create(Update.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_update_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      update_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Update}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      update_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Update.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      update_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Update}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      update_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Update.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      update_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      update_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Update}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      update_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Update.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {ProposedProtocolParameterUpdates}
  */
  proposed_protocol_parameter_updates() {
    const ret = update_proposed_protocol_parameter_updates(this.ptr);
    return ProposedProtocolParameterUpdates.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  epoch() {
    const ret = update_epoch(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {ProposedProtocolParameterUpdates} proposed_protocol_parameter_updates
  * @param {number} epoch
  * @returns {Update}
  */
  static new(proposed_protocol_parameter_updates, epoch) {
    _assertClass(proposed_protocol_parameter_updates, ProposedProtocolParameterUpdates);
    const ret = update_new(proposed_protocol_parameter_updates.ptr, epoch);
    return Update.__wrap(ret);
  }
};
var VRFCert = class {
  static __wrap(ptr) {
    const obj = Object.create(VRFCert.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_vrfcert_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vrfcert_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {VRFCert}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      vrfcert_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return VRFCert.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vrfcert_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {VRFCert}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      vrfcert_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return VRFCert.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vrfcert_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vrfcert_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {VRFCert}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      vrfcert_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return VRFCert.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  output() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vrfcert_output(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  proof() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vrfcert_proof(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} output
  * @param {Uint8Array} proof
  * @returns {VRFCert}
  */
  static new(output, proof) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(output, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      const ptr1 = passArray8ToWasm0(proof, __wbindgen_malloc);
      const len1 = WASM_VECTOR_LEN;
      vrfcert_new(retptr, ptr0, len0, ptr1, len1);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return VRFCert.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var VRFKeyHash = class {
  static __wrap(ptr) {
    const obj = Object.create(VRFKeyHash.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_vrfkeyhash_free(ptr);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {VRFKeyHash}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      vrfkeyhash_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return VRFKeyHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vrfkeyhash_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} prefix
  * @returns {string}
  */
  to_bech32(prefix) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(prefix, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      vrfkeyhash_to_bech32(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr1 = r0;
      var len1 = r1;
      if (r3) {
        ptr1 = 0;
        len1 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr1, len1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr1, len1);
    }
  }
  /**
  * @param {string} bech_str
  * @returns {VRFKeyHash}
  */
  static from_bech32(bech_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      vrfkeyhash_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return VRFKeyHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vrfkeyhash_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex
  * @returns {VRFKeyHash}
  */
  static from_hex(hex) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      vrfkeyhash_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return VRFKeyHash.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var VRFVKey = class {
  static __wrap(ptr) {
    const obj = Object.create(VRFVKey.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_vrfvkey_free(ptr);
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {VRFVKey}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      vrfvkey_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return VRFVKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vrfvkey_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} prefix
  * @returns {string}
  */
  to_bech32(prefix) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(prefix, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      vrfvkey_to_bech32(retptr, this.ptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr1 = r0;
      var len1 = r1;
      if (r3) {
        ptr1 = 0;
        len1 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr1, len1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr1, len1);
    }
  }
  /**
  * @param {string} bech_str
  * @returns {VRFVKey}
  */
  static from_bech32(bech_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(bech_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      vrfvkey_from_bech32(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return VRFVKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vrfvkey_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex
  * @returns {VRFVKey}
  */
  static from_hex(hex) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      vrfvkey_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return VRFVKey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
};
var Value = class {
  static __wrap(ptr) {
    const obj = Object.create(Value.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_value_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      value_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Value}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      value_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Value.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      value_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Value}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      value_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Value.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      value_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      value_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Value}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      value_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Value.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {BigNum} coin
  * @returns {Value}
  */
  static new(coin) {
    _assertClass(coin, BigNum);
    const ret = value_new(coin.ptr);
    return Value.__wrap(ret);
  }
  /**
  * @param {MultiAsset} multiasset
  * @returns {Value}
  */
  static new_from_assets(multiasset) {
    _assertClass(multiasset, MultiAsset);
    const ret = value_new_from_assets(multiasset.ptr);
    return Value.__wrap(ret);
  }
  /**
  * @param {BigNum} coin
  * @param {MultiAsset} multiasset
  * @returns {Value}
  */
  static new_with_assets(coin, multiasset) {
    _assertClass(coin, BigNum);
    _assertClass(multiasset, MultiAsset);
    const ret = value_new_with_assets(coin.ptr, multiasset.ptr);
    return Value.__wrap(ret);
  }
  /**
  * @returns {Value}
  */
  static zero() {
    const ret = value_zero();
    return Value.__wrap(ret);
  }
  /**
  * @returns {boolean}
  */
  is_zero() {
    const ret = value_is_zero(this.ptr);
    return ret !== 0;
  }
  /**
  * @returns {BigNum}
  */
  coin() {
    const ret = value_coin(this.ptr);
    return BigNum.__wrap(ret);
  }
  /**
  * @param {BigNum} coin
  */
  set_coin(coin) {
    _assertClass(coin, BigNum);
    value_set_coin(this.ptr, coin.ptr);
  }
  /**
  * @returns {MultiAsset | undefined}
  */
  multiasset() {
    const ret = value_multiasset(this.ptr);
    return ret === 0 ? void 0 : MultiAsset.__wrap(ret);
  }
  /**
  * @param {MultiAsset} multiasset
  */
  set_multiasset(multiasset) {
    _assertClass(multiasset, MultiAsset);
    value_set_multiasset(this.ptr, multiasset.ptr);
  }
  /**
  * @param {Value} rhs
  * @returns {Value}
  */
  checked_add(rhs) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(rhs, Value);
      value_checked_add(retptr, this.ptr, rhs.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Value.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Value} rhs_value
  * @returns {Value}
  */
  checked_sub(rhs_value) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      _assertClass(rhs_value, Value);
      value_checked_sub(retptr, this.ptr, rhs_value.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Value.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Value} rhs_value
  * @returns {Value}
  */
  clamped_sub(rhs_value) {
    _assertClass(rhs_value, Value);
    const ret = value_clamped_sub(this.ptr, rhs_value.ptr);
    return Value.__wrap(ret);
  }
  /**
  * note: values are only partially comparable
  * @param {Value} rhs_value
  * @returns {number | undefined}
  */
  compare(rhs_value) {
    _assertClass(rhs_value, Value);
    const ret = value_compare(this.ptr, rhs_value.ptr);
    return ret === 16777215 ? void 0 : ret;
  }
};
var Vkey = class {
  static __wrap(ptr) {
    const obj = Object.create(Vkey.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_vkey_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vkey_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Vkey}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      vkey_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Vkey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vkey_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Vkey}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      vkey_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Vkey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vkey_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vkey_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Vkey}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      vkey_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Vkey.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {PublicKey} pk
  * @returns {Vkey}
  */
  static new(pk) {
    _assertClass(pk, PublicKey);
    const ret = vkey_new(pk.ptr);
    return Vkey.__wrap(ret);
  }
  /**
  * @returns {PublicKey}
  */
  public_key() {
    const ret = vkey_public_key(this.ptr);
    return PublicKey.__wrap(ret);
  }
};
var Vkeys = class {
  static __wrap(ptr) {
    const obj = Object.create(Vkeys.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_vkeys_free(ptr);
  }
  /**
  * @returns {Vkeys}
  */
  static new() {
    const ret = vkeys_new();
    return Vkeys.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = vkeys_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {Vkey}
  */
  get(index) {
    const ret = vkeys_get(this.ptr, index);
    return Vkey.__wrap(ret);
  }
  /**
  * @param {Vkey} elem
  */
  add(elem) {
    _assertClass(elem, Vkey);
    vkeys_add(this.ptr, elem.ptr);
  }
};
var Vkeywitness = class {
  static __wrap(ptr) {
    const obj = Object.create(Vkeywitness.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_vkeywitness_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vkeywitness_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Vkeywitness}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      vkeywitness_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Vkeywitness.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vkeywitness_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Vkeywitness}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      vkeywitness_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Vkeywitness.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vkeywitness_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vkeywitness_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Vkeywitness}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      vkeywitness_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Vkeywitness.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Vkey} vkey
  * @param {Ed25519Signature} signature
  * @returns {Vkeywitness}
  */
  static new(vkey, signature) {
    _assertClass(vkey, Vkey);
    _assertClass(signature, Ed25519Signature);
    const ret = vkeywitness_new(vkey.ptr, signature.ptr);
    return Vkeywitness.__wrap(ret);
  }
  /**
  * @returns {Vkey}
  */
  vkey() {
    const ret = vkeywitness_vkey(this.ptr);
    return Vkey.__wrap(ret);
  }
  /**
  * @returns {Ed25519Signature}
  */
  signature() {
    const ret = vkeywitness_signature(this.ptr);
    return Ed25519Signature.__wrap(ret);
  }
};
var Vkeywitnesses = class {
  static __wrap(ptr) {
    const obj = Object.create(Vkeywitnesses.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_vkeywitnesses_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vkeywitnesses_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Vkeywitnesses}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      vkeywitnesses_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Vkeywitnesses.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vkeywitnesses_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Vkeywitnesses}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      vkeywitnesses_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Vkeywitnesses.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vkeywitnesses_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      vkeywitnesses_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Vkeywitnesses}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      vkeywitnesses_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Vkeywitnesses.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Vkeywitnesses}
  */
  static new() {
    const ret = vkeywitnesses_new();
    return Vkeywitnesses.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = vkeywitnesses_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {number} index
  * @returns {Vkeywitness}
  */
  get(index) {
    const ret = vkeywitnesses_get(this.ptr, index);
    return Vkeywitness.__wrap(ret);
  }
  /**
  * @param {Vkeywitness} elem
  */
  add(elem) {
    _assertClass(elem, Vkeywitness);
    vkeywitnesses_add(this.ptr, elem.ptr);
  }
};
var Withdrawals = class {
  static __wrap(ptr) {
    const obj = Object.create(Withdrawals.prototype);
    obj.ptr = ptr;
    return obj;
  }
  __destroy_into_raw() {
    const ptr = this.ptr;
    this.ptr = 0;
    return ptr;
  }
  free() {
    const ptr = this.__destroy_into_raw();
    __wbg_withdrawals_free(ptr);
  }
  /**
  * @returns {Uint8Array}
  */
  to_bytes() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      withdrawals_to_bytes(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var v0 = getArrayU8FromWasm0(r0, r1).slice();
      __wbindgen_free(r0, r1 * 1);
      return v0;
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {Uint8Array} bytes
  * @returns {Withdrawals}
  */
  static from_bytes(bytes) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passArray8ToWasm0(bytes, __wbindgen_malloc);
      const len0 = WASM_VECTOR_LEN;
      withdrawals_from_bytes(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Withdrawals.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_hex() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      withdrawals_to_hex(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      return getStringFromWasm0(r0, r1);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(r0, r1);
    }
  }
  /**
  * @param {string} hex_str
  * @returns {Withdrawals}
  */
  static from_hex(hex_str) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(hex_str, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      withdrawals_from_hex(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Withdrawals.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {string}
  */
  to_json() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      withdrawals_to_json(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      var r3 = getInt32Memory0()[retptr / 4 + 3];
      var ptr0 = r0;
      var len0 = r1;
      if (r3) {
        ptr0 = 0;
        len0 = 0;
        throw takeObject(r2);
      }
      return getStringFromWasm0(ptr0, len0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
      __wbindgen_free(ptr0, len0);
    }
  }
  /**
  * @returns {any}
  */
  to_js_value() {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      withdrawals_to_js_value(retptr, this.ptr);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @param {string} json
  * @returns {Withdrawals}
  */
  static from_json(json) {
    try {
      const retptr = __wbindgen_add_to_stack_pointer(-16);
      const ptr0 = passStringToWasm0(json, __wbindgen_malloc, __wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      withdrawals_from_json(retptr, ptr0, len0);
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r2 = getInt32Memory0()[retptr / 4 + 2];
      if (r2) {
        throw takeObject(r1);
      }
      return Withdrawals.__wrap(r0);
    } finally {
      __wbindgen_add_to_stack_pointer(16);
    }
  }
  /**
  * @returns {Withdrawals}
  */
  static new() {
    const ret = withdrawals_new();
    return Withdrawals.__wrap(ret);
  }
  /**
  * @returns {number}
  */
  len() {
    const ret = withdrawals_len(this.ptr);
    return ret >>> 0;
  }
  /**
  * @param {RewardAddress} key
  * @param {BigNum} value
  * @returns {BigNum | undefined}
  */
  insert(key, value) {
    _assertClass(key, RewardAddress);
    _assertClass(value, BigNum);
    const ret = withdrawals_insert(this.ptr, key.ptr, value.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * @param {RewardAddress} key
  * @returns {BigNum | undefined}
  */
  get(key) {
    _assertClass(key, RewardAddress);
    const ret = withdrawals_get(this.ptr, key.ptr);
    return ret === 0 ? void 0 : BigNum.__wrap(ret);
  }
  /**
  * @returns {RewardAddresses}
  */
  keys() {
    const ret = withdrawals_keys(this.ptr);
    return RewardAddresses.__wrap(ret);
  }
};
function __wbindgen_object_drop_ref(arg0) {
  takeObject(arg0);
}
function __wbindgen_string_new(arg0, arg1) {
  const ret = getStringFromWasm0(arg0, arg1);
  return addHeapObject(ret);
}
function __wbindgen_error_new(arg0, arg1) {
  const ret = new Error(getStringFromWasm0(arg0, arg1));
  return addHeapObject(ret);
}
function __wbindgen_string_get(arg0, arg1) {
  const obj = getObject(arg1);
  const ret = typeof obj === "string" ? obj : void 0;
  var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, __wbindgen_malloc, __wbindgen_realloc);
  var len0 = WASM_VECTOR_LEN;
  getInt32Memory0()[arg0 / 4 + 1] = len0;
  getInt32Memory0()[arg0 / 4 + 0] = ptr0;
}
function __wbindgen_number_new(arg0) {
  const ret = arg0;
  return addHeapObject(ret);
}
function __wbindgen_object_clone_ref(arg0) {
  const ret = getObject(arg0);
  return addHeapObject(ret);
}
function __wbindgen_is_object(arg0) {
  const val = getObject(arg0);
  const ret = typeof val === "object" && val !== null;
  return ret;
}
function __wbg_String_91fba7ded13ba54c(arg0, arg1) {
  const ret = String(getObject(arg1));
  const ptr0 = passStringToWasm0(ret, __wbindgen_malloc, __wbindgen_realloc);
  const len0 = WASM_VECTOR_LEN;
  getInt32Memory0()[arg0 / 4 + 1] = len0;
  getInt32Memory0()[arg0 / 4 + 0] = ptr0;
}
function __wbg_set_20cbc34131e76824(arg0, arg1, arg2) {
  getObject(arg0)[takeObject(arg1)] = takeObject(arg2);
}
function __wbg_crypto_e1d53a1d73fb10b8(arg0) {
  const ret = getObject(arg0).crypto;
  return addHeapObject(ret);
}
function __wbg_process_038c26bf42b093f8(arg0) {
  const ret = getObject(arg0).process;
  return addHeapObject(ret);
}
function __wbg_versions_ab37218d2f0b24a8(arg0) {
  const ret = getObject(arg0).versions;
  return addHeapObject(ret);
}
function __wbg_node_080f4b19d15bc1fe(arg0) {
  const ret = getObject(arg0).node;
  return addHeapObject(ret);
}
function __wbindgen_is_string(arg0) {
  const ret = typeof getObject(arg0) === "string";
  return ret;
}
function __wbg_require_78a3dcfbdba9cbce() {
  return handleError(function() {
    const ret = module.require;
    return addHeapObject(ret);
  }, arguments);
}
function __wbg_msCrypto_6e7d3e1f92610cbb(arg0) {
  const ret = getObject(arg0).msCrypto;
  return addHeapObject(ret);
}
function __wbg_getRandomValues_805f1c3d65988a5a() {
  return handleError(function(arg0, arg1) {
    getObject(arg0).getRandomValues(getObject(arg1));
  }, arguments);
}
function __wbg_randomFillSync_6894564c2c334c42() {
  return handleError(function(arg0, arg1, arg2) {
    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));
  }, arguments);
}
function __wbg_new_1d9a920c6bfc44a8() {
  const ret = new Array();
  return addHeapObject(ret);
}
function __wbindgen_is_function(arg0) {
  const ret = typeof getObject(arg0) === "function";
  return ret;
}
function __wbg_newnoargs_b5b063fc6c2f0376(arg0, arg1) {
  const ret = new Function(getStringFromWasm0(arg0, arg1));
  return addHeapObject(ret);
}
function __wbg_new_268f7b7dd3430798() {
  const ret = /* @__PURE__ */ new Map();
  return addHeapObject(ret);
}
function __wbg_call_97ae9d8645dc388b() {
  return handleError(function(arg0, arg1) {
    const ret = getObject(arg0).call(getObject(arg1));
    return addHeapObject(ret);
  }, arguments);
}
function __wbg_new_0b9bfdd97583284e() {
  const ret = new Object();
  return addHeapObject(ret);
}
function __wbg_self_6d479506f72c6a71() {
  return handleError(function() {
    const ret = self.self;
    return addHeapObject(ret);
  }, arguments);
}
function __wbg_window_f2557cc78490aceb() {
  return handleError(function() {
    const ret = window.window;
    return addHeapObject(ret);
  }, arguments);
}
function __wbg_globalThis_7f206bda628d5286() {
  return handleError(function() {
    const ret = globalThis.globalThis;
    return addHeapObject(ret);
  }, arguments);
}
function __wbg_global_ba75c50d1cf384f4() {
  return handleError(function() {
    const ret = global.global;
    return addHeapObject(ret);
  }, arguments);
}
function __wbindgen_is_undefined(arg0) {
  const ret = getObject(arg0) === void 0;
  return ret;
}
function __wbg_set_a68214f35c417fa9(arg0, arg1, arg2) {
  getObject(arg0)[arg1 >>> 0] = takeObject(arg2);
}
function __wbg_call_168da88779e35f61() {
  return handleError(function(arg0, arg1, arg2) {
    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));
    return addHeapObject(ret);
  }, arguments);
}
function __wbg_set_933729cf5b66ac11(arg0, arg1, arg2) {
  const ret = getObject(arg0).set(getObject(arg1), getObject(arg2));
  return addHeapObject(ret);
}
function __wbg_buffer_3f3d764d4747d564(arg0) {
  const ret = getObject(arg0).buffer;
  return addHeapObject(ret);
}
function __wbg_new_8c3f0052272a457a(arg0) {
  const ret = new Uint8Array(getObject(arg0));
  return addHeapObject(ret);
}
function __wbg_set_83db9690f9353e79(arg0, arg1, arg2) {
  getObject(arg0).set(getObject(arg1), arg2 >>> 0);
}
function __wbg_length_9e1ae1900cb0fbd5(arg0) {
  const ret = getObject(arg0).length;
  return ret;
}
function __wbg_newwithlength_f5933855e4f48a19(arg0) {
  const ret = new Uint8Array(arg0 >>> 0);
  return addHeapObject(ret);
}
function __wbg_subarray_58ad4efbb5bcb886(arg0, arg1, arg2) {
  const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);
  return addHeapObject(ret);
}
function __wbg_new_d87f272aec784ec0(arg0, arg1) {
  const ret = new Function(getStringFromWasm0(arg0, arg1));
  return addHeapObject(ret);
}
function __wbg_call_eae29933372a39be(arg0, arg1) {
  const ret = getObject(arg0).call(getObject(arg1));
  return addHeapObject(ret);
}
function __wbindgen_jsval_eq(arg0, arg1) {
  const ret = getObject(arg0) === getObject(arg1);
  return ret;
}
function __wbg_self_e0b3266d2d9eba1a(arg0) {
  const ret = getObject(arg0).self;
  return addHeapObject(ret);
}
function __wbg_crypto_e95a6e54c5c2e37f(arg0) {
  const ret = getObject(arg0).crypto;
  return addHeapObject(ret);
}
function __wbg_getRandomValues_dc67302a7bd1aec5(arg0) {
  const ret = getObject(arg0).getRandomValues;
  return addHeapObject(ret);
}
function __wbg_require_0993fe224bf8e202(arg0, arg1) {
  const ret = __require(getStringFromWasm0(arg0, arg1));
  return addHeapObject(ret);
}
function __wbg_randomFillSync_dd2297de5917c74e(arg0, arg1, arg2) {
  getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));
}
function __wbg_getRandomValues_02639197c8166a96(arg0, arg1, arg2) {
  getObject(arg0).getRandomValues(getArrayU8FromWasm0(arg1, arg2));
}
function __wbindgen_debug_string(arg0, arg1) {
  const ret = debugString(getObject(arg1));
  const ptr0 = passStringToWasm0(ret, __wbindgen_malloc, __wbindgen_realloc);
  const len0 = WASM_VECTOR_LEN;
  getInt32Memory0()[arg0 / 4 + 1] = len0;
  getInt32Memory0()[arg0 / 4 + 0] = ptr0;
}
function __wbindgen_throw(arg0, arg1) {
  throw new Error(getStringFromWasm0(arg0, arg1));
}
function __wbindgen_memory() {
  const ret = memory;
  return addHeapObject(ret);
}

// vite-plugin-wasm-namespace:/home/palmerek/Dev/Personal/cardano/sites/ADAHackerSpace/web/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.wasm
var wasmUrl = "data:application/wasm;base64,";
var initWasm = async (opts = {}, url) => {
  let result;
  if (url.startsWith("data:")) {
    const urlContent = url.replace(/^data:.*?base64,/, "");
    let bytes;
    if (typeof Buffer === "function" && typeof Buffer.from === "function") {
      bytes = Buffer.from(urlContent, "base64");
    } else if (typeof atob === "function") {
      const binaryString = atob(urlContent);
      bytes = new Uint8Array(binaryString.length);
      for (let i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
      }
    } else {
      throw new Error("Cannot decode base64-encoded data URL");
    }
    result = await WebAssembly.instantiate(bytes, opts);
  } else {
    const response = await fetch(url);
    const contentType = response.headers.get("Content-Type") || "";
    if ("instantiateStreaming" in WebAssembly && contentType.startsWith("application/wasm")) {
      result = await WebAssembly.instantiateStreaming(response, opts);
    } else {
      const buffer = await response.arrayBuffer();
      result = await WebAssembly.instantiate(buffer, opts);
    }
  }
  return result.instance.exports;
};
var __vite__wasmModule = await initWasm({ "./cardano_serialization_lib_bg.js": { __wbindgen_object_drop_ref, __wbindgen_string_new, __wbindgen_error_new, __wbindgen_string_get, __wbindgen_number_new, __wbindgen_object_clone_ref, __wbindgen_is_object, __wbg_String_91fba7ded13ba54c, __wbg_set_20cbc34131e76824, __wbg_crypto_e1d53a1d73fb10b8, __wbg_process_038c26bf42b093f8, __wbg_versions_ab37218d2f0b24a8, __wbg_node_080f4b19d15bc1fe, __wbindgen_is_string, __wbg_require_78a3dcfbdba9cbce, __wbg_msCrypto_6e7d3e1f92610cbb, __wbg_getRandomValues_805f1c3d65988a5a, __wbg_randomFillSync_6894564c2c334c42, __wbg_new_1d9a920c6bfc44a8, __wbindgen_is_function, __wbg_newnoargs_b5b063fc6c2f0376, __wbg_new_268f7b7dd3430798, __wbg_call_97ae9d8645dc388b, __wbg_new_0b9bfdd97583284e, __wbg_self_6d479506f72c6a71, __wbg_window_f2557cc78490aceb, __wbg_globalThis_7f206bda628d5286, __wbg_global_ba75c50d1cf384f4, __wbindgen_is_undefined, __wbg_set_a68214f35c417fa9, __wbg_call_168da88779e35f61, __wbg_set_933729cf5b66ac11, __wbg_buffer_3f3d764d4747d564, __wbg_new_8c3f0052272a457a, __wbg_set_83db9690f9353e79, __wbg_length_9e1ae1900cb0fbd5, __wbg_newwithlength_f5933855e4f48a19, __wbg_subarray_58ad4efbb5bcb886, __wbg_new_d87f272aec784ec0, __wbg_call_eae29933372a39be, __wbindgen_jsval_eq, __wbg_self_e0b3266d2d9eba1a, __wbg_crypto_e95a6e54c5c2e37f, __wbg_getRandomValues_dc67302a7bd1aec5, __wbg_require_0993fe224bf8e202, __wbg_randomFillSync_dd2297de5917c74e, __wbg_getRandomValues_02639197c8166a96, __wbindgen_debug_string, __wbindgen_throw, __wbindgen_memory } }, wasmUrl);
var memory = __vite__wasmModule.memory;
var __wbg_unitinterval_free = __vite__wasmModule.__wbg_unitinterval_free;
var unitinterval_to_bytes = __vite__wasmModule.unitinterval_to_bytes;
var unitinterval_from_bytes = __vite__wasmModule.unitinterval_from_bytes;
var unitinterval_to_hex = __vite__wasmModule.unitinterval_to_hex;
var unitinterval_from_hex = __vite__wasmModule.unitinterval_from_hex;
var unitinterval_to_json = __vite__wasmModule.unitinterval_to_json;
var unitinterval_to_js_value = __vite__wasmModule.unitinterval_to_js_value;
var unitinterval_from_json = __vite__wasmModule.unitinterval_from_json;
var unitinterval_numerator = __vite__wasmModule.unitinterval_numerator;
var unitinterval_denominator = __vite__wasmModule.unitinterval_denominator;
var unitinterval_new = __vite__wasmModule.unitinterval_new;
var __wbg_transaction_free = __vite__wasmModule.__wbg_transaction_free;
var transaction_to_bytes = __vite__wasmModule.transaction_to_bytes;
var transaction_from_bytes = __vite__wasmModule.transaction_from_bytes;
var transaction_to_hex = __vite__wasmModule.transaction_to_hex;
var transaction_from_hex = __vite__wasmModule.transaction_from_hex;
var transaction_to_json = __vite__wasmModule.transaction_to_json;
var transaction_to_js_value = __vite__wasmModule.transaction_to_js_value;
var transaction_from_json = __vite__wasmModule.transaction_from_json;
var transaction_body = __vite__wasmModule.transaction_body;
var transaction_witness_set = __vite__wasmModule.transaction_witness_set;
var transaction_is_valid = __vite__wasmModule.transaction_is_valid;
var transaction_auxiliary_data = __vite__wasmModule.transaction_auxiliary_data;
var transaction_set_is_valid = __vite__wasmModule.transaction_set_is_valid;
var transaction_new = __vite__wasmModule.transaction_new;
var __wbg_transactioninputs_free = __vite__wasmModule.__wbg_transactioninputs_free;
var transactioninputs_to_bytes = __vite__wasmModule.transactioninputs_to_bytes;
var transactioninputs_from_bytes = __vite__wasmModule.transactioninputs_from_bytes;
var transactioninputs_to_hex = __vite__wasmModule.transactioninputs_to_hex;
var transactioninputs_from_hex = __vite__wasmModule.transactioninputs_from_hex;
var transactioninputs_to_json = __vite__wasmModule.transactioninputs_to_json;
var transactioninputs_to_js_value = __vite__wasmModule.transactioninputs_to_js_value;
var transactioninputs_from_json = __vite__wasmModule.transactioninputs_from_json;
var transactioninputs_new = __vite__wasmModule.transactioninputs_new;
var transactioninputs_len = __vite__wasmModule.transactioninputs_len;
var transactioninputs_get = __vite__wasmModule.transactioninputs_get;
var transactioninputs_add = __vite__wasmModule.transactioninputs_add;
var transactioninputs_to_option = __vite__wasmModule.transactioninputs_to_option;
var __wbg_transactionoutputs_free = __vite__wasmModule.__wbg_transactionoutputs_free;
var transactionoutputs_to_bytes = __vite__wasmModule.transactionoutputs_to_bytes;
var transactionoutputs_from_bytes = __vite__wasmModule.transactionoutputs_from_bytes;
var transactionoutputs_to_hex = __vite__wasmModule.transactionoutputs_to_hex;
var transactionoutputs_from_hex = __vite__wasmModule.transactionoutputs_from_hex;
var transactionoutputs_to_json = __vite__wasmModule.transactionoutputs_to_json;
var transactionoutputs_to_js_value = __vite__wasmModule.transactionoutputs_to_js_value;
var transactionoutputs_from_json = __vite__wasmModule.transactionoutputs_from_json;
var transactionoutputs_new = __vite__wasmModule.transactionoutputs_new;
var transactionoutputs_len = __vite__wasmModule.transactionoutputs_len;
var transactionoutputs_get = __vite__wasmModule.transactionoutputs_get;
var transactionoutputs_add = __vite__wasmModule.transactionoutputs_add;
var __wbg_datacost_free = __vite__wasmModule.__wbg_datacost_free;
var datacost_new_coins_per_word = __vite__wasmModule.datacost_new_coins_per_word;
var datacost_new_coins_per_byte = __vite__wasmModule.datacost_new_coins_per_byte;
var datacost_coins_per_byte = __vite__wasmModule.datacost_coins_per_byte;
var __wbg_certificates_free = __vite__wasmModule.__wbg_certificates_free;
var certificates_to_bytes = __vite__wasmModule.certificates_to_bytes;
var certificates_from_bytes = __vite__wasmModule.certificates_from_bytes;
var certificates_to_hex = __vite__wasmModule.certificates_to_hex;
var certificates_from_hex = __vite__wasmModule.certificates_from_hex;
var certificates_to_json = __vite__wasmModule.certificates_to_json;
var certificates_to_js_value = __vite__wasmModule.certificates_to_js_value;
var certificates_from_json = __vite__wasmModule.certificates_from_json;
var certificates_new = __vite__wasmModule.certificates_new;
var certificates_len = __vite__wasmModule.certificates_len;
var certificates_get = __vite__wasmModule.certificates_get;
var certificates_add = __vite__wasmModule.certificates_add;
var __wbg_transactionbody_free = __vite__wasmModule.__wbg_transactionbody_free;
var transactionbody_to_bytes = __vite__wasmModule.transactionbody_to_bytes;
var transactionbody_from_bytes = __vite__wasmModule.transactionbody_from_bytes;
var transactionbody_to_hex = __vite__wasmModule.transactionbody_to_hex;
var transactionbody_from_hex = __vite__wasmModule.transactionbody_from_hex;
var transactionbody_to_json = __vite__wasmModule.transactionbody_to_json;
var transactionbody_to_js_value = __vite__wasmModule.transactionbody_to_js_value;
var transactionbody_from_json = __vite__wasmModule.transactionbody_from_json;
var transactionbody_inputs = __vite__wasmModule.transactionbody_inputs;
var transactionbody_outputs = __vite__wasmModule.transactionbody_outputs;
var transactionbody_fee = __vite__wasmModule.transactionbody_fee;
var transactionbody_ttl = __vite__wasmModule.transactionbody_ttl;
var transactionbody_ttl_bignum = __vite__wasmModule.transactionbody_ttl_bignum;
var transactionbody_set_ttl = __vite__wasmModule.transactionbody_set_ttl;
var transactionbody_remove_ttl = __vite__wasmModule.transactionbody_remove_ttl;
var transactionbody_set_certs = __vite__wasmModule.transactionbody_set_certs;
var transactionbody_certs = __vite__wasmModule.transactionbody_certs;
var transactionbody_set_withdrawals = __vite__wasmModule.transactionbody_set_withdrawals;
var transactionbody_withdrawals = __vite__wasmModule.transactionbody_withdrawals;
var transactionbody_set_update = __vite__wasmModule.transactionbody_set_update;
var transactionbody_update = __vite__wasmModule.transactionbody_update;
var transactionbody_set_auxiliary_data_hash = __vite__wasmModule.transactionbody_set_auxiliary_data_hash;
var transactionbody_auxiliary_data_hash = __vite__wasmModule.transactionbody_auxiliary_data_hash;
var transactionbody_set_validity_start_interval = __vite__wasmModule.transactionbody_set_validity_start_interval;
var transactionbody_set_validity_start_interval_bignum = __vite__wasmModule.transactionbody_set_validity_start_interval_bignum;
var transactionbody_validity_start_interval_bignum = __vite__wasmModule.transactionbody_validity_start_interval_bignum;
var transactionbody_validity_start_interval = __vite__wasmModule.transactionbody_validity_start_interval;
var transactionbody_set_mint = __vite__wasmModule.transactionbody_set_mint;
var transactionbody_mint = __vite__wasmModule.transactionbody_mint;
var transactionbody_multiassets = __vite__wasmModule.transactionbody_multiassets;
var transactionbody_set_reference_inputs = __vite__wasmModule.transactionbody_set_reference_inputs;
var transactionbody_reference_inputs = __vite__wasmModule.transactionbody_reference_inputs;
var transactionbody_set_script_data_hash = __vite__wasmModule.transactionbody_set_script_data_hash;
var transactionbody_script_data_hash = __vite__wasmModule.transactionbody_script_data_hash;
var transactionbody_set_collateral = __vite__wasmModule.transactionbody_set_collateral;
var transactionbody_collateral = __vite__wasmModule.transactionbody_collateral;
var transactionbody_set_required_signers = __vite__wasmModule.transactionbody_set_required_signers;
var transactionbody_required_signers = __vite__wasmModule.transactionbody_required_signers;
var transactionbody_set_network_id = __vite__wasmModule.transactionbody_set_network_id;
var transactionbody_network_id = __vite__wasmModule.transactionbody_network_id;
var transactionbody_set_collateral_return = __vite__wasmModule.transactionbody_set_collateral_return;
var transactionbody_collateral_return = __vite__wasmModule.transactionbody_collateral_return;
var transactionbody_set_total_collateral = __vite__wasmModule.transactionbody_set_total_collateral;
var transactionbody_total_collateral = __vite__wasmModule.transactionbody_total_collateral;
var transactionbody_new = __vite__wasmModule.transactionbody_new;
var transactionbody_new_tx_body = __vite__wasmModule.transactionbody_new_tx_body;
var __wbg_transactioninput_free = __vite__wasmModule.__wbg_transactioninput_free;
var transactioninput_to_bytes = __vite__wasmModule.transactioninput_to_bytes;
var transactioninput_from_bytes = __vite__wasmModule.transactioninput_from_bytes;
var transactioninput_to_hex = __vite__wasmModule.transactioninput_to_hex;
var transactioninput_from_hex = __vite__wasmModule.transactioninput_from_hex;
var transactioninput_to_json = __vite__wasmModule.transactioninput_to_json;
var transactioninput_to_js_value = __vite__wasmModule.transactioninput_to_js_value;
var transactioninput_from_json = __vite__wasmModule.transactioninput_from_json;
var transactioninput_transaction_id = __vite__wasmModule.transactioninput_transaction_id;
var transactioninput_index = __vite__wasmModule.transactioninput_index;
var transactioninput_new = __vite__wasmModule.transactioninput_new;
var __wbg_transactionoutput_free = __vite__wasmModule.__wbg_transactionoutput_free;
var transactionoutput_to_bytes = __vite__wasmModule.transactionoutput_to_bytes;
var transactionoutput_from_bytes = __vite__wasmModule.transactionoutput_from_bytes;
var transactionoutput_to_hex = __vite__wasmModule.transactionoutput_to_hex;
var transactionoutput_from_hex = __vite__wasmModule.transactionoutput_from_hex;
var transactionoutput_to_json = __vite__wasmModule.transactionoutput_to_json;
var transactionoutput_to_js_value = __vite__wasmModule.transactionoutput_to_js_value;
var transactionoutput_from_json = __vite__wasmModule.transactionoutput_from_json;
var transactionoutput_address = __vite__wasmModule.transactionoutput_address;
var transactionoutput_amount = __vite__wasmModule.transactionoutput_amount;
var transactionoutput_data_hash = __vite__wasmModule.transactionoutput_data_hash;
var transactionoutput_plutus_data = __vite__wasmModule.transactionoutput_plutus_data;
var transactionoutput_script_ref = __vite__wasmModule.transactionoutput_script_ref;
var transactionoutput_set_script_ref = __vite__wasmModule.transactionoutput_set_script_ref;
var transactionoutput_set_plutus_data = __vite__wasmModule.transactionoutput_set_plutus_data;
var transactionoutput_set_data_hash = __vite__wasmModule.transactionoutput_set_data_hash;
var transactionoutput_has_plutus_data = __vite__wasmModule.transactionoutput_has_plutus_data;
var transactionoutput_has_data_hash = __vite__wasmModule.transactionoutput_has_data_hash;
var transactionoutput_has_script_ref = __vite__wasmModule.transactionoutput_has_script_ref;
var transactionoutput_new = __vite__wasmModule.transactionoutput_new;
var __wbg_stakeregistration_free = __vite__wasmModule.__wbg_stakeregistration_free;
var stakeregistration_to_bytes = __vite__wasmModule.stakeregistration_to_bytes;
var stakeregistration_from_bytes = __vite__wasmModule.stakeregistration_from_bytes;
var stakeregistration_to_hex = __vite__wasmModule.stakeregistration_to_hex;
var stakeregistration_from_hex = __vite__wasmModule.stakeregistration_from_hex;
var stakeregistration_to_json = __vite__wasmModule.stakeregistration_to_json;
var stakeregistration_to_js_value = __vite__wasmModule.stakeregistration_to_js_value;
var stakeregistration_from_json = __vite__wasmModule.stakeregistration_from_json;
var stakeregistration_stake_credential = __vite__wasmModule.stakeregistration_stake_credential;
var stakeregistration_new = __vite__wasmModule.stakeregistration_new;
var __wbg_stakederegistration_free = __vite__wasmModule.__wbg_stakederegistration_free;
var stakederegistration_to_bytes = __vite__wasmModule.stakederegistration_to_bytes;
var stakederegistration_from_bytes = __vite__wasmModule.stakederegistration_from_bytes;
var stakederegistration_to_hex = __vite__wasmModule.stakederegistration_to_hex;
var stakederegistration_from_hex = __vite__wasmModule.stakederegistration_from_hex;
var stakederegistration_to_json = __vite__wasmModule.stakederegistration_to_json;
var stakederegistration_to_js_value = __vite__wasmModule.stakederegistration_to_js_value;
var stakederegistration_from_json = __vite__wasmModule.stakederegistration_from_json;
var stakederegistration_stake_credential = __vite__wasmModule.stakederegistration_stake_credential;
var stakederegistration_new = __vite__wasmModule.stakederegistration_new;
var __wbg_stakedelegation_free = __vite__wasmModule.__wbg_stakedelegation_free;
var stakedelegation_to_bytes = __vite__wasmModule.stakedelegation_to_bytes;
var stakedelegation_from_bytes = __vite__wasmModule.stakedelegation_from_bytes;
var stakedelegation_to_hex = __vite__wasmModule.stakedelegation_to_hex;
var stakedelegation_from_hex = __vite__wasmModule.stakedelegation_from_hex;
var stakedelegation_to_json = __vite__wasmModule.stakedelegation_to_json;
var stakedelegation_to_js_value = __vite__wasmModule.stakedelegation_to_js_value;
var stakedelegation_from_json = __vite__wasmModule.stakedelegation_from_json;
var stakedelegation_stake_credential = __vite__wasmModule.stakedelegation_stake_credential;
var stakedelegation_pool_keyhash = __vite__wasmModule.stakedelegation_pool_keyhash;
var stakedelegation_new = __vite__wasmModule.stakedelegation_new;
var __wbg_ed25519keyhashes_free = __vite__wasmModule.__wbg_ed25519keyhashes_free;
var ed25519keyhashes_to_bytes = __vite__wasmModule.ed25519keyhashes_to_bytes;
var ed25519keyhashes_from_bytes = __vite__wasmModule.ed25519keyhashes_from_bytes;
var ed25519keyhashes_to_hex = __vite__wasmModule.ed25519keyhashes_to_hex;
var ed25519keyhashes_from_hex = __vite__wasmModule.ed25519keyhashes_from_hex;
var ed25519keyhashes_to_json = __vite__wasmModule.ed25519keyhashes_to_json;
var ed25519keyhashes_to_js_value = __vite__wasmModule.ed25519keyhashes_to_js_value;
var ed25519keyhashes_from_json = __vite__wasmModule.ed25519keyhashes_from_json;
var ed25519keyhashes_new = __vite__wasmModule.ed25519keyhashes_new;
var ed25519keyhashes_len = __vite__wasmModule.ed25519keyhashes_len;
var ed25519keyhashes_get = __vite__wasmModule.ed25519keyhashes_get;
var ed25519keyhashes_add = __vite__wasmModule.ed25519keyhashes_add;
var ed25519keyhashes_to_option = __vite__wasmModule.ed25519keyhashes_to_option;
var __wbg_relays_free = __vite__wasmModule.__wbg_relays_free;
var relays_to_bytes = __vite__wasmModule.relays_to_bytes;
var relays_from_bytes = __vite__wasmModule.relays_from_bytes;
var relays_to_hex = __vite__wasmModule.relays_to_hex;
var relays_from_hex = __vite__wasmModule.relays_from_hex;
var relays_to_json = __vite__wasmModule.relays_to_json;
var relays_to_js_value = __vite__wasmModule.relays_to_js_value;
var relays_from_json = __vite__wasmModule.relays_from_json;
var relays_new = __vite__wasmModule.relays_new;
var relays_len = __vite__wasmModule.relays_len;
var relays_get = __vite__wasmModule.relays_get;
var relays_add = __vite__wasmModule.relays_add;
var __wbg_poolparams_free = __vite__wasmModule.__wbg_poolparams_free;
var poolparams_to_bytes = __vite__wasmModule.poolparams_to_bytes;
var poolparams_from_bytes = __vite__wasmModule.poolparams_from_bytes;
var poolparams_to_hex = __vite__wasmModule.poolparams_to_hex;
var poolparams_from_hex = __vite__wasmModule.poolparams_from_hex;
var poolparams_to_json = __vite__wasmModule.poolparams_to_json;
var poolparams_to_js_value = __vite__wasmModule.poolparams_to_js_value;
var poolparams_from_json = __vite__wasmModule.poolparams_from_json;
var poolparams_operator = __vite__wasmModule.poolparams_operator;
var poolparams_vrf_keyhash = __vite__wasmModule.poolparams_vrf_keyhash;
var poolparams_pledge = __vite__wasmModule.poolparams_pledge;
var poolparams_cost = __vite__wasmModule.poolparams_cost;
var poolparams_margin = __vite__wasmModule.poolparams_margin;
var poolparams_reward_account = __vite__wasmModule.poolparams_reward_account;
var poolparams_pool_owners = __vite__wasmModule.poolparams_pool_owners;
var poolparams_relays = __vite__wasmModule.poolparams_relays;
var poolparams_pool_metadata = __vite__wasmModule.poolparams_pool_metadata;
var poolparams_new = __vite__wasmModule.poolparams_new;
var __wbg_poolregistration_free = __vite__wasmModule.__wbg_poolregistration_free;
var poolregistration_to_bytes = __vite__wasmModule.poolregistration_to_bytes;
var poolregistration_from_bytes = __vite__wasmModule.poolregistration_from_bytes;
var poolregistration_to_hex = __vite__wasmModule.poolregistration_to_hex;
var poolregistration_from_hex = __vite__wasmModule.poolregistration_from_hex;
var poolregistration_to_json = __vite__wasmModule.poolregistration_to_json;
var poolregistration_to_js_value = __vite__wasmModule.poolregistration_to_js_value;
var poolregistration_from_json = __vite__wasmModule.poolregistration_from_json;
var poolregistration_pool_params = __vite__wasmModule.poolregistration_pool_params;
var poolregistration_new = __vite__wasmModule.poolregistration_new;
var __wbg_poolretirement_free = __vite__wasmModule.__wbg_poolretirement_free;
var poolretirement_to_bytes = __vite__wasmModule.poolretirement_to_bytes;
var poolretirement_from_bytes = __vite__wasmModule.poolretirement_from_bytes;
var poolretirement_to_hex = __vite__wasmModule.poolretirement_to_hex;
var poolretirement_from_hex = __vite__wasmModule.poolretirement_from_hex;
var poolretirement_to_json = __vite__wasmModule.poolretirement_to_json;
var poolretirement_to_js_value = __vite__wasmModule.poolretirement_to_js_value;
var poolretirement_from_json = __vite__wasmModule.poolretirement_from_json;
var poolretirement_pool_keyhash = __vite__wasmModule.poolretirement_pool_keyhash;
var poolretirement_epoch = __vite__wasmModule.poolretirement_epoch;
var poolretirement_new = __vite__wasmModule.poolretirement_new;
var __wbg_genesiskeydelegation_free = __vite__wasmModule.__wbg_genesiskeydelegation_free;
var genesiskeydelegation_to_bytes = __vite__wasmModule.genesiskeydelegation_to_bytes;
var genesiskeydelegation_from_bytes = __vite__wasmModule.genesiskeydelegation_from_bytes;
var genesiskeydelegation_to_hex = __vite__wasmModule.genesiskeydelegation_to_hex;
var genesiskeydelegation_from_hex = __vite__wasmModule.genesiskeydelegation_from_hex;
var genesiskeydelegation_to_json = __vite__wasmModule.genesiskeydelegation_to_json;
var genesiskeydelegation_to_js_value = __vite__wasmModule.genesiskeydelegation_to_js_value;
var genesiskeydelegation_from_json = __vite__wasmModule.genesiskeydelegation_from_json;
var genesiskeydelegation_genesishash = __vite__wasmModule.genesiskeydelegation_genesishash;
var genesiskeydelegation_genesis_delegate_hash = __vite__wasmModule.genesiskeydelegation_genesis_delegate_hash;
var genesiskeydelegation_vrf_keyhash = __vite__wasmModule.genesiskeydelegation_vrf_keyhash;
var genesiskeydelegation_new = __vite__wasmModule.genesiskeydelegation_new;
var __wbg_moveinstantaneousrewardscert_free = __vite__wasmModule.__wbg_moveinstantaneousrewardscert_free;
var moveinstantaneousrewardscert_to_bytes = __vite__wasmModule.moveinstantaneousrewardscert_to_bytes;
var moveinstantaneousrewardscert_from_bytes = __vite__wasmModule.moveinstantaneousrewardscert_from_bytes;
var moveinstantaneousrewardscert_to_hex = __vite__wasmModule.moveinstantaneousrewardscert_to_hex;
var moveinstantaneousrewardscert_from_hex = __vite__wasmModule.moveinstantaneousrewardscert_from_hex;
var moveinstantaneousrewardscert_to_json = __vite__wasmModule.moveinstantaneousrewardscert_to_json;
var moveinstantaneousrewardscert_to_js_value = __vite__wasmModule.moveinstantaneousrewardscert_to_js_value;
var moveinstantaneousrewardscert_from_json = __vite__wasmModule.moveinstantaneousrewardscert_from_json;
var moveinstantaneousrewardscert_move_instantaneous_reward = __vite__wasmModule.moveinstantaneousrewardscert_move_instantaneous_reward;
var moveinstantaneousrewardscert_new = __vite__wasmModule.moveinstantaneousrewardscert_new;
var __wbg_certificate_free = __vite__wasmModule.__wbg_certificate_free;
var certificate_to_bytes = __vite__wasmModule.certificate_to_bytes;
var certificate_from_bytes = __vite__wasmModule.certificate_from_bytes;
var certificate_to_hex = __vite__wasmModule.certificate_to_hex;
var certificate_from_hex = __vite__wasmModule.certificate_from_hex;
var certificate_to_json = __vite__wasmModule.certificate_to_json;
var certificate_to_js_value = __vite__wasmModule.certificate_to_js_value;
var certificate_from_json = __vite__wasmModule.certificate_from_json;
var certificate_new_stake_registration = __vite__wasmModule.certificate_new_stake_registration;
var certificate_new_stake_deregistration = __vite__wasmModule.certificate_new_stake_deregistration;
var certificate_new_stake_delegation = __vite__wasmModule.certificate_new_stake_delegation;
var certificate_new_pool_registration = __vite__wasmModule.certificate_new_pool_registration;
var certificate_new_pool_retirement = __vite__wasmModule.certificate_new_pool_retirement;
var certificate_new_genesis_key_delegation = __vite__wasmModule.certificate_new_genesis_key_delegation;
var certificate_new_move_instantaneous_rewards_cert = __vite__wasmModule.certificate_new_move_instantaneous_rewards_cert;
var certificate_kind = __vite__wasmModule.certificate_kind;
var certificate_as_stake_registration = __vite__wasmModule.certificate_as_stake_registration;
var certificate_as_stake_deregistration = __vite__wasmModule.certificate_as_stake_deregistration;
var certificate_as_stake_delegation = __vite__wasmModule.certificate_as_stake_delegation;
var certificate_as_pool_registration = __vite__wasmModule.certificate_as_pool_registration;
var certificate_as_pool_retirement = __vite__wasmModule.certificate_as_pool_retirement;
var certificate_as_genesis_key_delegation = __vite__wasmModule.certificate_as_genesis_key_delegation;
var certificate_as_move_instantaneous_rewards_cert = __vite__wasmModule.certificate_as_move_instantaneous_rewards_cert;
var __wbg_mirtostakecredentials_free = __vite__wasmModule.__wbg_mirtostakecredentials_free;
var mirtostakecredentials_to_bytes = __vite__wasmModule.mirtostakecredentials_to_bytes;
var mirtostakecredentials_from_bytes = __vite__wasmModule.mirtostakecredentials_from_bytes;
var mirtostakecredentials_to_hex = __vite__wasmModule.mirtostakecredentials_to_hex;
var mirtostakecredentials_from_hex = __vite__wasmModule.mirtostakecredentials_from_hex;
var mirtostakecredentials_to_json = __vite__wasmModule.mirtostakecredentials_to_json;
var mirtostakecredentials_to_js_value = __vite__wasmModule.mirtostakecredentials_to_js_value;
var mirtostakecredentials_from_json = __vite__wasmModule.mirtostakecredentials_from_json;
var mirtostakecredentials_new = __vite__wasmModule.mirtostakecredentials_new;
var mirtostakecredentials_len = __vite__wasmModule.mirtostakecredentials_len;
var mirtostakecredentials_insert = __vite__wasmModule.mirtostakecredentials_insert;
var mirtostakecredentials_get = __vite__wasmModule.mirtostakecredentials_get;
var mirtostakecredentials_keys = __vite__wasmModule.mirtostakecredentials_keys;
var __wbg_moveinstantaneousreward_free = __vite__wasmModule.__wbg_moveinstantaneousreward_free;
var moveinstantaneousreward_to_bytes = __vite__wasmModule.moveinstantaneousreward_to_bytes;
var moveinstantaneousreward_from_bytes = __vite__wasmModule.moveinstantaneousreward_from_bytes;
var moveinstantaneousreward_to_hex = __vite__wasmModule.moveinstantaneousreward_to_hex;
var moveinstantaneousreward_from_hex = __vite__wasmModule.moveinstantaneousreward_from_hex;
var moveinstantaneousreward_to_json = __vite__wasmModule.moveinstantaneousreward_to_json;
var moveinstantaneousreward_to_js_value = __vite__wasmModule.moveinstantaneousreward_to_js_value;
var moveinstantaneousreward_from_json = __vite__wasmModule.moveinstantaneousreward_from_json;
var moveinstantaneousreward_new_to_other_pot = __vite__wasmModule.moveinstantaneousreward_new_to_other_pot;
var moveinstantaneousreward_new_to_stake_creds = __vite__wasmModule.moveinstantaneousreward_new_to_stake_creds;
var moveinstantaneousreward_pot = __vite__wasmModule.moveinstantaneousreward_pot;
var moveinstantaneousreward_kind = __vite__wasmModule.moveinstantaneousreward_kind;
var moveinstantaneousreward_as_to_other_pot = __vite__wasmModule.moveinstantaneousreward_as_to_other_pot;
var moveinstantaneousreward_as_to_stake_creds = __vite__wasmModule.moveinstantaneousreward_as_to_stake_creds;
var __wbg_ipv4_free = __vite__wasmModule.__wbg_ipv4_free;
var ipv4_to_bytes = __vite__wasmModule.ipv4_to_bytes;
var ipv4_from_bytes = __vite__wasmModule.ipv4_from_bytes;
var ipv4_to_hex = __vite__wasmModule.ipv4_to_hex;
var ipv4_from_hex = __vite__wasmModule.ipv4_from_hex;
var ipv4_to_json = __vite__wasmModule.ipv4_to_json;
var ipv4_to_js_value = __vite__wasmModule.ipv4_to_js_value;
var ipv4_from_json = __vite__wasmModule.ipv4_from_json;
var ipv4_new = __vite__wasmModule.ipv4_new;
var ipv4_ip = __vite__wasmModule.ipv4_ip;
var __wbg_ipv6_free = __vite__wasmModule.__wbg_ipv6_free;
var ipv6_to_bytes = __vite__wasmModule.ipv6_to_bytes;
var ipv6_from_bytes = __vite__wasmModule.ipv6_from_bytes;
var ipv6_to_hex = __vite__wasmModule.ipv6_to_hex;
var ipv6_from_hex = __vite__wasmModule.ipv6_from_hex;
var ipv6_to_json = __vite__wasmModule.ipv6_to_json;
var ipv6_to_js_value = __vite__wasmModule.ipv6_to_js_value;
var ipv6_from_json = __vite__wasmModule.ipv6_from_json;
var ipv6_new = __vite__wasmModule.ipv6_new;
var ipv6_ip = __vite__wasmModule.ipv6_ip;
var __wbg_url_free = __vite__wasmModule.__wbg_url_free;
var url_to_bytes = __vite__wasmModule.url_to_bytes;
var url_from_bytes = __vite__wasmModule.url_from_bytes;
var url_to_hex = __vite__wasmModule.url_to_hex;
var url_from_hex = __vite__wasmModule.url_from_hex;
var url_to_json = __vite__wasmModule.url_to_json;
var url_to_js_value = __vite__wasmModule.url_to_js_value;
var url_from_json = __vite__wasmModule.url_from_json;
var url_new = __vite__wasmModule.url_new;
var url_url = __vite__wasmModule.url_url;
var __wbg_dnsrecordaoraaaa_free = __vite__wasmModule.__wbg_dnsrecordaoraaaa_free;
var dnsrecordaoraaaa_to_bytes = __vite__wasmModule.dnsrecordaoraaaa_to_bytes;
var dnsrecordaoraaaa_from_bytes = __vite__wasmModule.dnsrecordaoraaaa_from_bytes;
var dnsrecordaoraaaa_to_hex = __vite__wasmModule.dnsrecordaoraaaa_to_hex;
var dnsrecordaoraaaa_from_hex = __vite__wasmModule.dnsrecordaoraaaa_from_hex;
var dnsrecordaoraaaa_to_json = __vite__wasmModule.dnsrecordaoraaaa_to_json;
var dnsrecordaoraaaa_to_js_value = __vite__wasmModule.dnsrecordaoraaaa_to_js_value;
var dnsrecordaoraaaa_from_json = __vite__wasmModule.dnsrecordaoraaaa_from_json;
var dnsrecordaoraaaa_new = __vite__wasmModule.dnsrecordaoraaaa_new;
var dnsrecordaoraaaa_record = __vite__wasmModule.dnsrecordaoraaaa_record;
var __wbg_dnsrecordsrv_free = __vite__wasmModule.__wbg_dnsrecordsrv_free;
var dnsrecordsrv_to_bytes = __vite__wasmModule.dnsrecordsrv_to_bytes;
var dnsrecordsrv_from_bytes = __vite__wasmModule.dnsrecordsrv_from_bytes;
var dnsrecordsrv_to_hex = __vite__wasmModule.dnsrecordsrv_to_hex;
var dnsrecordsrv_from_hex = __vite__wasmModule.dnsrecordsrv_from_hex;
var dnsrecordsrv_to_json = __vite__wasmModule.dnsrecordsrv_to_json;
var dnsrecordsrv_to_js_value = __vite__wasmModule.dnsrecordsrv_to_js_value;
var dnsrecordsrv_from_json = __vite__wasmModule.dnsrecordsrv_from_json;
var dnsrecordsrv_new = __vite__wasmModule.dnsrecordsrv_new;
var dnsrecordsrv_record = __vite__wasmModule.dnsrecordsrv_record;
var __wbg_singlehostaddr_free = __vite__wasmModule.__wbg_singlehostaddr_free;
var singlehostaddr_to_bytes = __vite__wasmModule.singlehostaddr_to_bytes;
var singlehostaddr_from_bytes = __vite__wasmModule.singlehostaddr_from_bytes;
var singlehostaddr_to_hex = __vite__wasmModule.singlehostaddr_to_hex;
var singlehostaddr_from_hex = __vite__wasmModule.singlehostaddr_from_hex;
var singlehostaddr_to_json = __vite__wasmModule.singlehostaddr_to_json;
var singlehostaddr_to_js_value = __vite__wasmModule.singlehostaddr_to_js_value;
var singlehostaddr_from_json = __vite__wasmModule.singlehostaddr_from_json;
var singlehostaddr_port = __vite__wasmModule.singlehostaddr_port;
var singlehostaddr_ipv4 = __vite__wasmModule.singlehostaddr_ipv4;
var singlehostaddr_ipv6 = __vite__wasmModule.singlehostaddr_ipv6;
var singlehostaddr_new = __vite__wasmModule.singlehostaddr_new;
var __wbg_singlehostname_free = __vite__wasmModule.__wbg_singlehostname_free;
var singlehostname_to_bytes = __vite__wasmModule.singlehostname_to_bytes;
var singlehostname_from_bytes = __vite__wasmModule.singlehostname_from_bytes;
var singlehostname_to_hex = __vite__wasmModule.singlehostname_to_hex;
var singlehostname_from_hex = __vite__wasmModule.singlehostname_from_hex;
var singlehostname_to_json = __vite__wasmModule.singlehostname_to_json;
var singlehostname_to_js_value = __vite__wasmModule.singlehostname_to_js_value;
var singlehostname_from_json = __vite__wasmModule.singlehostname_from_json;
var singlehostname_port = __vite__wasmModule.singlehostname_port;
var singlehostname_dns_name = __vite__wasmModule.singlehostname_dns_name;
var singlehostname_new = __vite__wasmModule.singlehostname_new;
var __wbg_multihostname_free = __vite__wasmModule.__wbg_multihostname_free;
var multihostname_to_bytes = __vite__wasmModule.multihostname_to_bytes;
var multihostname_from_bytes = __vite__wasmModule.multihostname_from_bytes;
var multihostname_to_hex = __vite__wasmModule.multihostname_to_hex;
var multihostname_from_hex = __vite__wasmModule.multihostname_from_hex;
var multihostname_to_json = __vite__wasmModule.multihostname_to_json;
var multihostname_to_js_value = __vite__wasmModule.multihostname_to_js_value;
var multihostname_from_json = __vite__wasmModule.multihostname_from_json;
var multihostname_dns_name = __vite__wasmModule.multihostname_dns_name;
var multihostname_new = __vite__wasmModule.multihostname_new;
var __wbg_relay_free = __vite__wasmModule.__wbg_relay_free;
var relay_to_bytes = __vite__wasmModule.relay_to_bytes;
var relay_from_bytes = __vite__wasmModule.relay_from_bytes;
var relay_to_hex = __vite__wasmModule.relay_to_hex;
var relay_from_hex = __vite__wasmModule.relay_from_hex;
var relay_to_json = __vite__wasmModule.relay_to_json;
var relay_to_js_value = __vite__wasmModule.relay_to_js_value;
var relay_from_json = __vite__wasmModule.relay_from_json;
var relay_new_single_host_addr = __vite__wasmModule.relay_new_single_host_addr;
var relay_new_single_host_name = __vite__wasmModule.relay_new_single_host_name;
var relay_new_multi_host_name = __vite__wasmModule.relay_new_multi_host_name;
var relay_kind = __vite__wasmModule.relay_kind;
var relay_as_single_host_addr = __vite__wasmModule.relay_as_single_host_addr;
var relay_as_single_host_name = __vite__wasmModule.relay_as_single_host_name;
var relay_as_multi_host_name = __vite__wasmModule.relay_as_multi_host_name;
var __wbg_poolmetadata_free = __vite__wasmModule.__wbg_poolmetadata_free;
var poolmetadata_to_bytes = __vite__wasmModule.poolmetadata_to_bytes;
var poolmetadata_from_bytes = __vite__wasmModule.poolmetadata_from_bytes;
var poolmetadata_to_hex = __vite__wasmModule.poolmetadata_to_hex;
var poolmetadata_from_hex = __vite__wasmModule.poolmetadata_from_hex;
var poolmetadata_to_json = __vite__wasmModule.poolmetadata_to_json;
var poolmetadata_to_js_value = __vite__wasmModule.poolmetadata_to_js_value;
var poolmetadata_from_json = __vite__wasmModule.poolmetadata_from_json;
var poolmetadata_url = __vite__wasmModule.poolmetadata_url;
var poolmetadata_pool_metadata_hash = __vite__wasmModule.poolmetadata_pool_metadata_hash;
var poolmetadata_new = __vite__wasmModule.poolmetadata_new;
var __wbg_stakecredentials_free = __vite__wasmModule.__wbg_stakecredentials_free;
var stakecredentials_to_bytes = __vite__wasmModule.stakecredentials_to_bytes;
var stakecredentials_from_bytes = __vite__wasmModule.stakecredentials_from_bytes;
var stakecredentials_to_hex = __vite__wasmModule.stakecredentials_to_hex;
var stakecredentials_from_hex = __vite__wasmModule.stakecredentials_from_hex;
var stakecredentials_to_json = __vite__wasmModule.stakecredentials_to_json;
var stakecredentials_to_js_value = __vite__wasmModule.stakecredentials_to_js_value;
var stakecredentials_from_json = __vite__wasmModule.stakecredentials_from_json;
var stakecredentials_new = __vite__wasmModule.stakecredentials_new;
var stakecredentials_len = __vite__wasmModule.stakecredentials_len;
var stakecredentials_get = __vite__wasmModule.stakecredentials_get;
var stakecredentials_add = __vite__wasmModule.stakecredentials_add;
var __wbg_rewardaddresses_free = __vite__wasmModule.__wbg_rewardaddresses_free;
var rewardaddresses_to_bytes = __vite__wasmModule.rewardaddresses_to_bytes;
var rewardaddresses_from_bytes = __vite__wasmModule.rewardaddresses_from_bytes;
var rewardaddresses_to_hex = __vite__wasmModule.rewardaddresses_to_hex;
var rewardaddresses_from_hex = __vite__wasmModule.rewardaddresses_from_hex;
var rewardaddresses_to_json = __vite__wasmModule.rewardaddresses_to_json;
var rewardaddresses_to_js_value = __vite__wasmModule.rewardaddresses_to_js_value;
var rewardaddresses_from_json = __vite__wasmModule.rewardaddresses_from_json;
var rewardaddresses_new = __vite__wasmModule.rewardaddresses_new;
var rewardaddresses_len = __vite__wasmModule.rewardaddresses_len;
var rewardaddresses_get = __vite__wasmModule.rewardaddresses_get;
var rewardaddresses_add = __vite__wasmModule.rewardaddresses_add;
var __wbg_withdrawals_free = __vite__wasmModule.__wbg_withdrawals_free;
var withdrawals_to_bytes = __vite__wasmModule.withdrawals_to_bytes;
var withdrawals_from_bytes = __vite__wasmModule.withdrawals_from_bytes;
var withdrawals_to_hex = __vite__wasmModule.withdrawals_to_hex;
var withdrawals_from_hex = __vite__wasmModule.withdrawals_from_hex;
var withdrawals_to_json = __vite__wasmModule.withdrawals_to_json;
var withdrawals_to_js_value = __vite__wasmModule.withdrawals_to_js_value;
var withdrawals_from_json = __vite__wasmModule.withdrawals_from_json;
var withdrawals_new = __vite__wasmModule.withdrawals_new;
var withdrawals_len = __vite__wasmModule.withdrawals_len;
var withdrawals_insert = __vite__wasmModule.withdrawals_insert;
var withdrawals_get = __vite__wasmModule.withdrawals_get;
var withdrawals_keys = __vite__wasmModule.withdrawals_keys;
var __wbg_transactionwitnessset_free = __vite__wasmModule.__wbg_transactionwitnessset_free;
var transactionwitnessset_to_bytes = __vite__wasmModule.transactionwitnessset_to_bytes;
var transactionwitnessset_from_bytes = __vite__wasmModule.transactionwitnessset_from_bytes;
var transactionwitnessset_to_hex = __vite__wasmModule.transactionwitnessset_to_hex;
var transactionwitnessset_from_hex = __vite__wasmModule.transactionwitnessset_from_hex;
var transactionwitnessset_to_json = __vite__wasmModule.transactionwitnessset_to_json;
var transactionwitnessset_to_js_value = __vite__wasmModule.transactionwitnessset_to_js_value;
var transactionwitnessset_from_json = __vite__wasmModule.transactionwitnessset_from_json;
var transactionwitnessset_set_vkeys = __vite__wasmModule.transactionwitnessset_set_vkeys;
var transactionwitnessset_vkeys = __vite__wasmModule.transactionwitnessset_vkeys;
var transactionwitnessset_set_native_scripts = __vite__wasmModule.transactionwitnessset_set_native_scripts;
var transactionwitnessset_native_scripts = __vite__wasmModule.transactionwitnessset_native_scripts;
var transactionwitnessset_set_bootstraps = __vite__wasmModule.transactionwitnessset_set_bootstraps;
var transactionwitnessset_bootstraps = __vite__wasmModule.transactionwitnessset_bootstraps;
var transactionwitnessset_set_plutus_scripts = __vite__wasmModule.transactionwitnessset_set_plutus_scripts;
var transactionwitnessset_plutus_scripts = __vite__wasmModule.transactionwitnessset_plutus_scripts;
var transactionwitnessset_set_plutus_data = __vite__wasmModule.transactionwitnessset_set_plutus_data;
var transactionwitnessset_plutus_data = __vite__wasmModule.transactionwitnessset_plutus_data;
var transactionwitnessset_set_redeemers = __vite__wasmModule.transactionwitnessset_set_redeemers;
var transactionwitnessset_redeemers = __vite__wasmModule.transactionwitnessset_redeemers;
var transactionwitnessset_new = __vite__wasmModule.transactionwitnessset_new;
var __wbg_scriptpubkey_free = __vite__wasmModule.__wbg_scriptpubkey_free;
var scriptpubkey_to_bytes = __vite__wasmModule.scriptpubkey_to_bytes;
var scriptpubkey_from_bytes = __vite__wasmModule.scriptpubkey_from_bytes;
var scriptpubkey_to_hex = __vite__wasmModule.scriptpubkey_to_hex;
var scriptpubkey_from_hex = __vite__wasmModule.scriptpubkey_from_hex;
var scriptpubkey_to_json = __vite__wasmModule.scriptpubkey_to_json;
var scriptpubkey_to_js_value = __vite__wasmModule.scriptpubkey_to_js_value;
var scriptpubkey_from_json = __vite__wasmModule.scriptpubkey_from_json;
var scriptpubkey_addr_keyhash = __vite__wasmModule.scriptpubkey_addr_keyhash;
var scriptpubkey_new = __vite__wasmModule.scriptpubkey_new;
var __wbg_scriptall_free = __vite__wasmModule.__wbg_scriptall_free;
var scriptall_to_bytes = __vite__wasmModule.scriptall_to_bytes;
var scriptall_from_bytes = __vite__wasmModule.scriptall_from_bytes;
var scriptall_to_hex = __vite__wasmModule.scriptall_to_hex;
var scriptall_from_hex = __vite__wasmModule.scriptall_from_hex;
var scriptall_to_json = __vite__wasmModule.scriptall_to_json;
var scriptall_to_js_value = __vite__wasmModule.scriptall_to_js_value;
var scriptall_from_json = __vite__wasmModule.scriptall_from_json;
var scriptall_native_scripts = __vite__wasmModule.scriptall_native_scripts;
var scriptall_new = __vite__wasmModule.scriptall_new;
var __wbg_scriptany_free = __vite__wasmModule.__wbg_scriptany_free;
var scriptany_to_bytes = __vite__wasmModule.scriptany_to_bytes;
var scriptany_from_bytes = __vite__wasmModule.scriptany_from_bytes;
var scriptany_to_hex = __vite__wasmModule.scriptany_to_hex;
var scriptany_from_hex = __vite__wasmModule.scriptany_from_hex;
var scriptany_to_json = __vite__wasmModule.scriptany_to_json;
var scriptany_to_js_value = __vite__wasmModule.scriptany_to_js_value;
var scriptany_from_json = __vite__wasmModule.scriptany_from_json;
var scriptany_native_scripts = __vite__wasmModule.scriptany_native_scripts;
var scriptany_new = __vite__wasmModule.scriptany_new;
var __wbg_scriptnofk_free = __vite__wasmModule.__wbg_scriptnofk_free;
var scriptnofk_to_bytes = __vite__wasmModule.scriptnofk_to_bytes;
var scriptnofk_from_bytes = __vite__wasmModule.scriptnofk_from_bytes;
var scriptnofk_to_hex = __vite__wasmModule.scriptnofk_to_hex;
var scriptnofk_from_hex = __vite__wasmModule.scriptnofk_from_hex;
var scriptnofk_to_json = __vite__wasmModule.scriptnofk_to_json;
var scriptnofk_to_js_value = __vite__wasmModule.scriptnofk_to_js_value;
var scriptnofk_from_json = __vite__wasmModule.scriptnofk_from_json;
var scriptnofk_n = __vite__wasmModule.scriptnofk_n;
var scriptnofk_native_scripts = __vite__wasmModule.scriptnofk_native_scripts;
var scriptnofk_new = __vite__wasmModule.scriptnofk_new;
var __wbg_timelockstart_free = __vite__wasmModule.__wbg_timelockstart_free;
var timelockstart_to_bytes = __vite__wasmModule.timelockstart_to_bytes;
var timelockstart_from_bytes = __vite__wasmModule.timelockstart_from_bytes;
var timelockstart_to_hex = __vite__wasmModule.timelockstart_to_hex;
var timelockstart_from_hex = __vite__wasmModule.timelockstart_from_hex;
var timelockstart_to_json = __vite__wasmModule.timelockstart_to_json;
var timelockstart_to_js_value = __vite__wasmModule.timelockstart_to_js_value;
var timelockstart_from_json = __vite__wasmModule.timelockstart_from_json;
var timelockstart_slot = __vite__wasmModule.timelockstart_slot;
var timelockstart_slot_bignum = __vite__wasmModule.timelockstart_slot_bignum;
var timelockstart_new = __vite__wasmModule.timelockstart_new;
var timelockstart_new_timelockstart = __vite__wasmModule.timelockstart_new_timelockstart;
var __wbg_timelockexpiry_free = __vite__wasmModule.__wbg_timelockexpiry_free;
var timelockexpiry_to_bytes = __vite__wasmModule.timelockexpiry_to_bytes;
var timelockexpiry_from_bytes = __vite__wasmModule.timelockexpiry_from_bytes;
var timelockexpiry_to_hex = __vite__wasmModule.timelockexpiry_to_hex;
var timelockexpiry_from_hex = __vite__wasmModule.timelockexpiry_from_hex;
var timelockexpiry_to_json = __vite__wasmModule.timelockexpiry_to_json;
var timelockexpiry_to_js_value = __vite__wasmModule.timelockexpiry_to_js_value;
var timelockexpiry_from_json = __vite__wasmModule.timelockexpiry_from_json;
var timelockexpiry_slot = __vite__wasmModule.timelockexpiry_slot;
var timelockexpiry_slot_bignum = __vite__wasmModule.timelockexpiry_slot_bignum;
var timelockexpiry_new = __vite__wasmModule.timelockexpiry_new;
var timelockexpiry_new_timelockexpiry = __vite__wasmModule.timelockexpiry_new_timelockexpiry;
var __wbg_scriptref_free = __vite__wasmModule.__wbg_scriptref_free;
var scriptref_to_bytes = __vite__wasmModule.scriptref_to_bytes;
var scriptref_from_bytes = __vite__wasmModule.scriptref_from_bytes;
var scriptref_to_hex = __vite__wasmModule.scriptref_to_hex;
var scriptref_from_hex = __vite__wasmModule.scriptref_from_hex;
var scriptref_to_json = __vite__wasmModule.scriptref_to_json;
var scriptref_to_js_value = __vite__wasmModule.scriptref_to_js_value;
var scriptref_from_json = __vite__wasmModule.scriptref_from_json;
var scriptref_new_native_script = __vite__wasmModule.scriptref_new_native_script;
var scriptref_new_plutus_script = __vite__wasmModule.scriptref_new_plutus_script;
var scriptref_is_native_script = __vite__wasmModule.scriptref_is_native_script;
var scriptref_is_plutus_script = __vite__wasmModule.scriptref_is_plutus_script;
var scriptref_native_script = __vite__wasmModule.scriptref_native_script;
var scriptref_plutus_script = __vite__wasmModule.scriptref_plutus_script;
var __wbg_nativescript_free = __vite__wasmModule.__wbg_nativescript_free;
var nativescript_to_bytes = __vite__wasmModule.nativescript_to_bytes;
var nativescript_from_bytes = __vite__wasmModule.nativescript_from_bytes;
var nativescript_to_hex = __vite__wasmModule.nativescript_to_hex;
var nativescript_from_hex = __vite__wasmModule.nativescript_from_hex;
var nativescript_to_json = __vite__wasmModule.nativescript_to_json;
var nativescript_to_js_value = __vite__wasmModule.nativescript_to_js_value;
var nativescript_from_json = __vite__wasmModule.nativescript_from_json;
var nativescript_hash = __vite__wasmModule.nativescript_hash;
var nativescript_new_script_pubkey = __vite__wasmModule.nativescript_new_script_pubkey;
var nativescript_new_script_all = __vite__wasmModule.nativescript_new_script_all;
var nativescript_new_script_any = __vite__wasmModule.nativescript_new_script_any;
var nativescript_new_script_n_of_k = __vite__wasmModule.nativescript_new_script_n_of_k;
var nativescript_new_timelock_start = __vite__wasmModule.nativescript_new_timelock_start;
var nativescript_new_timelock_expiry = __vite__wasmModule.nativescript_new_timelock_expiry;
var nativescript_kind = __vite__wasmModule.nativescript_kind;
var nativescript_as_script_pubkey = __vite__wasmModule.nativescript_as_script_pubkey;
var nativescript_as_script_all = __vite__wasmModule.nativescript_as_script_all;
var nativescript_as_script_any = __vite__wasmModule.nativescript_as_script_any;
var nativescript_as_script_n_of_k = __vite__wasmModule.nativescript_as_script_n_of_k;
var nativescript_as_timelock_start = __vite__wasmModule.nativescript_as_timelock_start;
var nativescript_as_timelock_expiry = __vite__wasmModule.nativescript_as_timelock_expiry;
var nativescript_get_required_signers = __vite__wasmModule.nativescript_get_required_signers;
var __wbg_nativescripts_free = __vite__wasmModule.__wbg_nativescripts_free;
var nativescripts_new = __vite__wasmModule.nativescripts_new;
var nativescripts_len = __vite__wasmModule.nativescripts_len;
var nativescripts_get = __vite__wasmModule.nativescripts_get;
var nativescripts_add = __vite__wasmModule.nativescripts_add;
var __wbg_update_free = __vite__wasmModule.__wbg_update_free;
var update_to_bytes = __vite__wasmModule.update_to_bytes;
var update_from_bytes = __vite__wasmModule.update_from_bytes;
var update_to_hex = __vite__wasmModule.update_to_hex;
var update_from_hex = __vite__wasmModule.update_from_hex;
var update_to_json = __vite__wasmModule.update_to_json;
var update_to_js_value = __vite__wasmModule.update_to_js_value;
var update_from_json = __vite__wasmModule.update_from_json;
var update_proposed_protocol_parameter_updates = __vite__wasmModule.update_proposed_protocol_parameter_updates;
var update_epoch = __vite__wasmModule.update_epoch;
var update_new = __vite__wasmModule.update_new;
var __wbg_genesishashes_free = __vite__wasmModule.__wbg_genesishashes_free;
var genesishashes_to_bytes = __vite__wasmModule.genesishashes_to_bytes;
var genesishashes_from_bytes = __vite__wasmModule.genesishashes_from_bytes;
var genesishashes_to_hex = __vite__wasmModule.genesishashes_to_hex;
var genesishashes_from_hex = __vite__wasmModule.genesishashes_from_hex;
var genesishashes_to_json = __vite__wasmModule.genesishashes_to_json;
var genesishashes_to_js_value = __vite__wasmModule.genesishashes_to_js_value;
var genesishashes_from_json = __vite__wasmModule.genesishashes_from_json;
var genesishashes_new = __vite__wasmModule.genesishashes_new;
var genesishashes_len = __vite__wasmModule.genesishashes_len;
var genesishashes_get = __vite__wasmModule.genesishashes_get;
var genesishashes_add = __vite__wasmModule.genesishashes_add;
var __wbg_scripthashes_free = __vite__wasmModule.__wbg_scripthashes_free;
var scripthashes_to_bytes = __vite__wasmModule.scripthashes_to_bytes;
var scripthashes_from_bytes = __vite__wasmModule.scripthashes_from_bytes;
var scripthashes_to_hex = __vite__wasmModule.scripthashes_to_hex;
var scripthashes_from_hex = __vite__wasmModule.scripthashes_from_hex;
var scripthashes_to_json = __vite__wasmModule.scripthashes_to_json;
var scripthashes_to_js_value = __vite__wasmModule.scripthashes_to_js_value;
var scripthashes_from_json = __vite__wasmModule.scripthashes_from_json;
var scripthashes_new = __vite__wasmModule.scripthashes_new;
var scripthashes_len = __vite__wasmModule.scripthashes_len;
var scripthashes_get = __vite__wasmModule.scripthashes_get;
var scripthashes_add = __vite__wasmModule.scripthashes_add;
var __wbg_proposedprotocolparameterupdates_free = __vite__wasmModule.__wbg_proposedprotocolparameterupdates_free;
var proposedprotocolparameterupdates_to_bytes = __vite__wasmModule.proposedprotocolparameterupdates_to_bytes;
var proposedprotocolparameterupdates_from_bytes = __vite__wasmModule.proposedprotocolparameterupdates_from_bytes;
var proposedprotocolparameterupdates_to_hex = __vite__wasmModule.proposedprotocolparameterupdates_to_hex;
var proposedprotocolparameterupdates_from_hex = __vite__wasmModule.proposedprotocolparameterupdates_from_hex;
var proposedprotocolparameterupdates_to_json = __vite__wasmModule.proposedprotocolparameterupdates_to_json;
var proposedprotocolparameterupdates_to_js_value = __vite__wasmModule.proposedprotocolparameterupdates_to_js_value;
var proposedprotocolparameterupdates_from_json = __vite__wasmModule.proposedprotocolparameterupdates_from_json;
var proposedprotocolparameterupdates_new = __vite__wasmModule.proposedprotocolparameterupdates_new;
var proposedprotocolparameterupdates_len = __vite__wasmModule.proposedprotocolparameterupdates_len;
var proposedprotocolparameterupdates_insert = __vite__wasmModule.proposedprotocolparameterupdates_insert;
var proposedprotocolparameterupdates_get = __vite__wasmModule.proposedprotocolparameterupdates_get;
var proposedprotocolparameterupdates_keys = __vite__wasmModule.proposedprotocolparameterupdates_keys;
var __wbg_protocolversion_free = __vite__wasmModule.__wbg_protocolversion_free;
var protocolversion_to_bytes = __vite__wasmModule.protocolversion_to_bytes;
var protocolversion_from_bytes = __vite__wasmModule.protocolversion_from_bytes;
var protocolversion_to_hex = __vite__wasmModule.protocolversion_to_hex;
var protocolversion_from_hex = __vite__wasmModule.protocolversion_from_hex;
var protocolversion_to_json = __vite__wasmModule.protocolversion_to_json;
var protocolversion_to_js_value = __vite__wasmModule.protocolversion_to_js_value;
var protocolversion_from_json = __vite__wasmModule.protocolversion_from_json;
var protocolversion_major = __vite__wasmModule.protocolversion_major;
var protocolversion_minor = __vite__wasmModule.protocolversion_minor;
var protocolversion_new = __vite__wasmModule.protocolversion_new;
var __wbg_protocolparamupdate_free = __vite__wasmModule.__wbg_protocolparamupdate_free;
var protocolparamupdate_to_bytes = __vite__wasmModule.protocolparamupdate_to_bytes;
var protocolparamupdate_from_bytes = __vite__wasmModule.protocolparamupdate_from_bytes;
var protocolparamupdate_to_hex = __vite__wasmModule.protocolparamupdate_to_hex;
var protocolparamupdate_from_hex = __vite__wasmModule.protocolparamupdate_from_hex;
var protocolparamupdate_to_json = __vite__wasmModule.protocolparamupdate_to_json;
var protocolparamupdate_to_js_value = __vite__wasmModule.protocolparamupdate_to_js_value;
var protocolparamupdate_from_json = __vite__wasmModule.protocolparamupdate_from_json;
var protocolparamupdate_set_minfee_a = __vite__wasmModule.protocolparamupdate_set_minfee_a;
var protocolparamupdate_minfee_a = __vite__wasmModule.protocolparamupdate_minfee_a;
var protocolparamupdate_set_minfee_b = __vite__wasmModule.protocolparamupdate_set_minfee_b;
var protocolparamupdate_minfee_b = __vite__wasmModule.protocolparamupdate_minfee_b;
var protocolparamupdate_set_max_block_body_size = __vite__wasmModule.protocolparamupdate_set_max_block_body_size;
var protocolparamupdate_max_block_body_size = __vite__wasmModule.protocolparamupdate_max_block_body_size;
var protocolparamupdate_set_max_tx_size = __vite__wasmModule.protocolparamupdate_set_max_tx_size;
var protocolparamupdate_max_tx_size = __vite__wasmModule.protocolparamupdate_max_tx_size;
var protocolparamupdate_set_max_block_header_size = __vite__wasmModule.protocolparamupdate_set_max_block_header_size;
var protocolparamupdate_max_block_header_size = __vite__wasmModule.protocolparamupdate_max_block_header_size;
var protocolparamupdate_set_key_deposit = __vite__wasmModule.protocolparamupdate_set_key_deposit;
var protocolparamupdate_key_deposit = __vite__wasmModule.protocolparamupdate_key_deposit;
var protocolparamupdate_set_pool_deposit = __vite__wasmModule.protocolparamupdate_set_pool_deposit;
var protocolparamupdate_pool_deposit = __vite__wasmModule.protocolparamupdate_pool_deposit;
var protocolparamupdate_set_max_epoch = __vite__wasmModule.protocolparamupdate_set_max_epoch;
var protocolparamupdate_max_epoch = __vite__wasmModule.protocolparamupdate_max_epoch;
var protocolparamupdate_set_n_opt = __vite__wasmModule.protocolparamupdate_set_n_opt;
var protocolparamupdate_n_opt = __vite__wasmModule.protocolparamupdate_n_opt;
var protocolparamupdate_set_pool_pledge_influence = __vite__wasmModule.protocolparamupdate_set_pool_pledge_influence;
var protocolparamupdate_pool_pledge_influence = __vite__wasmModule.protocolparamupdate_pool_pledge_influence;
var protocolparamupdate_set_expansion_rate = __vite__wasmModule.protocolparamupdate_set_expansion_rate;
var protocolparamupdate_expansion_rate = __vite__wasmModule.protocolparamupdate_expansion_rate;
var protocolparamupdate_set_treasury_growth_rate = __vite__wasmModule.protocolparamupdate_set_treasury_growth_rate;
var protocolparamupdate_treasury_growth_rate = __vite__wasmModule.protocolparamupdate_treasury_growth_rate;
var protocolparamupdate_d = __vite__wasmModule.protocolparamupdate_d;
var protocolparamupdate_extra_entropy = __vite__wasmModule.protocolparamupdate_extra_entropy;
var protocolparamupdate_set_protocol_version = __vite__wasmModule.protocolparamupdate_set_protocol_version;
var protocolparamupdate_protocol_version = __vite__wasmModule.protocolparamupdate_protocol_version;
var protocolparamupdate_set_min_pool_cost = __vite__wasmModule.protocolparamupdate_set_min_pool_cost;
var protocolparamupdate_min_pool_cost = __vite__wasmModule.protocolparamupdate_min_pool_cost;
var protocolparamupdate_set_ada_per_utxo_byte = __vite__wasmModule.protocolparamupdate_set_ada_per_utxo_byte;
var protocolparamupdate_ada_per_utxo_byte = __vite__wasmModule.protocolparamupdate_ada_per_utxo_byte;
var protocolparamupdate_set_cost_models = __vite__wasmModule.protocolparamupdate_set_cost_models;
var protocolparamupdate_cost_models = __vite__wasmModule.protocolparamupdate_cost_models;
var protocolparamupdate_set_execution_costs = __vite__wasmModule.protocolparamupdate_set_execution_costs;
var protocolparamupdate_execution_costs = __vite__wasmModule.protocolparamupdate_execution_costs;
var protocolparamupdate_set_max_tx_ex_units = __vite__wasmModule.protocolparamupdate_set_max_tx_ex_units;
var protocolparamupdate_max_tx_ex_units = __vite__wasmModule.protocolparamupdate_max_tx_ex_units;
var protocolparamupdate_set_max_block_ex_units = __vite__wasmModule.protocolparamupdate_set_max_block_ex_units;
var protocolparamupdate_max_block_ex_units = __vite__wasmModule.protocolparamupdate_max_block_ex_units;
var protocolparamupdate_set_max_value_size = __vite__wasmModule.protocolparamupdate_set_max_value_size;
var protocolparamupdate_max_value_size = __vite__wasmModule.protocolparamupdate_max_value_size;
var protocolparamupdate_set_collateral_percentage = __vite__wasmModule.protocolparamupdate_set_collateral_percentage;
var protocolparamupdate_collateral_percentage = __vite__wasmModule.protocolparamupdate_collateral_percentage;
var protocolparamupdate_set_max_collateral_inputs = __vite__wasmModule.protocolparamupdate_set_max_collateral_inputs;
var protocolparamupdate_max_collateral_inputs = __vite__wasmModule.protocolparamupdate_max_collateral_inputs;
var protocolparamupdate_new = __vite__wasmModule.protocolparamupdate_new;
var __wbg_transactionbodies_free = __vite__wasmModule.__wbg_transactionbodies_free;
var transactionbodies_to_bytes = __vite__wasmModule.transactionbodies_to_bytes;
var transactionbodies_from_bytes = __vite__wasmModule.transactionbodies_from_bytes;
var transactionbodies_to_hex = __vite__wasmModule.transactionbodies_to_hex;
var transactionbodies_from_hex = __vite__wasmModule.transactionbodies_from_hex;
var transactionbodies_to_json = __vite__wasmModule.transactionbodies_to_json;
var transactionbodies_to_js_value = __vite__wasmModule.transactionbodies_to_js_value;
var transactionbodies_from_json = __vite__wasmModule.transactionbodies_from_json;
var transactionbodies_new = __vite__wasmModule.transactionbodies_new;
var transactionbodies_len = __vite__wasmModule.transactionbodies_len;
var transactionbodies_get = __vite__wasmModule.transactionbodies_get;
var transactionbodies_add = __vite__wasmModule.transactionbodies_add;
var __wbg_transactionwitnesssets_free = __vite__wasmModule.__wbg_transactionwitnesssets_free;
var transactionwitnesssets_to_bytes = __vite__wasmModule.transactionwitnesssets_to_bytes;
var transactionwitnesssets_from_bytes = __vite__wasmModule.transactionwitnesssets_from_bytes;
var transactionwitnesssets_to_hex = __vite__wasmModule.transactionwitnesssets_to_hex;
var transactionwitnesssets_from_hex = __vite__wasmModule.transactionwitnesssets_from_hex;
var transactionwitnesssets_to_json = __vite__wasmModule.transactionwitnesssets_to_json;
var transactionwitnesssets_to_js_value = __vite__wasmModule.transactionwitnesssets_to_js_value;
var transactionwitnesssets_from_json = __vite__wasmModule.transactionwitnesssets_from_json;
var transactionwitnesssets_new = __vite__wasmModule.transactionwitnesssets_new;
var transactionwitnesssets_len = __vite__wasmModule.transactionwitnesssets_len;
var transactionwitnesssets_get = __vite__wasmModule.transactionwitnesssets_get;
var transactionwitnesssets_add = __vite__wasmModule.transactionwitnesssets_add;
var __wbg_auxiliarydataset_free = __vite__wasmModule.__wbg_auxiliarydataset_free;
var auxiliarydataset_new = __vite__wasmModule.auxiliarydataset_new;
var auxiliarydataset_len = __vite__wasmModule.auxiliarydataset_len;
var auxiliarydataset_insert = __vite__wasmModule.auxiliarydataset_insert;
var auxiliarydataset_get = __vite__wasmModule.auxiliarydataset_get;
var auxiliarydataset_indices = __vite__wasmModule.auxiliarydataset_indices;
var __wbg_block_free = __vite__wasmModule.__wbg_block_free;
var block_to_bytes = __vite__wasmModule.block_to_bytes;
var block_from_bytes = __vite__wasmModule.block_from_bytes;
var block_to_hex = __vite__wasmModule.block_to_hex;
var block_from_hex = __vite__wasmModule.block_from_hex;
var block_to_json = __vite__wasmModule.block_to_json;
var block_to_js_value = __vite__wasmModule.block_to_js_value;
var block_from_json = __vite__wasmModule.block_from_json;
var block_header = __vite__wasmModule.block_header;
var block_transaction_bodies = __vite__wasmModule.block_transaction_bodies;
var block_transaction_witness_sets = __vite__wasmModule.block_transaction_witness_sets;
var block_auxiliary_data_set = __vite__wasmModule.block_auxiliary_data_set;
var block_invalid_transactions = __vite__wasmModule.block_invalid_transactions;
var block_new = __vite__wasmModule.block_new;
var __wbg_header_free = __vite__wasmModule.__wbg_header_free;
var header_to_bytes = __vite__wasmModule.header_to_bytes;
var header_from_bytes = __vite__wasmModule.header_from_bytes;
var header_to_hex = __vite__wasmModule.header_to_hex;
var header_from_hex = __vite__wasmModule.header_from_hex;
var header_to_json = __vite__wasmModule.header_to_json;
var header_to_js_value = __vite__wasmModule.header_to_js_value;
var header_from_json = __vite__wasmModule.header_from_json;
var header_header_body = __vite__wasmModule.header_header_body;
var header_body_signature = __vite__wasmModule.header_body_signature;
var header_new = __vite__wasmModule.header_new;
var __wbg_operationalcert_free = __vite__wasmModule.__wbg_operationalcert_free;
var operationalcert_to_bytes = __vite__wasmModule.operationalcert_to_bytes;
var operationalcert_from_bytes = __vite__wasmModule.operationalcert_from_bytes;
var operationalcert_to_hex = __vite__wasmModule.operationalcert_to_hex;
var operationalcert_from_hex = __vite__wasmModule.operationalcert_from_hex;
var operationalcert_to_json = __vite__wasmModule.operationalcert_to_json;
var operationalcert_to_js_value = __vite__wasmModule.operationalcert_to_js_value;
var operationalcert_from_json = __vite__wasmModule.operationalcert_from_json;
var operationalcert_hot_vkey = __vite__wasmModule.operationalcert_hot_vkey;
var operationalcert_sequence_number = __vite__wasmModule.operationalcert_sequence_number;
var operationalcert_kes_period = __vite__wasmModule.operationalcert_kes_period;
var operationalcert_sigma = __vite__wasmModule.operationalcert_sigma;
var operationalcert_new = __vite__wasmModule.operationalcert_new;
var __wbg_headerbody_free = __vite__wasmModule.__wbg_headerbody_free;
var headerbody_to_bytes = __vite__wasmModule.headerbody_to_bytes;
var headerbody_from_bytes = __vite__wasmModule.headerbody_from_bytes;
var headerbody_to_hex = __vite__wasmModule.headerbody_to_hex;
var headerbody_from_hex = __vite__wasmModule.headerbody_from_hex;
var headerbody_to_json = __vite__wasmModule.headerbody_to_json;
var headerbody_to_js_value = __vite__wasmModule.headerbody_to_js_value;
var headerbody_from_json = __vite__wasmModule.headerbody_from_json;
var headerbody_block_number = __vite__wasmModule.headerbody_block_number;
var headerbody_slot = __vite__wasmModule.headerbody_slot;
var headerbody_slot_bignum = __vite__wasmModule.headerbody_slot_bignum;
var headerbody_prev_hash = __vite__wasmModule.headerbody_prev_hash;
var headerbody_issuer_vkey = __vite__wasmModule.headerbody_issuer_vkey;
var headerbody_vrf_vkey = __vite__wasmModule.headerbody_vrf_vkey;
var headerbody_has_nonce_and_leader_vrf = __vite__wasmModule.headerbody_has_nonce_and_leader_vrf;
var headerbody_nonce_vrf_or_nothing = __vite__wasmModule.headerbody_nonce_vrf_or_nothing;
var headerbody_leader_vrf_or_nothing = __vite__wasmModule.headerbody_leader_vrf_or_nothing;
var headerbody_has_vrf_result = __vite__wasmModule.headerbody_has_vrf_result;
var headerbody_vrf_result_or_nothing = __vite__wasmModule.headerbody_vrf_result_or_nothing;
var headerbody_block_body_size = __vite__wasmModule.headerbody_block_body_size;
var headerbody_block_body_hash = __vite__wasmModule.headerbody_block_body_hash;
var headerbody_operational_cert = __vite__wasmModule.headerbody_operational_cert;
var headerbody_protocol_version = __vite__wasmModule.headerbody_protocol_version;
var headerbody_new = __vite__wasmModule.headerbody_new;
var headerbody_new_headerbody = __vite__wasmModule.headerbody_new_headerbody;
var __wbg_assetname_free = __vite__wasmModule.__wbg_assetname_free;
var assetname_to_bytes = __vite__wasmModule.assetname_to_bytes;
var assetname_from_bytes = __vite__wasmModule.assetname_from_bytes;
var assetname_to_hex = __vite__wasmModule.assetname_to_hex;
var assetname_from_hex = __vite__wasmModule.assetname_from_hex;
var assetname_to_json = __vite__wasmModule.assetname_to_json;
var assetname_to_js_value = __vite__wasmModule.assetname_to_js_value;
var assetname_from_json = __vite__wasmModule.assetname_from_json;
var assetname_new = __vite__wasmModule.assetname_new;
var assetname_name = __vite__wasmModule.assetname_name;
var __wbg_assetnames_free = __vite__wasmModule.__wbg_assetnames_free;
var assetnames_to_bytes = __vite__wasmModule.assetnames_to_bytes;
var assetnames_from_bytes = __vite__wasmModule.assetnames_from_bytes;
var assetnames_to_hex = __vite__wasmModule.assetnames_to_hex;
var assetnames_from_hex = __vite__wasmModule.assetnames_from_hex;
var assetnames_to_json = __vite__wasmModule.assetnames_to_json;
var assetnames_to_js_value = __vite__wasmModule.assetnames_to_js_value;
var assetnames_from_json = __vite__wasmModule.assetnames_from_json;
var assetnames_new = __vite__wasmModule.assetnames_new;
var assetnames_len = __vite__wasmModule.assetnames_len;
var assetnames_get = __vite__wasmModule.assetnames_get;
var assetnames_add = __vite__wasmModule.assetnames_add;
var __wbg_assets_free = __vite__wasmModule.__wbg_assets_free;
var assets_to_bytes = __vite__wasmModule.assets_to_bytes;
var assets_from_bytes = __vite__wasmModule.assets_from_bytes;
var assets_to_hex = __vite__wasmModule.assets_to_hex;
var assets_from_hex = __vite__wasmModule.assets_from_hex;
var assets_to_json = __vite__wasmModule.assets_to_json;
var assets_to_js_value = __vite__wasmModule.assets_to_js_value;
var assets_from_json = __vite__wasmModule.assets_from_json;
var assets_new = __vite__wasmModule.assets_new;
var assets_len = __vite__wasmModule.assets_len;
var assets_insert = __vite__wasmModule.assets_insert;
var assets_get = __vite__wasmModule.assets_get;
var assets_keys = __vite__wasmModule.assets_keys;
var __wbg_multiasset_free = __vite__wasmModule.__wbg_multiasset_free;
var multiasset_to_bytes = __vite__wasmModule.multiasset_to_bytes;
var multiasset_from_bytes = __vite__wasmModule.multiasset_from_bytes;
var multiasset_to_hex = __vite__wasmModule.multiasset_to_hex;
var multiasset_from_hex = __vite__wasmModule.multiasset_from_hex;
var multiasset_to_json = __vite__wasmModule.multiasset_to_json;
var multiasset_to_js_value = __vite__wasmModule.multiasset_to_js_value;
var multiasset_from_json = __vite__wasmModule.multiasset_from_json;
var multiasset_new = __vite__wasmModule.multiasset_new;
var multiasset_len = __vite__wasmModule.multiasset_len;
var multiasset_insert = __vite__wasmModule.multiasset_insert;
var multiasset_get = __vite__wasmModule.multiasset_get;
var multiasset_set_asset = __vite__wasmModule.multiasset_set_asset;
var multiasset_get_asset = __vite__wasmModule.multiasset_get_asset;
var multiasset_keys = __vite__wasmModule.multiasset_keys;
var multiasset_sub = __vite__wasmModule.multiasset_sub;
var __wbg_mintsassets_free = __vite__wasmModule.__wbg_mintsassets_free;
var __wbg_mintassets_free = __vite__wasmModule.__wbg_mintassets_free;
var mintassets_new = __vite__wasmModule.mintassets_new;
var mintassets_new_from_entry = __vite__wasmModule.mintassets_new_from_entry;
var mintassets_len = __vite__wasmModule.mintassets_len;
var mintassets_insert = __vite__wasmModule.mintassets_insert;
var mintassets_get = __vite__wasmModule.mintassets_get;
var mintassets_keys = __vite__wasmModule.mintassets_keys;
var __wbg_mint_free = __vite__wasmModule.__wbg_mint_free;
var mint_to_bytes = __vite__wasmModule.mint_to_bytes;
var mint_from_bytes = __vite__wasmModule.mint_from_bytes;
var mint_to_hex = __vite__wasmModule.mint_to_hex;
var mint_from_hex = __vite__wasmModule.mint_from_hex;
var mint_to_json = __vite__wasmModule.mint_to_json;
var mint_to_js_value = __vite__wasmModule.mint_to_js_value;
var mint_from_json = __vite__wasmModule.mint_from_json;
var mint_new = __vite__wasmModule.mint_new;
var mint_new_from_entry = __vite__wasmModule.mint_new_from_entry;
var mint_len = __vite__wasmModule.mint_len;
var mint_insert = __vite__wasmModule.mint_insert;
var mint_get = __vite__wasmModule.mint_get;
var mint_get_all = __vite__wasmModule.mint_get_all;
var mint_keys = __vite__wasmModule.mint_keys;
var mint_as_positive_multiasset = __vite__wasmModule.mint_as_positive_multiasset;
var mint_as_negative_multiasset = __vite__wasmModule.mint_as_negative_multiasset;
var __wbg_networkid_free = __vite__wasmModule.__wbg_networkid_free;
var networkid_to_bytes = __vite__wasmModule.networkid_to_bytes;
var networkid_from_bytes = __vite__wasmModule.networkid_from_bytes;
var networkid_to_hex = __vite__wasmModule.networkid_to_hex;
var networkid_from_hex = __vite__wasmModule.networkid_from_hex;
var networkid_to_json = __vite__wasmModule.networkid_to_json;
var networkid_to_js_value = __vite__wasmModule.networkid_to_js_value;
var networkid_from_json = __vite__wasmModule.networkid_from_json;
var networkid_testnet = __vite__wasmModule.networkid_testnet;
var networkid_mainnet = __vite__wasmModule.networkid_mainnet;
var networkid_kind = __vite__wasmModule.networkid_kind;
var __wbg_metadatamap_free = __vite__wasmModule.__wbg_metadatamap_free;
var metadatamap_to_bytes = __vite__wasmModule.metadatamap_to_bytes;
var metadatamap_from_bytes = __vite__wasmModule.metadatamap_from_bytes;
var metadatamap_to_hex = __vite__wasmModule.metadatamap_to_hex;
var metadatamap_from_hex = __vite__wasmModule.metadatamap_from_hex;
var metadatamap_new = __vite__wasmModule.metadatamap_new;
var metadatamap_len = __vite__wasmModule.metadatamap_len;
var metadatamap_insert = __vite__wasmModule.metadatamap_insert;
var metadatamap_insert_str = __vite__wasmModule.metadatamap_insert_str;
var metadatamap_insert_i32 = __vite__wasmModule.metadatamap_insert_i32;
var metadatamap_get = __vite__wasmModule.metadatamap_get;
var metadatamap_get_str = __vite__wasmModule.metadatamap_get_str;
var metadatamap_get_i32 = __vite__wasmModule.metadatamap_get_i32;
var metadatamap_has = __vite__wasmModule.metadatamap_has;
var metadatamap_keys = __vite__wasmModule.metadatamap_keys;
var __wbg_metadatalist_free = __vite__wasmModule.__wbg_metadatalist_free;
var metadatalist_to_bytes = __vite__wasmModule.metadatalist_to_bytes;
var metadatalist_from_bytes = __vite__wasmModule.metadatalist_from_bytes;
var metadatalist_to_hex = __vite__wasmModule.metadatalist_to_hex;
var metadatalist_from_hex = __vite__wasmModule.metadatalist_from_hex;
var metadatalist_new = __vite__wasmModule.metadatalist_new;
var metadatalist_len = __vite__wasmModule.metadatalist_len;
var metadatalist_get = __vite__wasmModule.metadatalist_get;
var metadatalist_add = __vite__wasmModule.metadatalist_add;
var __wbg_transactionmetadatum_free = __vite__wasmModule.__wbg_transactionmetadatum_free;
var transactionmetadatum_to_bytes = __vite__wasmModule.transactionmetadatum_to_bytes;
var transactionmetadatum_from_bytes = __vite__wasmModule.transactionmetadatum_from_bytes;
var transactionmetadatum_to_hex = __vite__wasmModule.transactionmetadatum_to_hex;
var transactionmetadatum_from_hex = __vite__wasmModule.transactionmetadatum_from_hex;
var transactionmetadatum_new_map = __vite__wasmModule.transactionmetadatum_new_map;
var transactionmetadatum_new_list = __vite__wasmModule.transactionmetadatum_new_list;
var transactionmetadatum_new_int = __vite__wasmModule.transactionmetadatum_new_int;
var transactionmetadatum_new_bytes = __vite__wasmModule.transactionmetadatum_new_bytes;
var transactionmetadatum_new_text = __vite__wasmModule.transactionmetadatum_new_text;
var transactionmetadatum_kind = __vite__wasmModule.transactionmetadatum_kind;
var transactionmetadatum_as_map = __vite__wasmModule.transactionmetadatum_as_map;
var transactionmetadatum_as_list = __vite__wasmModule.transactionmetadatum_as_list;
var transactionmetadatum_as_int = __vite__wasmModule.transactionmetadatum_as_int;
var transactionmetadatum_as_bytes = __vite__wasmModule.transactionmetadatum_as_bytes;
var transactionmetadatum_as_text = __vite__wasmModule.transactionmetadatum_as_text;
var __wbg_transactionmetadatumlabels_free = __vite__wasmModule.__wbg_transactionmetadatumlabels_free;
var transactionmetadatumlabels_to_bytes = __vite__wasmModule.transactionmetadatumlabels_to_bytes;
var transactionmetadatumlabels_from_bytes = __vite__wasmModule.transactionmetadatumlabels_from_bytes;
var transactionmetadatumlabels_to_hex = __vite__wasmModule.transactionmetadatumlabels_to_hex;
var transactionmetadatumlabels_from_hex = __vite__wasmModule.transactionmetadatumlabels_from_hex;
var transactionmetadatumlabels_new = __vite__wasmModule.transactionmetadatumlabels_new;
var transactionmetadatumlabels_len = __vite__wasmModule.transactionmetadatumlabels_len;
var transactionmetadatumlabels_get = __vite__wasmModule.transactionmetadatumlabels_get;
var transactionmetadatumlabels_add = __vite__wasmModule.transactionmetadatumlabels_add;
var __wbg_generaltransactionmetadata_free = __vite__wasmModule.__wbg_generaltransactionmetadata_free;
var generaltransactionmetadata_to_bytes = __vite__wasmModule.generaltransactionmetadata_to_bytes;
var generaltransactionmetadata_from_bytes = __vite__wasmModule.generaltransactionmetadata_from_bytes;
var generaltransactionmetadata_to_hex = __vite__wasmModule.generaltransactionmetadata_to_hex;
var generaltransactionmetadata_from_hex = __vite__wasmModule.generaltransactionmetadata_from_hex;
var generaltransactionmetadata_to_json = __vite__wasmModule.generaltransactionmetadata_to_json;
var generaltransactionmetadata_to_js_value = __vite__wasmModule.generaltransactionmetadata_to_js_value;
var generaltransactionmetadata_from_json = __vite__wasmModule.generaltransactionmetadata_from_json;
var generaltransactionmetadata_new = __vite__wasmModule.generaltransactionmetadata_new;
var generaltransactionmetadata_len = __vite__wasmModule.generaltransactionmetadata_len;
var generaltransactionmetadata_insert = __vite__wasmModule.generaltransactionmetadata_insert;
var generaltransactionmetadata_get = __vite__wasmModule.generaltransactionmetadata_get;
var generaltransactionmetadata_keys = __vite__wasmModule.generaltransactionmetadata_keys;
var __wbg_auxiliarydata_free = __vite__wasmModule.__wbg_auxiliarydata_free;
var auxiliarydata_to_bytes = __vite__wasmModule.auxiliarydata_to_bytes;
var auxiliarydata_from_bytes = __vite__wasmModule.auxiliarydata_from_bytes;
var auxiliarydata_to_hex = __vite__wasmModule.auxiliarydata_to_hex;
var auxiliarydata_from_hex = __vite__wasmModule.auxiliarydata_from_hex;
var auxiliarydata_to_json = __vite__wasmModule.auxiliarydata_to_json;
var auxiliarydata_to_js_value = __vite__wasmModule.auxiliarydata_to_js_value;
var auxiliarydata_from_json = __vite__wasmModule.auxiliarydata_from_json;
var auxiliarydata_new = __vite__wasmModule.auxiliarydata_new;
var auxiliarydata_metadata = __vite__wasmModule.auxiliarydata_metadata;
var auxiliarydata_set_metadata = __vite__wasmModule.auxiliarydata_set_metadata;
var auxiliarydata_native_scripts = __vite__wasmModule.auxiliarydata_native_scripts;
var auxiliarydata_set_native_scripts = __vite__wasmModule.auxiliarydata_set_native_scripts;
var auxiliarydata_plutus_scripts = __vite__wasmModule.auxiliarydata_plutus_scripts;
var auxiliarydata_set_plutus_scripts = __vite__wasmModule.auxiliarydata_set_plutus_scripts;
var auxiliarydata_prefer_alonzo_format = __vite__wasmModule.auxiliarydata_prefer_alonzo_format;
var auxiliarydata_set_prefer_alonzo_format = __vite__wasmModule.auxiliarydata_set_prefer_alonzo_format;
var encode_arbitrary_bytes_as_metadatum = __vite__wasmModule.encode_arbitrary_bytes_as_metadatum;
var decode_arbitrary_bytes_from_metadatum = __vite__wasmModule.decode_arbitrary_bytes_from_metadatum;
var encode_json_str_to_metadatum = __vite__wasmModule.encode_json_str_to_metadatum;
var decode_metadatum_to_json_str = __vite__wasmModule.decode_metadatum_to_json_str;
var __wbg_inputwithscriptwitness_free = __vite__wasmModule.__wbg_inputwithscriptwitness_free;
var inputwithscriptwitness_new_with_native_script_witness = __vite__wasmModule.inputwithscriptwitness_new_with_native_script_witness;
var inputwithscriptwitness_new_with_plutus_witness = __vite__wasmModule.inputwithscriptwitness_new_with_plutus_witness;
var inputwithscriptwitness_input = __vite__wasmModule.inputwithscriptwitness_input;
var __wbg_inputswithscriptwitness_free = __vite__wasmModule.__wbg_inputswithscriptwitness_free;
var inputswithscriptwitness_new = __vite__wasmModule.inputswithscriptwitness_new;
var inputswithscriptwitness_add = __vite__wasmModule.inputswithscriptwitness_add;
var inputswithscriptwitness_get = __vite__wasmModule.inputswithscriptwitness_get;
var inputswithscriptwitness_len = __vite__wasmModule.inputswithscriptwitness_len;
var __wbg_plutusscriptsource_free = __vite__wasmModule.__wbg_plutusscriptsource_free;
var plutusscriptsource_new = __vite__wasmModule.plutusscriptsource_new;
var plutusscriptsource_new_ref_input = __vite__wasmModule.plutusscriptsource_new_ref_input;
var plutusscriptsource_new_ref_input_with_lang_ver = __vite__wasmModule.plutusscriptsource_new_ref_input_with_lang_ver;
var __wbg_datumsource_free = __vite__wasmModule.__wbg_datumsource_free;
var datumsource_new = __vite__wasmModule.datumsource_new;
var datumsource_new_ref_input = __vite__wasmModule.datumsource_new_ref_input;
var __wbg_plutuswitness_free = __vite__wasmModule.__wbg_plutuswitness_free;
var plutuswitness_new = __vite__wasmModule.plutuswitness_new;
var plutuswitness_new_with_ref = __vite__wasmModule.plutuswitness_new_with_ref;
var plutuswitness_new_without_datum = __vite__wasmModule.plutuswitness_new_without_datum;
var plutuswitness_new_with_ref_without_datum = __vite__wasmModule.plutuswitness_new_with_ref_without_datum;
var plutuswitness_script = __vite__wasmModule.plutuswitness_script;
var plutuswitness_datum = __vite__wasmModule.plutuswitness_datum;
var plutuswitness_redeemer = __vite__wasmModule.plutuswitness_redeemer;
var __wbg_plutuswitnesses_free = __vite__wasmModule.__wbg_plutuswitnesses_free;
var plutuswitnesses_new = __vite__wasmModule.plutuswitnesses_new;
var plutuswitnesses_len = __vite__wasmModule.plutuswitnesses_len;
var plutuswitnesses_get = __vite__wasmModule.plutuswitnesses_get;
var plutuswitnesses_add = __vite__wasmModule.plutuswitnesses_add;
var __wbg_txinputsbuilder_free = __vite__wasmModule.__wbg_txinputsbuilder_free;
var txinputsbuilder_new = __vite__wasmModule.txinputsbuilder_new;
var txinputsbuilder_add_key_input = __vite__wasmModule.txinputsbuilder_add_key_input;
var txinputsbuilder_add_script_input = __vite__wasmModule.txinputsbuilder_add_script_input;
var txinputsbuilder_add_native_script_input = __vite__wasmModule.txinputsbuilder_add_native_script_input;
var txinputsbuilder_add_plutus_script_input = __vite__wasmModule.txinputsbuilder_add_plutus_script_input;
var txinputsbuilder_add_bootstrap_input = __vite__wasmModule.txinputsbuilder_add_bootstrap_input;
var txinputsbuilder_add_input = __vite__wasmModule.txinputsbuilder_add_input;
var txinputsbuilder_count_missing_input_scripts = __vite__wasmModule.txinputsbuilder_count_missing_input_scripts;
var txinputsbuilder_add_required_native_input_scripts = __vite__wasmModule.txinputsbuilder_add_required_native_input_scripts;
var txinputsbuilder_add_required_plutus_input_scripts = __vite__wasmModule.txinputsbuilder_add_required_plutus_input_scripts;
var txinputsbuilder_add_required_script_input_witnesses = __vite__wasmModule.txinputsbuilder_add_required_script_input_witnesses;
var txinputsbuilder_get_ref_inputs = __vite__wasmModule.txinputsbuilder_get_ref_inputs;
var txinputsbuilder_get_native_input_scripts = __vite__wasmModule.txinputsbuilder_get_native_input_scripts;
var txinputsbuilder_get_plutus_input_scripts = __vite__wasmModule.txinputsbuilder_get_plutus_input_scripts;
var txinputsbuilder_len = __vite__wasmModule.txinputsbuilder_len;
var txinputsbuilder_add_required_signer = __vite__wasmModule.txinputsbuilder_add_required_signer;
var txinputsbuilder_add_required_signers = __vite__wasmModule.txinputsbuilder_add_required_signers;
var txinputsbuilder_total_value = __vite__wasmModule.txinputsbuilder_total_value;
var txinputsbuilder_inputs = __vite__wasmModule.txinputsbuilder_inputs;
var txinputsbuilder_inputs_option = __vite__wasmModule.txinputsbuilder_inputs_option;
var __wbg_plutusscript_free = __vite__wasmModule.__wbg_plutusscript_free;
var plutusscript_to_bytes = __vite__wasmModule.plutusscript_to_bytes;
var plutusscript_from_bytes = __vite__wasmModule.plutusscript_from_bytes;
var plutusscript_to_hex = __vite__wasmModule.plutusscript_to_hex;
var plutusscript_from_hex = __vite__wasmModule.plutusscript_from_hex;
var plutusscript_new = __vite__wasmModule.plutusscript_new;
var plutusscript_new_v2 = __vite__wasmModule.plutusscript_new_v2;
var plutusscript_new_with_version = __vite__wasmModule.plutusscript_new_with_version;
var plutusscript_bytes = __vite__wasmModule.plutusscript_bytes;
var plutusscript_from_bytes_v2 = __vite__wasmModule.plutusscript_from_bytes_v2;
var plutusscript_from_bytes_with_version = __vite__wasmModule.plutusscript_from_bytes_with_version;
var plutusscript_from_hex_with_version = __vite__wasmModule.plutusscript_from_hex_with_version;
var plutusscript_hash = __vite__wasmModule.plutusscript_hash;
var plutusscript_language_version = __vite__wasmModule.plutusscript_language_version;
var __wbg_plutusscripts_free = __vite__wasmModule.__wbg_plutusscripts_free;
var plutusscripts_to_bytes = __vite__wasmModule.plutusscripts_to_bytes;
var plutusscripts_from_bytes = __vite__wasmModule.plutusscripts_from_bytes;
var plutusscripts_to_hex = __vite__wasmModule.plutusscripts_to_hex;
var plutusscripts_from_hex = __vite__wasmModule.plutusscripts_from_hex;
var plutusscripts_to_json = __vite__wasmModule.plutusscripts_to_json;
var plutusscripts_to_js_value = __vite__wasmModule.plutusscripts_to_js_value;
var plutusscripts_from_json = __vite__wasmModule.plutusscripts_from_json;
var plutusscripts_new = __vite__wasmModule.plutusscripts_new;
var plutusscripts_len = __vite__wasmModule.plutusscripts_len;
var plutusscripts_get = __vite__wasmModule.plutusscripts_get;
var plutusscripts_add = __vite__wasmModule.plutusscripts_add;
var __wbg_constrplutusdata_free = __vite__wasmModule.__wbg_constrplutusdata_free;
var constrplutusdata_to_bytes = __vite__wasmModule.constrplutusdata_to_bytes;
var constrplutusdata_from_bytes = __vite__wasmModule.constrplutusdata_from_bytes;
var constrplutusdata_to_hex = __vite__wasmModule.constrplutusdata_to_hex;
var constrplutusdata_from_hex = __vite__wasmModule.constrplutusdata_from_hex;
var constrplutusdata_alternative = __vite__wasmModule.constrplutusdata_alternative;
var constrplutusdata_data = __vite__wasmModule.constrplutusdata_data;
var constrplutusdata_new = __vite__wasmModule.constrplutusdata_new;
var __wbg_costmodel_free = __vite__wasmModule.__wbg_costmodel_free;
var costmodel_to_bytes = __vite__wasmModule.costmodel_to_bytes;
var costmodel_from_bytes = __vite__wasmModule.costmodel_from_bytes;
var costmodel_to_hex = __vite__wasmModule.costmodel_to_hex;
var costmodel_from_hex = __vite__wasmModule.costmodel_from_hex;
var costmodel_to_json = __vite__wasmModule.costmodel_to_json;
var costmodel_to_js_value = __vite__wasmModule.costmodel_to_js_value;
var costmodel_from_json = __vite__wasmModule.costmodel_from_json;
var costmodel_new = __vite__wasmModule.costmodel_new;
var costmodel_set = __vite__wasmModule.costmodel_set;
var costmodel_get = __vite__wasmModule.costmodel_get;
var costmodel_len = __vite__wasmModule.costmodel_len;
var __wbg_costmdls_free = __vite__wasmModule.__wbg_costmdls_free;
var costmdls_to_bytes = __vite__wasmModule.costmdls_to_bytes;
var costmdls_from_bytes = __vite__wasmModule.costmdls_from_bytes;
var costmdls_to_hex = __vite__wasmModule.costmdls_to_hex;
var costmdls_from_hex = __vite__wasmModule.costmdls_from_hex;
var costmdls_to_json = __vite__wasmModule.costmdls_to_json;
var costmdls_to_js_value = __vite__wasmModule.costmdls_to_js_value;
var costmdls_from_json = __vite__wasmModule.costmdls_from_json;
var costmdls_new = __vite__wasmModule.costmdls_new;
var costmdls_len = __vite__wasmModule.costmdls_len;
var costmdls_insert = __vite__wasmModule.costmdls_insert;
var costmdls_get = __vite__wasmModule.costmdls_get;
var costmdls_keys = __vite__wasmModule.costmdls_keys;
var costmdls_retain_language_versions = __vite__wasmModule.costmdls_retain_language_versions;
var __wbg_exunitprices_free = __vite__wasmModule.__wbg_exunitprices_free;
var exunitprices_to_bytes = __vite__wasmModule.exunitprices_to_bytes;
var exunitprices_from_bytes = __vite__wasmModule.exunitprices_from_bytes;
var exunitprices_to_hex = __vite__wasmModule.exunitprices_to_hex;
var exunitprices_from_hex = __vite__wasmModule.exunitprices_from_hex;
var exunitprices_to_json = __vite__wasmModule.exunitprices_to_json;
var exunitprices_to_js_value = __vite__wasmModule.exunitprices_to_js_value;
var exunitprices_from_json = __vite__wasmModule.exunitprices_from_json;
var exunitprices_mem_price = __vite__wasmModule.exunitprices_mem_price;
var exunitprices_step_price = __vite__wasmModule.exunitprices_step_price;
var exunitprices_new = __vite__wasmModule.exunitprices_new;
var __wbg_exunits_free = __vite__wasmModule.__wbg_exunits_free;
var exunits_to_bytes = __vite__wasmModule.exunits_to_bytes;
var exunits_from_bytes = __vite__wasmModule.exunits_from_bytes;
var exunits_to_hex = __vite__wasmModule.exunits_to_hex;
var exunits_from_hex = __vite__wasmModule.exunits_from_hex;
var exunits_to_json = __vite__wasmModule.exunits_to_json;
var exunits_to_js_value = __vite__wasmModule.exunits_to_js_value;
var exunits_from_json = __vite__wasmModule.exunits_from_json;
var exunits_mem = __vite__wasmModule.exunits_mem;
var exunits_steps = __vite__wasmModule.exunits_steps;
var exunits_new = __vite__wasmModule.exunits_new;
var __wbg_language_free = __vite__wasmModule.__wbg_language_free;
var language_to_bytes = __vite__wasmModule.language_to_bytes;
var language_from_bytes = __vite__wasmModule.language_from_bytes;
var language_to_hex = __vite__wasmModule.language_to_hex;
var language_from_hex = __vite__wasmModule.language_from_hex;
var language_to_json = __vite__wasmModule.language_to_json;
var language_to_js_value = __vite__wasmModule.language_to_js_value;
var language_from_json = __vite__wasmModule.language_from_json;
var language_new_plutus_v1 = __vite__wasmModule.language_new_plutus_v1;
var language_new_plutus_v2 = __vite__wasmModule.language_new_plutus_v2;
var language_kind = __vite__wasmModule.language_kind;
var __wbg_languages_free = __vite__wasmModule.__wbg_languages_free;
var languages_new = __vite__wasmModule.languages_new;
var languages_len = __vite__wasmModule.languages_len;
var languages_get = __vite__wasmModule.languages_get;
var languages_add = __vite__wasmModule.languages_add;
var languages_list = __vite__wasmModule.languages_list;
var __wbg_plutusmap_free = __vite__wasmModule.__wbg_plutusmap_free;
var plutusmap_to_bytes = __vite__wasmModule.plutusmap_to_bytes;
var plutusmap_from_bytes = __vite__wasmModule.plutusmap_from_bytes;
var plutusmap_to_hex = __vite__wasmModule.plutusmap_to_hex;
var plutusmap_from_hex = __vite__wasmModule.plutusmap_from_hex;
var plutusmap_new = __vite__wasmModule.plutusmap_new;
var plutusmap_len = __vite__wasmModule.plutusmap_len;
var plutusmap_insert = __vite__wasmModule.plutusmap_insert;
var plutusmap_get = __vite__wasmModule.plutusmap_get;
var plutusmap_keys = __vite__wasmModule.plutusmap_keys;
var __wbg_plutusdata_free = __vite__wasmModule.__wbg_plutusdata_free;
var plutusdata_to_bytes = __vite__wasmModule.plutusdata_to_bytes;
var plutusdata_from_bytes = __vite__wasmModule.plutusdata_from_bytes;
var plutusdata_to_hex = __vite__wasmModule.plutusdata_to_hex;
var plutusdata_from_hex = __vite__wasmModule.plutusdata_from_hex;
var plutusdata_new_constr_plutus_data = __vite__wasmModule.plutusdata_new_constr_plutus_data;
var plutusdata_new_empty_constr_plutus_data = __vite__wasmModule.plutusdata_new_empty_constr_plutus_data;
var plutusdata_new_map = __vite__wasmModule.plutusdata_new_map;
var plutusdata_new_list = __vite__wasmModule.plutusdata_new_list;
var plutusdata_new_integer = __vite__wasmModule.plutusdata_new_integer;
var plutusdata_new_bytes = __vite__wasmModule.plutusdata_new_bytes;
var plutusdata_kind = __vite__wasmModule.plutusdata_kind;
var plutusdata_as_constr_plutus_data = __vite__wasmModule.plutusdata_as_constr_plutus_data;
var plutusdata_as_map = __vite__wasmModule.plutusdata_as_map;
var plutusdata_as_list = __vite__wasmModule.plutusdata_as_list;
var plutusdata_as_integer = __vite__wasmModule.plutusdata_as_integer;
var plutusdata_as_bytes = __vite__wasmModule.plutusdata_as_bytes;
var plutusdata_to_json = __vite__wasmModule.plutusdata_to_json;
var plutusdata_from_json = __vite__wasmModule.plutusdata_from_json;
var __wbg_plutuslist_free = __vite__wasmModule.__wbg_plutuslist_free;
var plutuslist_to_bytes = __vite__wasmModule.plutuslist_to_bytes;
var plutuslist_from_bytes = __vite__wasmModule.plutuslist_from_bytes;
var plutuslist_to_hex = __vite__wasmModule.plutuslist_to_hex;
var plutuslist_from_hex = __vite__wasmModule.plutuslist_from_hex;
var plutuslist_new = __vite__wasmModule.plutuslist_new;
var plutuslist_len = __vite__wasmModule.plutuslist_len;
var plutuslist_get = __vite__wasmModule.plutuslist_get;
var plutuslist_add = __vite__wasmModule.plutuslist_add;
var __wbg_redeemer_free = __vite__wasmModule.__wbg_redeemer_free;
var redeemer_to_bytes = __vite__wasmModule.redeemer_to_bytes;
var redeemer_from_bytes = __vite__wasmModule.redeemer_from_bytes;
var redeemer_to_hex = __vite__wasmModule.redeemer_to_hex;
var redeemer_from_hex = __vite__wasmModule.redeemer_from_hex;
var redeemer_to_json = __vite__wasmModule.redeemer_to_json;
var redeemer_to_js_value = __vite__wasmModule.redeemer_to_js_value;
var redeemer_from_json = __vite__wasmModule.redeemer_from_json;
var redeemer_tag = __vite__wasmModule.redeemer_tag;
var redeemer_index = __vite__wasmModule.redeemer_index;
var redeemer_data = __vite__wasmModule.redeemer_data;
var redeemer_ex_units = __vite__wasmModule.redeemer_ex_units;
var redeemer_new = __vite__wasmModule.redeemer_new;
var __wbg_redeemertag_free = __vite__wasmModule.__wbg_redeemertag_free;
var redeemertag_to_bytes = __vite__wasmModule.redeemertag_to_bytes;
var redeemertag_from_bytes = __vite__wasmModule.redeemertag_from_bytes;
var redeemertag_to_hex = __vite__wasmModule.redeemertag_to_hex;
var redeemertag_from_hex = __vite__wasmModule.redeemertag_from_hex;
var redeemertag_to_json = __vite__wasmModule.redeemertag_to_json;
var redeemertag_to_js_value = __vite__wasmModule.redeemertag_to_js_value;
var redeemertag_from_json = __vite__wasmModule.redeemertag_from_json;
var redeemertag_new_spend = __vite__wasmModule.redeemertag_new_spend;
var redeemertag_new_mint = __vite__wasmModule.redeemertag_new_mint;
var redeemertag_new_cert = __vite__wasmModule.redeemertag_new_cert;
var redeemertag_new_reward = __vite__wasmModule.redeemertag_new_reward;
var redeemertag_kind = __vite__wasmModule.redeemertag_kind;
var __wbg_redeemers_free = __vite__wasmModule.__wbg_redeemers_free;
var redeemers_to_bytes = __vite__wasmModule.redeemers_to_bytes;
var redeemers_from_bytes = __vite__wasmModule.redeemers_from_bytes;
var redeemers_to_hex = __vite__wasmModule.redeemers_to_hex;
var redeemers_from_hex = __vite__wasmModule.redeemers_from_hex;
var redeemers_to_json = __vite__wasmModule.redeemers_to_json;
var redeemers_to_js_value = __vite__wasmModule.redeemers_to_js_value;
var redeemers_from_json = __vite__wasmModule.redeemers_from_json;
var redeemers_new = __vite__wasmModule.redeemers_new;
var redeemers_len = __vite__wasmModule.redeemers_len;
var redeemers_get = __vite__wasmModule.redeemers_get;
var redeemers_add = __vite__wasmModule.redeemers_add;
var redeemers_total_ex_units = __vite__wasmModule.redeemers_total_ex_units;
var __wbg_strings_free = __vite__wasmModule.__wbg_strings_free;
var strings_new = __vite__wasmModule.strings_new;
var strings_len = __vite__wasmModule.strings_len;
var strings_get = __vite__wasmModule.strings_get;
var strings_add = __vite__wasmModule.strings_add;
var encode_json_str_to_plutus_datum = __vite__wasmModule.encode_json_str_to_plutus_datum;
var decode_plutus_datum_to_json_str = __vite__wasmModule.decode_plutus_datum_to_json_str;
var __wbg_txbuilderconstants_free = __vite__wasmModule.__wbg_txbuilderconstants_free;
var txbuilderconstants_plutus_default_cost_models = __vite__wasmModule.txbuilderconstants_plutus_default_cost_models;
var txbuilderconstants_plutus_alonzo_cost_models = __vite__wasmModule.txbuilderconstants_plutus_alonzo_cost_models;
var txbuilderconstants_plutus_vasil_cost_models = __vite__wasmModule.txbuilderconstants_plutus_vasil_cost_models;
var __wbg_transactionbuilderconfig_free = __vite__wasmModule.__wbg_transactionbuilderconfig_free;
var __wbg_transactionbuilderconfigbuilder_free = __vite__wasmModule.__wbg_transactionbuilderconfigbuilder_free;
var transactionbuilderconfigbuilder_new = __vite__wasmModule.transactionbuilderconfigbuilder_new;
var transactionbuilderconfigbuilder_fee_algo = __vite__wasmModule.transactionbuilderconfigbuilder_fee_algo;
var transactionbuilderconfigbuilder_coins_per_utxo_word = __vite__wasmModule.transactionbuilderconfigbuilder_coins_per_utxo_word;
var transactionbuilderconfigbuilder_coins_per_utxo_byte = __vite__wasmModule.transactionbuilderconfigbuilder_coins_per_utxo_byte;
var transactionbuilderconfigbuilder_ex_unit_prices = __vite__wasmModule.transactionbuilderconfigbuilder_ex_unit_prices;
var transactionbuilderconfigbuilder_pool_deposit = __vite__wasmModule.transactionbuilderconfigbuilder_pool_deposit;
var transactionbuilderconfigbuilder_key_deposit = __vite__wasmModule.transactionbuilderconfigbuilder_key_deposit;
var transactionbuilderconfigbuilder_max_value_size = __vite__wasmModule.transactionbuilderconfigbuilder_max_value_size;
var transactionbuilderconfigbuilder_max_tx_size = __vite__wasmModule.transactionbuilderconfigbuilder_max_tx_size;
var transactionbuilderconfigbuilder_prefer_pure_change = __vite__wasmModule.transactionbuilderconfigbuilder_prefer_pure_change;
var transactionbuilderconfigbuilder_build = __vite__wasmModule.transactionbuilderconfigbuilder_build;
var __wbg_transactionbuilder_free = __vite__wasmModule.__wbg_transactionbuilder_free;
var transactionbuilder_add_inputs_from = __vite__wasmModule.transactionbuilder_add_inputs_from;
var transactionbuilder_set_inputs = __vite__wasmModule.transactionbuilder_set_inputs;
var transactionbuilder_set_collateral = __vite__wasmModule.transactionbuilder_set_collateral;
var transactionbuilder_set_collateral_return = __vite__wasmModule.transactionbuilder_set_collateral_return;
var transactionbuilder_set_collateral_return_and_total = __vite__wasmModule.transactionbuilder_set_collateral_return_and_total;
var transactionbuilder_set_total_collateral = __vite__wasmModule.transactionbuilder_set_total_collateral;
var transactionbuilder_set_total_collateral_and_return = __vite__wasmModule.transactionbuilder_set_total_collateral_and_return;
var transactionbuilder_add_reference_input = __vite__wasmModule.transactionbuilder_add_reference_input;
var transactionbuilder_add_key_input = __vite__wasmModule.transactionbuilder_add_key_input;
var transactionbuilder_add_script_input = __vite__wasmModule.transactionbuilder_add_script_input;
var transactionbuilder_add_native_script_input = __vite__wasmModule.transactionbuilder_add_native_script_input;
var transactionbuilder_add_plutus_script_input = __vite__wasmModule.transactionbuilder_add_plutus_script_input;
var transactionbuilder_add_bootstrap_input = __vite__wasmModule.transactionbuilder_add_bootstrap_input;
var transactionbuilder_add_input = __vite__wasmModule.transactionbuilder_add_input;
var transactionbuilder_count_missing_input_scripts = __vite__wasmModule.transactionbuilder_count_missing_input_scripts;
var transactionbuilder_add_required_native_input_scripts = __vite__wasmModule.transactionbuilder_add_required_native_input_scripts;
var transactionbuilder_add_required_plutus_input_scripts = __vite__wasmModule.transactionbuilder_add_required_plutus_input_scripts;
var transactionbuilder_get_native_input_scripts = __vite__wasmModule.transactionbuilder_get_native_input_scripts;
var transactionbuilder_get_plutus_input_scripts = __vite__wasmModule.transactionbuilder_get_plutus_input_scripts;
var transactionbuilder_fee_for_input = __vite__wasmModule.transactionbuilder_fee_for_input;
var transactionbuilder_add_output = __vite__wasmModule.transactionbuilder_add_output;
var transactionbuilder_fee_for_output = __vite__wasmModule.transactionbuilder_fee_for_output;
var transactionbuilder_set_fee = __vite__wasmModule.transactionbuilder_set_fee;
var transactionbuilder_set_ttl = __vite__wasmModule.transactionbuilder_set_ttl;
var transactionbuilder_set_ttl_bignum = __vite__wasmModule.transactionbuilder_set_ttl_bignum;
var transactionbuilder_set_validity_start_interval = __vite__wasmModule.transactionbuilder_set_validity_start_interval;
var transactionbuilder_set_validity_start_interval_bignum = __vite__wasmModule.transactionbuilder_set_validity_start_interval_bignum;
var transactionbuilder_set_certs = __vite__wasmModule.transactionbuilder_set_certs;
var transactionbuilder_set_withdrawals = __vite__wasmModule.transactionbuilder_set_withdrawals;
var transactionbuilder_get_auxiliary_data = __vite__wasmModule.transactionbuilder_get_auxiliary_data;
var transactionbuilder_set_auxiliary_data = __vite__wasmModule.transactionbuilder_set_auxiliary_data;
var transactionbuilder_set_metadata = __vite__wasmModule.transactionbuilder_set_metadata;
var transactionbuilder_add_metadatum = __vite__wasmModule.transactionbuilder_add_metadatum;
var transactionbuilder_add_json_metadatum = __vite__wasmModule.transactionbuilder_add_json_metadatum;
var transactionbuilder_add_json_metadatum_with_schema = __vite__wasmModule.transactionbuilder_add_json_metadatum_with_schema;
var transactionbuilder_set_mint_builder = __vite__wasmModule.transactionbuilder_set_mint_builder;
var transactionbuilder_get_mint_builder = __vite__wasmModule.transactionbuilder_get_mint_builder;
var transactionbuilder_set_mint = __vite__wasmModule.transactionbuilder_set_mint;
var transactionbuilder_get_mint = __vite__wasmModule.transactionbuilder_get_mint;
var transactionbuilder_get_mint_scripts = __vite__wasmModule.transactionbuilder_get_mint_scripts;
var transactionbuilder_set_mint_asset = __vite__wasmModule.transactionbuilder_set_mint_asset;
var transactionbuilder_add_mint_asset = __vite__wasmModule.transactionbuilder_add_mint_asset;
var transactionbuilder_add_mint_asset_and_output = __vite__wasmModule.transactionbuilder_add_mint_asset_and_output;
var transactionbuilder_add_mint_asset_and_output_min_required_coin = __vite__wasmModule.transactionbuilder_add_mint_asset_and_output_min_required_coin;
var transactionbuilder_new = __vite__wasmModule.transactionbuilder_new;
var transactionbuilder_get_reference_inputs = __vite__wasmModule.transactionbuilder_get_reference_inputs;
var transactionbuilder_get_explicit_input = __vite__wasmModule.transactionbuilder_get_explicit_input;
var transactionbuilder_get_implicit_input = __vite__wasmModule.transactionbuilder_get_implicit_input;
var transactionbuilder_get_total_input = __vite__wasmModule.transactionbuilder_get_total_input;
var transactionbuilder_get_total_output = __vite__wasmModule.transactionbuilder_get_total_output;
var transactionbuilder_get_explicit_output = __vite__wasmModule.transactionbuilder_get_explicit_output;
var transactionbuilder_get_deposit = __vite__wasmModule.transactionbuilder_get_deposit;
var transactionbuilder_get_fee_if_set = __vite__wasmModule.transactionbuilder_get_fee_if_set;
var transactionbuilder_add_change_if_needed = __vite__wasmModule.transactionbuilder_add_change_if_needed;
var transactionbuilder_calc_script_data_hash = __vite__wasmModule.transactionbuilder_calc_script_data_hash;
var transactionbuilder_set_script_data_hash = __vite__wasmModule.transactionbuilder_set_script_data_hash;
var transactionbuilder_remove_script_data_hash = __vite__wasmModule.transactionbuilder_remove_script_data_hash;
var transactionbuilder_add_required_signer = __vite__wasmModule.transactionbuilder_add_required_signer;
var transactionbuilder_full_size = __vite__wasmModule.transactionbuilder_full_size;
var transactionbuilder_output_sizes = __vite__wasmModule.transactionbuilder_output_sizes;
var transactionbuilder_build = __vite__wasmModule.transactionbuilder_build;
var transactionbuilder_build_tx = __vite__wasmModule.transactionbuilder_build_tx;
var transactionbuilder_build_tx_unsafe = __vite__wasmModule.transactionbuilder_build_tx_unsafe;
var transactionbuilder_min_fee = __vite__wasmModule.transactionbuilder_min_fee;
var __wbg_linearfee_free = __vite__wasmModule.__wbg_linearfee_free;
var linearfee_constant = __vite__wasmModule.linearfee_constant;
var linearfee_coefficient = __vite__wasmModule.linearfee_coefficient;
var linearfee_new = __vite__wasmModule.linearfee_new;
var min_fee = __vite__wasmModule.min_fee;
var calculate_ex_units_ceil_cost = __vite__wasmModule.calculate_ex_units_ceil_cost;
var min_script_fee = __vite__wasmModule.min_script_fee;
var __wbg_mintwitness_free = __vite__wasmModule.__wbg_mintwitness_free;
var mintwitness_new_native_script = __vite__wasmModule.mintwitness_new_native_script;
var mintwitness_new_plutus_script = __vite__wasmModule.mintwitness_new_plutus_script;
var __wbg_mintbuilder_free = __vite__wasmModule.__wbg_mintbuilder_free;
var mintbuilder_new = __vite__wasmModule.mintbuilder_new;
var mintbuilder_add_asset = __vite__wasmModule.mintbuilder_add_asset;
var mintbuilder_set_asset = __vite__wasmModule.mintbuilder_set_asset;
var mintbuilder_build = __vite__wasmModule.mintbuilder_build;
var mintbuilder_get_native_scripts = __vite__wasmModule.mintbuilder_get_native_scripts;
var mintbuilder_get_plutus_witnesses = __vite__wasmModule.mintbuilder_get_plutus_witnesses;
var mintbuilder_get_ref_inputs = __vite__wasmModule.mintbuilder_get_ref_inputs;
var mintbuilder_get_redeeemers = __vite__wasmModule.mintbuilder_get_redeeemers;
var mintbuilder_has_plutus_scripts = __vite__wasmModule.mintbuilder_has_plutus_scripts;
var mintbuilder_has_native_scripts = __vite__wasmModule.mintbuilder_has_native_scripts;
var __wbg_fixedtransaction_free = __vite__wasmModule.__wbg_fixedtransaction_free;
var fixedtransaction_to_bytes = __vite__wasmModule.fixedtransaction_to_bytes;
var fixedtransaction_from_bytes = __vite__wasmModule.fixedtransaction_from_bytes;
var fixedtransaction_to_hex = __vite__wasmModule.fixedtransaction_to_hex;
var fixedtransaction_from_hex = __vite__wasmModule.fixedtransaction_from_hex;
var fixedtransaction_new = __vite__wasmModule.fixedtransaction_new;
var fixedtransaction_new_with_auxiliary = __vite__wasmModule.fixedtransaction_new_with_auxiliary;
var fixedtransaction_body = __vite__wasmModule.fixedtransaction_body;
var fixedtransaction_raw_body = __vite__wasmModule.fixedtransaction_raw_body;
var fixedtransaction_set_body = __vite__wasmModule.fixedtransaction_set_body;
var fixedtransaction_set_witness_set = __vite__wasmModule.fixedtransaction_set_witness_set;
var fixedtransaction_witness_set = __vite__wasmModule.fixedtransaction_witness_set;
var fixedtransaction_raw_witness_set = __vite__wasmModule.fixedtransaction_raw_witness_set;
var fixedtransaction_set_is_valid = __vite__wasmModule.fixedtransaction_set_is_valid;
var fixedtransaction_is_valid = __vite__wasmModule.fixedtransaction_is_valid;
var fixedtransaction_set_auxiliary_data = __vite__wasmModule.fixedtransaction_set_auxiliary_data;
var fixedtransaction_auxiliary_data = __vite__wasmModule.fixedtransaction_auxiliary_data;
var fixedtransaction_raw_auxiliary_data = __vite__wasmModule.fixedtransaction_raw_auxiliary_data;
var __wbg_networkinfo_free = __vite__wasmModule.__wbg_networkinfo_free;
var networkinfo_new = __vite__wasmModule.networkinfo_new;
var networkinfo_network_id = __vite__wasmModule.networkinfo_network_id;
var networkinfo_protocol_magic = __vite__wasmModule.networkinfo_protocol_magic;
var networkinfo_testnet_preview = __vite__wasmModule.networkinfo_testnet_preview;
var networkinfo_testnet_preprod = __vite__wasmModule.networkinfo_testnet_preprod;
var networkinfo_testnet = __vite__wasmModule.networkinfo_testnet;
var networkinfo_mainnet = __vite__wasmModule.networkinfo_mainnet;
var __wbg_stakecredential_free = __vite__wasmModule.__wbg_stakecredential_free;
var stakecredential_from_keyhash = __vite__wasmModule.stakecredential_from_keyhash;
var stakecredential_from_scripthash = __vite__wasmModule.stakecredential_from_scripthash;
var stakecredential_to_keyhash = __vite__wasmModule.stakecredential_to_keyhash;
var stakecredential_to_scripthash = __vite__wasmModule.stakecredential_to_scripthash;
var stakecredential_kind = __vite__wasmModule.stakecredential_kind;
var stakecredential_to_bytes = __vite__wasmModule.stakecredential_to_bytes;
var stakecredential_from_bytes = __vite__wasmModule.stakecredential_from_bytes;
var stakecredential_to_hex = __vite__wasmModule.stakecredential_to_hex;
var stakecredential_from_hex = __vite__wasmModule.stakecredential_from_hex;
var stakecredential_to_json = __vite__wasmModule.stakecredential_to_json;
var stakecredential_to_js_value = __vite__wasmModule.stakecredential_to_js_value;
var stakecredential_from_json = __vite__wasmModule.stakecredential_from_json;
var __wbg_byronaddress_free = __vite__wasmModule.__wbg_byronaddress_free;
var byronaddress_to_base58 = __vite__wasmModule.byronaddress_to_base58;
var byronaddress_to_bytes = __vite__wasmModule.byronaddress_to_bytes;
var byronaddress_from_bytes = __vite__wasmModule.byronaddress_from_bytes;
var byronaddress_byron_protocol_magic = __vite__wasmModule.byronaddress_byron_protocol_magic;
var byronaddress_attributes = __vite__wasmModule.byronaddress_attributes;
var byronaddress_network_id = __vite__wasmModule.byronaddress_network_id;
var byronaddress_from_base58 = __vite__wasmModule.byronaddress_from_base58;
var byronaddress_icarus_from_key = __vite__wasmModule.byronaddress_icarus_from_key;
var byronaddress_is_valid = __vite__wasmModule.byronaddress_is_valid;
var byronaddress_to_address = __vite__wasmModule.byronaddress_to_address;
var byronaddress_from_address = __vite__wasmModule.byronaddress_from_address;
var __wbg_address_free = __vite__wasmModule.__wbg_address_free;
var address_from_bytes = __vite__wasmModule.address_from_bytes;
var address_to_json = __vite__wasmModule.address_to_json;
var address_to_js_value = __vite__wasmModule.address_to_js_value;
var address_from_json = __vite__wasmModule.address_from_json;
var address_to_hex = __vite__wasmModule.address_to_hex;
var address_from_hex = __vite__wasmModule.address_from_hex;
var address_to_bytes = __vite__wasmModule.address_to_bytes;
var address_to_bech32 = __vite__wasmModule.address_to_bech32;
var address_from_bech32 = __vite__wasmModule.address_from_bech32;
var address_network_id = __vite__wasmModule.address_network_id;
var __wbg_baseaddress_free = __vite__wasmModule.__wbg_baseaddress_free;
var baseaddress_new = __vite__wasmModule.baseaddress_new;
var baseaddress_payment_cred = __vite__wasmModule.baseaddress_payment_cred;
var baseaddress_stake_cred = __vite__wasmModule.baseaddress_stake_cred;
var baseaddress_to_address = __vite__wasmModule.baseaddress_to_address;
var baseaddress_from_address = __vite__wasmModule.baseaddress_from_address;
var __wbg_enterpriseaddress_free = __vite__wasmModule.__wbg_enterpriseaddress_free;
var enterpriseaddress_new = __vite__wasmModule.enterpriseaddress_new;
var enterpriseaddress_payment_cred = __vite__wasmModule.enterpriseaddress_payment_cred;
var enterpriseaddress_to_address = __vite__wasmModule.enterpriseaddress_to_address;
var enterpriseaddress_from_address = __vite__wasmModule.enterpriseaddress_from_address;
var __wbg_rewardaddress_free = __vite__wasmModule.__wbg_rewardaddress_free;
var rewardaddress_new = __vite__wasmModule.rewardaddress_new;
var rewardaddress_payment_cred = __vite__wasmModule.rewardaddress_payment_cred;
var rewardaddress_to_address = __vite__wasmModule.rewardaddress_to_address;
var rewardaddress_from_address = __vite__wasmModule.rewardaddress_from_address;
var __wbg_pointer_free = __vite__wasmModule.__wbg_pointer_free;
var pointer_new = __vite__wasmModule.pointer_new;
var pointer_new_pointer = __vite__wasmModule.pointer_new_pointer;
var pointer_slot = __vite__wasmModule.pointer_slot;
var pointer_tx_index = __vite__wasmModule.pointer_tx_index;
var pointer_cert_index = __vite__wasmModule.pointer_cert_index;
var pointer_slot_bignum = __vite__wasmModule.pointer_slot_bignum;
var pointer_tx_index_bignum = __vite__wasmModule.pointer_tx_index_bignum;
var pointer_cert_index_bignum = __vite__wasmModule.pointer_cert_index_bignum;
var __wbg_pointeraddress_free = __vite__wasmModule.__wbg_pointeraddress_free;
var pointeraddress_new = __vite__wasmModule.pointeraddress_new;
var pointeraddress_payment_cred = __vite__wasmModule.pointeraddress_payment_cred;
var pointeraddress_stake_pointer = __vite__wasmModule.pointeraddress_stake_pointer;
var pointeraddress_to_address = __vite__wasmModule.pointeraddress_to_address;
var pointeraddress_from_address = __vite__wasmModule.pointeraddress_from_address;
var encrypt_with_password = __vite__wasmModule.encrypt_with_password;
var decrypt_with_password = __vite__wasmModule.decrypt_with_password;
var __wbg_transactionbatchlist_free = __vite__wasmModule.__wbg_transactionbatchlist_free;
var transactionbatchlist_len = __vite__wasmModule.transactionbatchlist_len;
var transactionbatchlist_get = __vite__wasmModule.transactionbatchlist_get;
var __wbg_transactionbatch_free = __vite__wasmModule.__wbg_transactionbatch_free;
var transactionbatch_len = __vite__wasmModule.transactionbatch_len;
var transactionbatch_get = __vite__wasmModule.transactionbatch_get;
var create_send_all = __vite__wasmModule.create_send_all;
var __wbg_transactionunspentoutput_free = __vite__wasmModule.__wbg_transactionunspentoutput_free;
var transactionunspentoutput_to_bytes = __vite__wasmModule.transactionunspentoutput_to_bytes;
var transactionunspentoutput_from_bytes = __vite__wasmModule.transactionunspentoutput_from_bytes;
var transactionunspentoutput_to_hex = __vite__wasmModule.transactionunspentoutput_to_hex;
var transactionunspentoutput_from_hex = __vite__wasmModule.transactionunspentoutput_from_hex;
var transactionunspentoutput_to_json = __vite__wasmModule.transactionunspentoutput_to_json;
var transactionunspentoutput_to_js_value = __vite__wasmModule.transactionunspentoutput_to_js_value;
var transactionunspentoutput_from_json = __vite__wasmModule.transactionunspentoutput_from_json;
var transactionunspentoutput_new = __vite__wasmModule.transactionunspentoutput_new;
var transactionunspentoutput_input = __vite__wasmModule.transactionunspentoutput_input;
var transactionunspentoutput_output = __vite__wasmModule.transactionunspentoutput_output;
var __wbg_transactionunspentoutputs_free = __vite__wasmModule.__wbg_transactionunspentoutputs_free;
var transactionunspentoutputs_to_json = __vite__wasmModule.transactionunspentoutputs_to_json;
var transactionunspentoutputs_to_js_value = __vite__wasmModule.transactionunspentoutputs_to_js_value;
var transactionunspentoutputs_from_json = __vite__wasmModule.transactionunspentoutputs_from_json;
var transactionunspentoutputs_new = __vite__wasmModule.transactionunspentoutputs_new;
var transactionunspentoutputs_len = __vite__wasmModule.transactionunspentoutputs_len;
var transactionunspentoutputs_get = __vite__wasmModule.transactionunspentoutputs_get;
var transactionunspentoutputs_add = __vite__wasmModule.transactionunspentoutputs_add;
var __wbg_bignum_free = __vite__wasmModule.__wbg_bignum_free;
var bignum_to_bytes = __vite__wasmModule.bignum_to_bytes;
var bignum_from_bytes = __vite__wasmModule.bignum_from_bytes;
var bignum_to_hex = __vite__wasmModule.bignum_to_hex;
var bignum_from_hex = __vite__wasmModule.bignum_from_hex;
var bignum_to_json = __vite__wasmModule.bignum_to_json;
var bignum_to_js_value = __vite__wasmModule.bignum_to_js_value;
var bignum_from_json = __vite__wasmModule.bignum_from_json;
var bignum_from_str = __vite__wasmModule.bignum_from_str;
var bignum_to_str = __vite__wasmModule.bignum_to_str;
var bignum_zero = __vite__wasmModule.bignum_zero;
var bignum_one = __vite__wasmModule.bignum_one;
var bignum_is_zero = __vite__wasmModule.bignum_is_zero;
var bignum_div_floor = __vite__wasmModule.bignum_div_floor;
var bignum_checked_mul = __vite__wasmModule.bignum_checked_mul;
var bignum_checked_add = __vite__wasmModule.bignum_checked_add;
var bignum_checked_sub = __vite__wasmModule.bignum_checked_sub;
var bignum_clamped_sub = __vite__wasmModule.bignum_clamped_sub;
var bignum_compare = __vite__wasmModule.bignum_compare;
var bignum_less_than = __vite__wasmModule.bignum_less_than;
var bignum_max_value = __vite__wasmModule.bignum_max_value;
var bignum_max = __vite__wasmModule.bignum_max;
var __wbg_value_free = __vite__wasmModule.__wbg_value_free;
var value_to_bytes = __vite__wasmModule.value_to_bytes;
var value_from_bytes = __vite__wasmModule.value_from_bytes;
var value_to_hex = __vite__wasmModule.value_to_hex;
var value_from_hex = __vite__wasmModule.value_from_hex;
var value_to_json = __vite__wasmModule.value_to_json;
var value_to_js_value = __vite__wasmModule.value_to_js_value;
var value_from_json = __vite__wasmModule.value_from_json;
var value_new = __vite__wasmModule.value_new;
var value_new_from_assets = __vite__wasmModule.value_new_from_assets;
var value_new_with_assets = __vite__wasmModule.value_new_with_assets;
var value_zero = __vite__wasmModule.value_zero;
var value_is_zero = __vite__wasmModule.value_is_zero;
var value_coin = __vite__wasmModule.value_coin;
var value_set_coin = __vite__wasmModule.value_set_coin;
var value_multiasset = __vite__wasmModule.value_multiasset;
var value_set_multiasset = __vite__wasmModule.value_set_multiasset;
var value_checked_add = __vite__wasmModule.value_checked_add;
var value_checked_sub = __vite__wasmModule.value_checked_sub;
var value_clamped_sub = __vite__wasmModule.value_clamped_sub;
var value_compare = __vite__wasmModule.value_compare;
var __wbg_int_free = __vite__wasmModule.__wbg_int_free;
var int_to_bytes = __vite__wasmModule.int_to_bytes;
var int_from_bytes = __vite__wasmModule.int_from_bytes;
var int_to_hex = __vite__wasmModule.int_to_hex;
var int_from_hex = __vite__wasmModule.int_from_hex;
var int_to_json = __vite__wasmModule.int_to_json;
var int_to_js_value = __vite__wasmModule.int_to_js_value;
var int_from_json = __vite__wasmModule.int_from_json;
var int_new = __vite__wasmModule.int_new;
var int_new_negative = __vite__wasmModule.int_new_negative;
var int_new_i32 = __vite__wasmModule.int_new_i32;
var int_is_positive = __vite__wasmModule.int_is_positive;
var int_as_positive = __vite__wasmModule.int_as_positive;
var int_as_negative = __vite__wasmModule.int_as_negative;
var int_as_i32 = __vite__wasmModule.int_as_i32;
var int_as_i32_or_nothing = __vite__wasmModule.int_as_i32_or_nothing;
var int_as_i32_or_fail = __vite__wasmModule.int_as_i32_or_fail;
var int_to_str = __vite__wasmModule.int_to_str;
var int_from_str = __vite__wasmModule.int_from_str;
var __wbg_bigint_free = __vite__wasmModule.__wbg_bigint_free;
var bigint_to_bytes = __vite__wasmModule.bigint_to_bytes;
var bigint_from_bytes = __vite__wasmModule.bigint_from_bytes;
var bigint_to_hex = __vite__wasmModule.bigint_to_hex;
var bigint_from_hex = __vite__wasmModule.bigint_from_hex;
var bigint_to_json = __vite__wasmModule.bigint_to_json;
var bigint_to_js_value = __vite__wasmModule.bigint_to_js_value;
var bigint_from_json = __vite__wasmModule.bigint_from_json;
var bigint_is_zero = __vite__wasmModule.bigint_is_zero;
var bigint_as_u64 = __vite__wasmModule.bigint_as_u64;
var bigint_as_int = __vite__wasmModule.bigint_as_int;
var bigint_from_str = __vite__wasmModule.bigint_from_str;
var bigint_to_str = __vite__wasmModule.bigint_to_str;
var bigint_add = __vite__wasmModule.bigint_add;
var bigint_mul = __vite__wasmModule.bigint_mul;
var bigint_one = __vite__wasmModule.bigint_one;
var bigint_increment = __vite__wasmModule.bigint_increment;
var bigint_div_ceil = __vite__wasmModule.bigint_div_ceil;
var make_daedalus_bootstrap_witness = __vite__wasmModule.make_daedalus_bootstrap_witness;
var make_icarus_bootstrap_witness = __vite__wasmModule.make_icarus_bootstrap_witness;
var make_vkey_witness = __vite__wasmModule.make_vkey_witness;
var hash_auxiliary_data = __vite__wasmModule.hash_auxiliary_data;
var hash_transaction = __vite__wasmModule.hash_transaction;
var hash_plutus_data = __vite__wasmModule.hash_plutus_data;
var hash_script_data = __vite__wasmModule.hash_script_data;
var get_implicit_input = __vite__wasmModule.get_implicit_input;
var get_deposit = __vite__wasmModule.get_deposit;
var min_ada_for_output = __vite__wasmModule.min_ada_for_output;
var min_ada_required = __vite__wasmModule.min_ada_required;
var encode_json_str_to_native_script = __vite__wasmModule.encode_json_str_to_native_script;
var __wbg_transactionoutputbuilder_free = __vite__wasmModule.__wbg_transactionoutputbuilder_free;
var transactionoutputbuilder_new = __vite__wasmModule.transactionoutputbuilder_new;
var transactionoutputbuilder_with_address = __vite__wasmModule.transactionoutputbuilder_with_address;
var transactionoutputbuilder_with_data_hash = __vite__wasmModule.transactionoutputbuilder_with_data_hash;
var transactionoutputbuilder_with_plutus_data = __vite__wasmModule.transactionoutputbuilder_with_plutus_data;
var transactionoutputbuilder_with_script_ref = __vite__wasmModule.transactionoutputbuilder_with_script_ref;
var transactionoutputbuilder_next = __vite__wasmModule.transactionoutputbuilder_next;
var __wbg_transactionoutputamountbuilder_free = __vite__wasmModule.__wbg_transactionoutputamountbuilder_free;
var transactionoutputamountbuilder_with_value = __vite__wasmModule.transactionoutputamountbuilder_with_value;
var transactionoutputamountbuilder_with_coin = __vite__wasmModule.transactionoutputamountbuilder_with_coin;
var transactionoutputamountbuilder_with_coin_and_asset = __vite__wasmModule.transactionoutputamountbuilder_with_coin_and_asset;
var transactionoutputamountbuilder_with_asset_and_min_required_coin = __vite__wasmModule.transactionoutputamountbuilder_with_asset_and_min_required_coin;
var transactionoutputamountbuilder_with_asset_and_min_required_coin_by_utxo_cost = __vite__wasmModule.transactionoutputamountbuilder_with_asset_and_min_required_coin_by_utxo_cost;
var transactionoutputamountbuilder_build = __vite__wasmModule.transactionoutputamountbuilder_build;
var __wbg_bip32privatekey_free = __vite__wasmModule.__wbg_bip32privatekey_free;
var bip32privatekey_derive = __vite__wasmModule.bip32privatekey_derive;
var bip32privatekey_from_128_xprv = __vite__wasmModule.bip32privatekey_from_128_xprv;
var bip32privatekey_to_128_xprv = __vite__wasmModule.bip32privatekey_to_128_xprv;
var bip32privatekey_generate_ed25519_bip32 = __vite__wasmModule.bip32privatekey_generate_ed25519_bip32;
var bip32privatekey_to_raw_key = __vite__wasmModule.bip32privatekey_to_raw_key;
var bip32privatekey_to_public = __vite__wasmModule.bip32privatekey_to_public;
var bip32privatekey_from_bytes = __vite__wasmModule.bip32privatekey_from_bytes;
var bip32privatekey_as_bytes = __vite__wasmModule.bip32privatekey_as_bytes;
var bip32privatekey_from_bech32 = __vite__wasmModule.bip32privatekey_from_bech32;
var bip32privatekey_to_bech32 = __vite__wasmModule.bip32privatekey_to_bech32;
var bip32privatekey_from_bip39_entropy = __vite__wasmModule.bip32privatekey_from_bip39_entropy;
var bip32privatekey_chaincode = __vite__wasmModule.bip32privatekey_chaincode;
var bip32privatekey_to_hex = __vite__wasmModule.bip32privatekey_to_hex;
var bip32privatekey_from_hex = __vite__wasmModule.bip32privatekey_from_hex;
var __wbg_bip32publickey_free = __vite__wasmModule.__wbg_bip32publickey_free;
var bip32publickey_derive = __vite__wasmModule.bip32publickey_derive;
var bip32publickey_to_raw_key = __vite__wasmModule.bip32publickey_to_raw_key;
var bip32publickey_from_bytes = __vite__wasmModule.bip32publickey_from_bytes;
var bip32publickey_as_bytes = __vite__wasmModule.bip32publickey_as_bytes;
var bip32publickey_from_bech32 = __vite__wasmModule.bip32publickey_from_bech32;
var bip32publickey_to_bech32 = __vite__wasmModule.bip32publickey_to_bech32;
var bip32publickey_chaincode = __vite__wasmModule.bip32publickey_chaincode;
var bip32publickey_to_hex = __vite__wasmModule.bip32publickey_to_hex;
var bip32publickey_from_hex = __vite__wasmModule.bip32publickey_from_hex;
var __wbg_privatekey_free = __vite__wasmModule.__wbg_privatekey_free;
var privatekey_to_public = __vite__wasmModule.privatekey_to_public;
var privatekey_generate_ed25519 = __vite__wasmModule.privatekey_generate_ed25519;
var privatekey_generate_ed25519extended = __vite__wasmModule.privatekey_generate_ed25519extended;
var privatekey_from_bech32 = __vite__wasmModule.privatekey_from_bech32;
var privatekey_to_bech32 = __vite__wasmModule.privatekey_to_bech32;
var privatekey_as_bytes = __vite__wasmModule.privatekey_as_bytes;
var privatekey_from_extended_bytes = __vite__wasmModule.privatekey_from_extended_bytes;
var privatekey_from_normal_bytes = __vite__wasmModule.privatekey_from_normal_bytes;
var privatekey_sign = __vite__wasmModule.privatekey_sign;
var privatekey_to_hex = __vite__wasmModule.privatekey_to_hex;
var privatekey_from_hex = __vite__wasmModule.privatekey_from_hex;
var __wbg_publickey_free = __vite__wasmModule.__wbg_publickey_free;
var publickey_from_bech32 = __vite__wasmModule.publickey_from_bech32;
var publickey_to_bech32 = __vite__wasmModule.publickey_to_bech32;
var publickey_as_bytes = __vite__wasmModule.publickey_as_bytes;
var publickey_from_bytes = __vite__wasmModule.publickey_from_bytes;
var publickey_verify = __vite__wasmModule.publickey_verify;
var publickey_hash = __vite__wasmModule.publickey_hash;
var publickey_to_hex = __vite__wasmModule.publickey_to_hex;
var publickey_from_hex = __vite__wasmModule.publickey_from_hex;
var __wbg_vkey_free = __vite__wasmModule.__wbg_vkey_free;
var vkey_to_bytes = __vite__wasmModule.vkey_to_bytes;
var vkey_from_bytes = __vite__wasmModule.vkey_from_bytes;
var vkey_to_hex = __vite__wasmModule.vkey_to_hex;
var vkey_from_hex = __vite__wasmModule.vkey_from_hex;
var vkey_to_json = __vite__wasmModule.vkey_to_json;
var vkey_to_js_value = __vite__wasmModule.vkey_to_js_value;
var vkey_from_json = __vite__wasmModule.vkey_from_json;
var vkey_new = __vite__wasmModule.vkey_new;
var vkey_public_key = __vite__wasmModule.vkey_public_key;
var __wbg_vkeys_free = __vite__wasmModule.__wbg_vkeys_free;
var vkeys_new = __vite__wasmModule.vkeys_new;
var vkeys_len = __vite__wasmModule.vkeys_len;
var vkeys_get = __vite__wasmModule.vkeys_get;
var vkeys_add = __vite__wasmModule.vkeys_add;
var __wbg_vkeywitness_free = __vite__wasmModule.__wbg_vkeywitness_free;
var vkeywitness_to_bytes = __vite__wasmModule.vkeywitness_to_bytes;
var vkeywitness_from_bytes = __vite__wasmModule.vkeywitness_from_bytes;
var vkeywitness_to_hex = __vite__wasmModule.vkeywitness_to_hex;
var vkeywitness_from_hex = __vite__wasmModule.vkeywitness_from_hex;
var vkeywitness_to_json = __vite__wasmModule.vkeywitness_to_json;
var vkeywitness_to_js_value = __vite__wasmModule.vkeywitness_to_js_value;
var vkeywitness_from_json = __vite__wasmModule.vkeywitness_from_json;
var vkeywitness_new = __vite__wasmModule.vkeywitness_new;
var vkeywitness_vkey = __vite__wasmModule.vkeywitness_vkey;
var vkeywitness_signature = __vite__wasmModule.vkeywitness_signature;
var __wbg_vkeywitnesses_free = __vite__wasmModule.__wbg_vkeywitnesses_free;
var vkeywitnesses_to_bytes = __vite__wasmModule.vkeywitnesses_to_bytes;
var vkeywitnesses_from_bytes = __vite__wasmModule.vkeywitnesses_from_bytes;
var vkeywitnesses_to_hex = __vite__wasmModule.vkeywitnesses_to_hex;
var vkeywitnesses_from_hex = __vite__wasmModule.vkeywitnesses_from_hex;
var vkeywitnesses_to_json = __vite__wasmModule.vkeywitnesses_to_json;
var vkeywitnesses_to_js_value = __vite__wasmModule.vkeywitnesses_to_js_value;
var vkeywitnesses_from_json = __vite__wasmModule.vkeywitnesses_from_json;
var vkeywitnesses_new = __vite__wasmModule.vkeywitnesses_new;
var vkeywitnesses_len = __vite__wasmModule.vkeywitnesses_len;
var vkeywitnesses_get = __vite__wasmModule.vkeywitnesses_get;
var vkeywitnesses_add = __vite__wasmModule.vkeywitnesses_add;
var __wbg_bootstrapwitness_free = __vite__wasmModule.__wbg_bootstrapwitness_free;
var bootstrapwitness_to_bytes = __vite__wasmModule.bootstrapwitness_to_bytes;
var bootstrapwitness_from_bytes = __vite__wasmModule.bootstrapwitness_from_bytes;
var bootstrapwitness_to_hex = __vite__wasmModule.bootstrapwitness_to_hex;
var bootstrapwitness_from_hex = __vite__wasmModule.bootstrapwitness_from_hex;
var bootstrapwitness_to_json = __vite__wasmModule.bootstrapwitness_to_json;
var bootstrapwitness_to_js_value = __vite__wasmModule.bootstrapwitness_to_js_value;
var bootstrapwitness_from_json = __vite__wasmModule.bootstrapwitness_from_json;
var bootstrapwitness_vkey = __vite__wasmModule.bootstrapwitness_vkey;
var bootstrapwitness_signature = __vite__wasmModule.bootstrapwitness_signature;
var bootstrapwitness_chain_code = __vite__wasmModule.bootstrapwitness_chain_code;
var bootstrapwitness_attributes = __vite__wasmModule.bootstrapwitness_attributes;
var bootstrapwitness_new = __vite__wasmModule.bootstrapwitness_new;
var __wbg_bootstrapwitnesses_free = __vite__wasmModule.__wbg_bootstrapwitnesses_free;
var bootstrapwitnesses_new = __vite__wasmModule.bootstrapwitnesses_new;
var bootstrapwitnesses_len = __vite__wasmModule.bootstrapwitnesses_len;
var bootstrapwitnesses_get = __vite__wasmModule.bootstrapwitnesses_get;
var bootstrapwitnesses_add = __vite__wasmModule.bootstrapwitnesses_add;
var __wbg_publickeys_free = __vite__wasmModule.__wbg_publickeys_free;
var publickeys_new = __vite__wasmModule.publickeys_new;
var publickeys_size = __vite__wasmModule.publickeys_size;
var publickeys_get = __vite__wasmModule.publickeys_get;
var publickeys_add = __vite__wasmModule.publickeys_add;
var __wbg_ed25519signature_free = __vite__wasmModule.__wbg_ed25519signature_free;
var ed25519signature_to_bytes = __vite__wasmModule.ed25519signature_to_bytes;
var ed25519signature_to_bech32 = __vite__wasmModule.ed25519signature_to_bech32;
var ed25519signature_to_hex = __vite__wasmModule.ed25519signature_to_hex;
var ed25519signature_from_bech32 = __vite__wasmModule.ed25519signature_from_bech32;
var ed25519signature_from_hex = __vite__wasmModule.ed25519signature_from_hex;
var ed25519signature_from_bytes = __vite__wasmModule.ed25519signature_from_bytes;
var __wbg_legacydaedalusprivatekey_free = __vite__wasmModule.__wbg_legacydaedalusprivatekey_free;
var legacydaedalusprivatekey_from_bytes = __vite__wasmModule.legacydaedalusprivatekey_from_bytes;
var legacydaedalusprivatekey_as_bytes = __vite__wasmModule.legacydaedalusprivatekey_as_bytes;
var legacydaedalusprivatekey_chaincode = __vite__wasmModule.legacydaedalusprivatekey_chaincode;
var __wbg_ed25519keyhash_free = __vite__wasmModule.__wbg_ed25519keyhash_free;
var ed25519keyhash_from_bytes = __vite__wasmModule.ed25519keyhash_from_bytes;
var ed25519keyhash_to_bytes = __vite__wasmModule.ed25519keyhash_to_bytes;
var ed25519keyhash_to_bech32 = __vite__wasmModule.ed25519keyhash_to_bech32;
var ed25519keyhash_from_bech32 = __vite__wasmModule.ed25519keyhash_from_bech32;
var ed25519keyhash_to_hex = __vite__wasmModule.ed25519keyhash_to_hex;
var ed25519keyhash_from_hex = __vite__wasmModule.ed25519keyhash_from_hex;
var __wbg_scripthash_free = __vite__wasmModule.__wbg_scripthash_free;
var scripthash_from_bytes = __vite__wasmModule.scripthash_from_bytes;
var scripthash_to_bytes = __vite__wasmModule.scripthash_to_bytes;
var scripthash_to_bech32 = __vite__wasmModule.scripthash_to_bech32;
var scripthash_from_bech32 = __vite__wasmModule.scripthash_from_bech32;
var scripthash_to_hex = __vite__wasmModule.scripthash_to_hex;
var scripthash_from_hex = __vite__wasmModule.scripthash_from_hex;
var __wbg_transactionhash_free = __vite__wasmModule.__wbg_transactionhash_free;
var transactionhash_from_bytes = __vite__wasmModule.transactionhash_from_bytes;
var transactionhash_to_bytes = __vite__wasmModule.transactionhash_to_bytes;
var transactionhash_to_bech32 = __vite__wasmModule.transactionhash_to_bech32;
var transactionhash_from_bech32 = __vite__wasmModule.transactionhash_from_bech32;
var transactionhash_to_hex = __vite__wasmModule.transactionhash_to_hex;
var transactionhash_from_hex = __vite__wasmModule.transactionhash_from_hex;
var __wbg_genesisdelegatehash_free = __vite__wasmModule.__wbg_genesisdelegatehash_free;
var genesisdelegatehash_from_bytes = __vite__wasmModule.genesisdelegatehash_from_bytes;
var genesisdelegatehash_to_bytes = __vite__wasmModule.genesisdelegatehash_to_bytes;
var genesisdelegatehash_to_bech32 = __vite__wasmModule.genesisdelegatehash_to_bech32;
var genesisdelegatehash_from_bech32 = __vite__wasmModule.genesisdelegatehash_from_bech32;
var genesisdelegatehash_to_hex = __vite__wasmModule.genesisdelegatehash_to_hex;
var genesisdelegatehash_from_hex = __vite__wasmModule.genesisdelegatehash_from_hex;
var __wbg_genesishash_free = __vite__wasmModule.__wbg_genesishash_free;
var genesishash_from_bytes = __vite__wasmModule.genesishash_from_bytes;
var genesishash_to_bytes = __vite__wasmModule.genesishash_to_bytes;
var genesishash_to_bech32 = __vite__wasmModule.genesishash_to_bech32;
var genesishash_from_bech32 = __vite__wasmModule.genesishash_from_bech32;
var genesishash_to_hex = __vite__wasmModule.genesishash_to_hex;
var genesishash_from_hex = __vite__wasmModule.genesishash_from_hex;
var __wbg_auxiliarydatahash_free = __vite__wasmModule.__wbg_auxiliarydatahash_free;
var auxiliarydatahash_from_bytes = __vite__wasmModule.auxiliarydatahash_from_bytes;
var auxiliarydatahash_to_bytes = __vite__wasmModule.auxiliarydatahash_to_bytes;
var auxiliarydatahash_to_bech32 = __vite__wasmModule.auxiliarydatahash_to_bech32;
var auxiliarydatahash_from_bech32 = __vite__wasmModule.auxiliarydatahash_from_bech32;
var auxiliarydatahash_to_hex = __vite__wasmModule.auxiliarydatahash_to_hex;
var auxiliarydatahash_from_hex = __vite__wasmModule.auxiliarydatahash_from_hex;
var __wbg_poolmetadatahash_free = __vite__wasmModule.__wbg_poolmetadatahash_free;
var poolmetadatahash_from_bytes = __vite__wasmModule.poolmetadatahash_from_bytes;
var poolmetadatahash_to_bytes = __vite__wasmModule.poolmetadatahash_to_bytes;
var poolmetadatahash_to_bech32 = __vite__wasmModule.poolmetadatahash_to_bech32;
var poolmetadatahash_from_bech32 = __vite__wasmModule.poolmetadatahash_from_bech32;
var poolmetadatahash_to_hex = __vite__wasmModule.poolmetadatahash_to_hex;
var poolmetadatahash_from_hex = __vite__wasmModule.poolmetadatahash_from_hex;
var __wbg_vrfkeyhash_free = __vite__wasmModule.__wbg_vrfkeyhash_free;
var vrfkeyhash_from_bytes = __vite__wasmModule.vrfkeyhash_from_bytes;
var vrfkeyhash_to_bytes = __vite__wasmModule.vrfkeyhash_to_bytes;
var vrfkeyhash_to_bech32 = __vite__wasmModule.vrfkeyhash_to_bech32;
var vrfkeyhash_from_bech32 = __vite__wasmModule.vrfkeyhash_from_bech32;
var vrfkeyhash_to_hex = __vite__wasmModule.vrfkeyhash_to_hex;
var vrfkeyhash_from_hex = __vite__wasmModule.vrfkeyhash_from_hex;
var __wbg_blockhash_free = __vite__wasmModule.__wbg_blockhash_free;
var blockhash_from_bytes = __vite__wasmModule.blockhash_from_bytes;
var blockhash_to_bytes = __vite__wasmModule.blockhash_to_bytes;
var blockhash_to_bech32 = __vite__wasmModule.blockhash_to_bech32;
var blockhash_from_bech32 = __vite__wasmModule.blockhash_from_bech32;
var blockhash_to_hex = __vite__wasmModule.blockhash_to_hex;
var blockhash_from_hex = __vite__wasmModule.blockhash_from_hex;
var __wbg_datahash_free = __vite__wasmModule.__wbg_datahash_free;
var datahash_from_bytes = __vite__wasmModule.datahash_from_bytes;
var datahash_to_bytes = __vite__wasmModule.datahash_to_bytes;
var datahash_to_bech32 = __vite__wasmModule.datahash_to_bech32;
var datahash_from_bech32 = __vite__wasmModule.datahash_from_bech32;
var datahash_to_hex = __vite__wasmModule.datahash_to_hex;
var datahash_from_hex = __vite__wasmModule.datahash_from_hex;
var __wbg_scriptdatahash_free = __vite__wasmModule.__wbg_scriptdatahash_free;
var scriptdatahash_from_bytes = __vite__wasmModule.scriptdatahash_from_bytes;
var scriptdatahash_to_bytes = __vite__wasmModule.scriptdatahash_to_bytes;
var scriptdatahash_to_bech32 = __vite__wasmModule.scriptdatahash_to_bech32;
var scriptdatahash_from_bech32 = __vite__wasmModule.scriptdatahash_from_bech32;
var scriptdatahash_to_hex = __vite__wasmModule.scriptdatahash_to_hex;
var scriptdatahash_from_hex = __vite__wasmModule.scriptdatahash_from_hex;
var __wbg_vrfvkey_free = __vite__wasmModule.__wbg_vrfvkey_free;
var vrfvkey_from_bytes = __vite__wasmModule.vrfvkey_from_bytes;
var vrfvkey_to_bytes = __vite__wasmModule.vrfvkey_to_bytes;
var vrfvkey_to_bech32 = __vite__wasmModule.vrfvkey_to_bech32;
var vrfvkey_from_bech32 = __vite__wasmModule.vrfvkey_from_bech32;
var vrfvkey_to_hex = __vite__wasmModule.vrfvkey_to_hex;
var vrfvkey_from_hex = __vite__wasmModule.vrfvkey_from_hex;
var __wbg_kesvkey_free = __vite__wasmModule.__wbg_kesvkey_free;
var kesvkey_from_bytes = __vite__wasmModule.kesvkey_from_bytes;
var kesvkey_to_bytes = __vite__wasmModule.kesvkey_to_bytes;
var kesvkey_to_bech32 = __vite__wasmModule.kesvkey_to_bech32;
var kesvkey_from_bech32 = __vite__wasmModule.kesvkey_from_bech32;
var kesvkey_to_hex = __vite__wasmModule.kesvkey_to_hex;
var kesvkey_from_hex = __vite__wasmModule.kesvkey_from_hex;
var __wbg_kessignature_free = __vite__wasmModule.__wbg_kessignature_free;
var kessignature_to_bytes = __vite__wasmModule.kessignature_to_bytes;
var kessignature_from_bytes = __vite__wasmModule.kessignature_from_bytes;
var __wbg_nonce_free = __vite__wasmModule.__wbg_nonce_free;
var nonce_to_bytes = __vite__wasmModule.nonce_to_bytes;
var nonce_from_bytes = __vite__wasmModule.nonce_from_bytes;
var nonce_to_hex = __vite__wasmModule.nonce_to_hex;
var nonce_from_hex = __vite__wasmModule.nonce_from_hex;
var nonce_to_json = __vite__wasmModule.nonce_to_json;
var nonce_to_js_value = __vite__wasmModule.nonce_to_js_value;
var nonce_from_json = __vite__wasmModule.nonce_from_json;
var nonce_new_identity = __vite__wasmModule.nonce_new_identity;
var nonce_new_from_hash = __vite__wasmModule.nonce_new_from_hash;
var nonce_get_hash = __vite__wasmModule.nonce_get_hash;
var __wbg_vrfcert_free = __vite__wasmModule.__wbg_vrfcert_free;
var vrfcert_to_bytes = __vite__wasmModule.vrfcert_to_bytes;
var vrfcert_from_bytes = __vite__wasmModule.vrfcert_from_bytes;
var vrfcert_to_hex = __vite__wasmModule.vrfcert_to_hex;
var vrfcert_from_hex = __vite__wasmModule.vrfcert_from_hex;
var vrfcert_to_json = __vite__wasmModule.vrfcert_to_json;
var vrfcert_to_js_value = __vite__wasmModule.vrfcert_to_js_value;
var vrfcert_from_json = __vite__wasmModule.vrfcert_from_json;
var vrfcert_output = __vite__wasmModule.vrfcert_output;
var vrfcert_proof = __vite__wasmModule.vrfcert_proof;
var vrfcert_new = __vite__wasmModule.vrfcert_new;
var __wbindgen_malloc = __vite__wasmModule.__wbindgen_malloc;
var __wbindgen_realloc = __vite__wasmModule.__wbindgen_realloc;
var __wbindgen_add_to_stack_pointer = __vite__wasmModule.__wbindgen_add_to_stack_pointer;
var __wbindgen_free = __vite__wasmModule.__wbindgen_free;
var __wbindgen_exn_store = __vite__wasmModule.__wbindgen_exn_store;
export {
  Address,
  AssetName,
  AssetNames,
  Assets,
  AuxiliaryData,
  AuxiliaryDataHash,
  AuxiliaryDataSet,
  BaseAddress,
  BigInt,
  BigNum,
  Bip32PrivateKey,
  Bip32PublicKey,
  Block,
  BlockHash,
  BootstrapWitness,
  BootstrapWitnesses,
  ByronAddress,
  Certificate,
  CertificateKind,
  Certificates,
  CoinSelectionStrategyCIP2,
  ConstrPlutusData,
  CostModel,
  Costmdls,
  DNSRecordAorAAAA,
  DNSRecordSRV,
  DataCost,
  DataHash,
  DatumSource,
  Ed25519KeyHash,
  Ed25519KeyHashes,
  Ed25519Signature,
  EnterpriseAddress,
  ExUnitPrices,
  ExUnits,
  FixedTransaction,
  GeneralTransactionMetadata,
  GenesisDelegateHash,
  GenesisHash,
  GenesisHashes,
  GenesisKeyDelegation,
  Header,
  HeaderBody,
  InputWithScriptWitness,
  InputsWithScriptWitness,
  Int,
  Ipv4,
  Ipv6,
  KESSignature,
  KESVKey,
  Language,
  LanguageKind,
  Languages,
  LegacyDaedalusPrivateKey,
  LinearFee,
  MIRKind,
  MIRPot,
  MIRToStakeCredentials,
  MetadataJsonSchema,
  MetadataList,
  MetadataMap,
  Mint,
  MintAssets,
  MintBuilder,
  MintWitness,
  MintsAssets,
  MoveInstantaneousReward,
  MoveInstantaneousRewardsCert,
  MultiAsset,
  MultiHostName,
  NativeScript,
  NativeScriptKind,
  NativeScripts,
  NetworkId,
  NetworkIdKind,
  NetworkInfo,
  Nonce,
  OperationalCert,
  PlutusData,
  PlutusDataKind,
  PlutusDatumSchema,
  PlutusList,
  PlutusMap,
  PlutusScript,
  PlutusScriptSource,
  PlutusScripts,
  PlutusWitness,
  PlutusWitnesses,
  Pointer,
  PointerAddress,
  PoolMetadata,
  PoolMetadataHash,
  PoolParams,
  PoolRegistration,
  PoolRetirement,
  PrivateKey,
  ProposedProtocolParameterUpdates,
  ProtocolParamUpdate,
  ProtocolVersion,
  PublicKey,
  PublicKeys,
  Redeemer,
  RedeemerTag,
  RedeemerTagKind,
  Redeemers,
  Relay,
  RelayKind,
  Relays,
  RewardAddress,
  RewardAddresses,
  ScriptAll,
  ScriptAny,
  ScriptDataHash,
  ScriptHash,
  ScriptHashNamespace,
  ScriptHashes,
  ScriptNOfK,
  ScriptPubkey,
  ScriptRef,
  ScriptSchema,
  SingleHostAddr,
  SingleHostName,
  StakeCredKind,
  StakeCredential,
  StakeCredentials,
  StakeDelegation,
  StakeDeregistration,
  StakeRegistration,
  Strings,
  TimelockExpiry,
  TimelockStart,
  Transaction,
  TransactionBatch,
  TransactionBatchList,
  TransactionBodies,
  TransactionBody,
  TransactionBuilder,
  TransactionBuilderConfig,
  TransactionBuilderConfigBuilder,
  TransactionHash,
  TransactionInput,
  TransactionInputs,
  TransactionMetadatum,
  TransactionMetadatumKind,
  TransactionMetadatumLabels,
  TransactionOutput,
  TransactionOutputAmountBuilder,
  TransactionOutputBuilder,
  TransactionOutputs,
  TransactionUnspentOutput,
  TransactionUnspentOutputs,
  TransactionWitnessSet,
  TransactionWitnessSets,
  TxBuilderConstants,
  TxInputsBuilder,
  URL,
  UnitInterval,
  Update,
  VRFCert,
  VRFKeyHash,
  VRFVKey,
  Value,
  Vkey,
  Vkeys,
  Vkeywitness,
  Vkeywitnesses,
  Withdrawals,
  __wbg_String_91fba7ded13ba54c,
  __wbg_buffer_3f3d764d4747d564,
  __wbg_call_168da88779e35f61,
  __wbg_call_97ae9d8645dc388b,
  __wbg_call_eae29933372a39be,
  __wbg_crypto_e1d53a1d73fb10b8,
  __wbg_crypto_e95a6e54c5c2e37f,
  __wbg_getRandomValues_02639197c8166a96,
  __wbg_getRandomValues_805f1c3d65988a5a,
  __wbg_getRandomValues_dc67302a7bd1aec5,
  __wbg_globalThis_7f206bda628d5286,
  __wbg_global_ba75c50d1cf384f4,
  __wbg_length_9e1ae1900cb0fbd5,
  __wbg_msCrypto_6e7d3e1f92610cbb,
  __wbg_new_0b9bfdd97583284e,
  __wbg_new_1d9a920c6bfc44a8,
  __wbg_new_268f7b7dd3430798,
  __wbg_new_8c3f0052272a457a,
  __wbg_new_d87f272aec784ec0,
  __wbg_newnoargs_b5b063fc6c2f0376,
  __wbg_newwithlength_f5933855e4f48a19,
  __wbg_node_080f4b19d15bc1fe,
  __wbg_process_038c26bf42b093f8,
  __wbg_randomFillSync_6894564c2c334c42,
  __wbg_randomFillSync_dd2297de5917c74e,
  __wbg_require_0993fe224bf8e202,
  __wbg_require_78a3dcfbdba9cbce,
  __wbg_self_6d479506f72c6a71,
  __wbg_self_e0b3266d2d9eba1a,
  __wbg_set_20cbc34131e76824,
  __wbg_set_83db9690f9353e79,
  __wbg_set_933729cf5b66ac11,
  __wbg_set_a68214f35c417fa9,
  __wbg_subarray_58ad4efbb5bcb886,
  __wbg_versions_ab37218d2f0b24a8,
  __wbg_window_f2557cc78490aceb,
  __wbindgen_debug_string,
  __wbindgen_error_new,
  __wbindgen_is_function,
  __wbindgen_is_object,
  __wbindgen_is_string,
  __wbindgen_is_undefined,
  __wbindgen_jsval_eq,
  __wbindgen_memory,
  __wbindgen_number_new,
  __wbindgen_object_clone_ref,
  __wbindgen_object_drop_ref,
  __wbindgen_string_get,
  __wbindgen_string_new,
  __wbindgen_throw,
  calculate_ex_units_ceil_cost2 as calculate_ex_units_ceil_cost,
  create_send_all2 as create_send_all,
  decode_arbitrary_bytes_from_metadatum2 as decode_arbitrary_bytes_from_metadatum,
  decode_metadatum_to_json_str2 as decode_metadatum_to_json_str,
  decode_plutus_datum_to_json_str2 as decode_plutus_datum_to_json_str,
  decrypt_with_password2 as decrypt_with_password,
  encode_arbitrary_bytes_as_metadatum2 as encode_arbitrary_bytes_as_metadatum,
  encode_json_str_to_metadatum2 as encode_json_str_to_metadatum,
  encode_json_str_to_native_script2 as encode_json_str_to_native_script,
  encode_json_str_to_plutus_datum2 as encode_json_str_to_plutus_datum,
  encrypt_with_password2 as encrypt_with_password,
  get_deposit2 as get_deposit,
  get_implicit_input2 as get_implicit_input,
  hash_auxiliary_data2 as hash_auxiliary_data,
  hash_plutus_data2 as hash_plutus_data,
  hash_script_data2 as hash_script_data,
  hash_transaction2 as hash_transaction,
  make_daedalus_bootstrap_witness2 as make_daedalus_bootstrap_witness,
  make_icarus_bootstrap_witness2 as make_icarus_bootstrap_witness,
  make_vkey_witness2 as make_vkey_witness,
  min_ada_for_output2 as min_ada_for_output,
  min_ada_required2 as min_ada_required,
  min_fee2 as min_fee,
  min_script_fee2 as min_script_fee
};
//# sourceMappingURL=@emurgo_cardano-serialization-lib-browser_cardano_serialization_lib.js.map
